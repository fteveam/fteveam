{"version":3,"sources":["../../src/api/type.ts"],"sourcesContent":["import { FarmRewardInfo, FarmVersion } from \"../raydium/farm\";\n\n/* ================= token ================= */\nexport interface ApiTokenInfo {\n  symbol: string;\n  name: string;\n  mint: string;\n  decimals: number;\n  icon: string;\n  extensions: { [key in \"coingeckoId\" | \"website\" | \"whitepaper\"]?: string };\n}\n\nexport type ApiTokenCategory = \"official\" | \"unOfficial\" | \"unNamed\" | \"blacklist\";\n\nexport type ApiTokens = {\n  official: ApiTokenInfo[];\n  unOfficial: ApiTokenInfo[];\n  unNamed: string[];\n  blacklist: string[];\n};\n\n/* ================= liquidity ================= */\nexport type LiquidityVersion = 4 | 5;\n\nexport type SerumVersion = 1 | 2 | 3;\n\nexport interface ApiLiquidityPoolInfo {\n  // base\n  id: string;\n  baseMint: string;\n  quoteMint: string;\n  lpMint: string;\n  baseDecimals: number;\n  quoteDecimals: number;\n  lpDecimals: number;\n  // version\n  version: LiquidityVersion;\n  programId: string;\n  // keys\n  authority: string;\n  openOrders: string;\n  targetOrders: string;\n  baseVault: string;\n  quoteVault: string;\n  withdrawQueue: string;\n  lpVault: string;\n  // market version\n  marketVersion: SerumVersion;\n  marketProgramId: string;\n  // market keys\n  marketId: string;\n  marketAuthority: string;\n  marketBaseVault: string;\n  marketQuoteVault: string;\n  marketBids: string;\n  marketAsks: string;\n  marketEventQueue: string;\n}\n\nexport type ApiLiquidityPools = { [key in \"official\" | \"unOfficial\"]: ApiLiquidityPoolInfo[] };\n\nexport interface ApiJsonPairInfo {\n  ammId: string;\n  apr24h: number;\n  apr7d: number;\n  apr30d: number;\n  fee7d: number;\n  fee7dQuote: number;\n  fee24h: number;\n  fee24hQuote: number;\n  fee30d: number;\n  fee30dQuote: number;\n  liquidity: number;\n  lpMint: string;\n  lpPrice: number | null; // lp price directly. (No need to mandually calculate it from liquidity list)\n  market: string;\n  name: string;\n  official: boolean;\n  price: number; // swap price forwrard. for example, if pairId is 'ETH-USDC', price is xxx USDC/ETH\n  tokenAmountCoin: number;\n  tokenAmountLp: number;\n  tokenAmountPc: number;\n  volume7d: number;\n  volume7dQuote: number;\n  volume24h: number;\n  volume24hQuote: number;\n  volume30d: number;\n  volume30dQuote: number;\n}\n\n/* ================= farm ================= */\nexport interface FarmRewardInfoV6 {\n  rewardMint: string;\n  rewardVault: string;\n  rewardOpenTime: number;\n  rewardEndTime: number;\n  rewardPerSecond: number;\n  rewardSender: string;\n}\n\nexport interface ApiStakePoolInfo {\n  // base\n  id: string;\n  symbol: string;\n  lpMint: string;\n  // version\n  version: FarmVersion;\n  programId: string;\n  // keys\n  authority: string;\n  lpVault: string;\n  rewardInfos: FarmRewardInfo[] | FarmRewardInfoV6[];\n  // status\n  upcoming: boolean;\n}\n\nexport interface ApiFarmPoolInfo extends ApiStakePoolInfo {\n  baseMint: string;\n  quoteMint: string;\n}\n\nexport interface ApiFarmPools {\n  stake: ApiStakePoolInfo[];\n  raydium: ApiFarmPoolInfo[];\n  fusion: ApiFarmPoolInfo[];\n  ecosystem: ApiFarmPoolInfo[];\n}\n"],"mappings":"kWAAA","names":[]}