{"version":3,"sources":["../../../src/raydium/liquidity/type.ts"],"sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { ApiJsonPairInfo, ApiLiquidityPoolInfo, LiquidityVersion } from \"../../api/type\";\nimport { GetMultipleAccountsInfoConfig } from \"../../common/accountInfo\";\nimport { BigNumberish } from \"../../common/bignumber\";\nimport { PublicKeyish } from \"../../common/pubKey\";\nimport { Percent, Price, Token, TokenAmount } from \"../../module\";\nimport { ReplaceType } from \"../type\";\n\nexport type LiquidityPoolJsonInfo = ApiLiquidityPoolInfo;\nexport type PairJsonInfo = ApiJsonPairInfo;\n/* ================= pool keys ================= */\nexport type LiquidityPoolKeysV4 = {\n  [T in keyof LiquidityPoolJsonInfo]: string extends LiquidityPoolJsonInfo[T] ? PublicKey : LiquidityPoolJsonInfo[T];\n};\n\nexport type LiquiditySide = \"a\" | \"b\";\nexport type SwapSide = \"in\" | \"out\";\nexport type AmountSide = \"base\" | \"quote\";\n/**\n * Full liquidity pool keys that build transaction need\n */\nexport type LiquidityPoolKeys = LiquidityPoolKeysV4;\n\nexport interface LiquidityPoolInfo {\n  status: BN;\n  baseDecimals: number;\n  quoteDecimals: number;\n  lpDecimals: number;\n  baseReserve: BN;\n  quoteReserve: BN;\n  lpSupply: BN;\n  startTime: BN;\n}\n\nexport type SDKParsedLiquidityInfo = ReplaceType<LiquidityPoolJsonInfo, string, PublicKey> & {\n  jsonInfo: LiquidityPoolJsonInfo;\n  status: BN;\n  baseDecimals: number;\n  quoteDecimals: number;\n  lpDecimals: number;\n  baseReserve: BN;\n  quoteReserve: BN;\n  lpSupply: BN;\n  startTime: BN;\n};\n\nexport interface AmmSource {\n  poolKeys: LiquidityPoolKeys;\n  poolInfo: LiquidityPoolInfo;\n}\n\nexport interface SerumSource {\n  marketKeys: [];\n  bids: [];\n  asks: [];\n}\n\nexport interface LiquidityFetchMultipleInfoParams {\n  pools: LiquidityPoolKeys[];\n  config?: GetMultipleAccountsInfoConfig;\n}\n\nexport interface LiquidityComputeAmountOutParams {\n  poolKeys: LiquidityPoolKeys;\n  poolInfo: LiquidityPoolInfo;\n  amountIn: TokenAmount;\n  outputToken: Token;\n  slippage: Percent;\n}\n\nexport type LiquidityComputeAmountOutReturn = {\n  amountOut: TokenAmount;\n  minAmountOut: TokenAmount;\n  currentPrice: Price;\n  executionPrice: Price | null;\n  priceImpact: Percent;\n  fee: TokenAmount;\n};\n\nexport interface LiquiditySwapTransactionParams {\n  poolKeys: LiquidityPoolKeys;\n  payer?: PublicKey;\n  amountIn: TokenAmount;\n  amountOut: TokenAmount;\n  fixedSide: SwapSide;\n  config?: {\n    bypassAssociatedCheck?: boolean;\n  };\n}\nexport interface LiquiditySwapFixedOutInstructionParamsV4 {\n  poolKeys: LiquidityPoolKeys;\n  userKeys: {\n    tokenAccountIn: PublicKey;\n    tokenAccountOut: PublicKey;\n    owner: PublicKey;\n  };\n  // maximum amount in\n  maxAmountIn: BigNumberish;\n  amountOut: BigNumberish;\n}\n\n/**\n * Swap instruction params\n */\nexport interface LiquiditySwapInstructionParams {\n  poolKeys: LiquidityPoolKeys;\n  userKeys: {\n    tokenAccountIn: PublicKey;\n    tokenAccountOut: PublicKey;\n    owner: PublicKey;\n  };\n  amountIn: BigNumberish;\n  amountOut: BigNumberish;\n  fixedSide: SwapSide;\n}\n\nexport interface LiquiditySwapFixedInInstructionParamsV4 {\n  poolKeys: LiquidityPoolKeys;\n  userKeys: {\n    tokenAccountIn: PublicKey;\n    tokenAccountOut: PublicKey;\n    owner: PublicKey;\n  };\n  amountIn: BigNumberish;\n  minAmountOut: BigNumberish;\n}\n\nexport interface LiquidityAssociatedPoolKeysV4\n  extends Omit<\n    LiquidityPoolKeysV4,\n    | \"marketBaseVault\"\n    | \"marketQuoteVault\"\n    | \"marketBids\"\n    | \"marketAsks\"\n    | \"marketEventQueue\"\n    | \"baseDecimals\"\n    | \"quoteDecimals\"\n    | \"lpDecimals\"\n  > {\n  nonce: number;\n}\n\n/**\n * Associated liquidity pool keys\n * @remarks\n * without partial markets keys\n */\nexport type LiquidityAssociatedPoolKeys = LiquidityAssociatedPoolKeysV4;\n\nexport interface CreatePoolParam {\n  version: LiquidityVersion;\n  baseMint: PublicKeyish;\n  quoteMint: PublicKeyish;\n  marketId: PublicKeyish;\n}\n\nexport interface InitPoolParam extends CreatePoolParam {\n  baseAmount: TokenAmount;\n  quoteAmount: TokenAmount;\n  startTime?: BigNumberish;\n  config?: {\n    bypassAssociatedCheck?: boolean;\n  };\n}\n\nexport type LiquidityInitPoolInstructionParams = {\n  poolKeys: LiquidityAssociatedPoolKeysV4;\n  userKeys: {\n    lpTokenAccount: PublicKey;\n    payer: PublicKey;\n  };\n  startTime: BigNumberish;\n};\n\n/**\n * Add liquidity transaction params\n */\nexport interface LiquidityAddTransactionParams {\n  poolId: PublicKeyish;\n  payer?: PublicKey;\n  amountInA: TokenAmount;\n  amountInB: TokenAmount;\n  fixedSide: LiquiditySide;\n  config?: {\n    bypassAssociatedCheck?: boolean;\n  };\n}\n\n/* ================= user keys ================= */\n/**\n * Full user keys that build transaction need\n */\nexport interface LiquidityUserKeys {\n  baseTokenAccount: PublicKey;\n  quoteTokenAccount: PublicKey;\n  lpTokenAccount: PublicKey;\n  owner: PublicKey;\n}\n\nexport interface LiquidityAddInstructionParamsV4 {\n  poolKeys: LiquidityPoolKeys;\n  userKeys: LiquidityUserKeys;\n  baseAmountIn: BigNumberish;\n  quoteAmountIn: BigNumberish;\n  fixedSide: AmountSide;\n}\n\n/**\n * Add liquidity instruction params\n */\nexport type LiquidityAddInstructionParams = LiquidityAddInstructionParamsV4;\n\nexport interface LiquidityRemoveInstructionParamsV4 {\n  poolKeys: LiquidityPoolKeys;\n  userKeys: LiquidityUserKeys;\n  amountIn: BigNumberish;\n}\nexport interface LiquidityRemoveTransactionParams {\n  poolId: PublicKeyish;\n  payer?: PublicKey;\n  amountIn: TokenAmount;\n  config?: {\n    bypassAssociatedCheck?: boolean;\n  };\n}\n/**\n * Remove liquidity instruction params\n */\nexport type LiquidityRemoveInstructionParams = LiquidityRemoveInstructionParamsV4;\n\nexport interface LiquidityComputeAnotherAmountParams {\n  poolId: PublicKeyish;\n  amount: TokenAmount;\n  anotherToken: Token;\n  slippage: Percent;\n}\n"],"mappings":"kWAAA","names":[]}