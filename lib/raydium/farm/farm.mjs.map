{"version":3,"sources":["../../../src/raydium/farm/farm.ts","../../../src/common/logger.ts","../../../src/common/utility.ts","../../../src/module/amount.ts","../../../src/common/bignumber.ts","../../../src/module/formatter.ts","../../../src/module/fraction.ts","../../../src/raydium/token/constant.ts","../../../src/module/token.ts","../../../src/common/pubKey.ts","../../../src/module/currency.ts","../../../src/module/percent.ts","../../../src/module/price.ts","../../../src/common/txTool.ts","../../../src/common/lodash.ts","../../../src/common/accountInfo.ts","../../../src/common/fractionUtil.ts","../../../src/common/date.ts","../../../src/raydium/account/instruction.ts","../../../src/marshmallow/index.ts","../../../src/marshmallow/buffer-layout.ts","../../../src/raydium/account/layout.ts","../../../src/raydium/moduleBase.ts","../../../src/raydium/farm/config.ts","../../../src/raydium/farm/layout.ts","../../../src/raydium/farm/instruction.ts","../../../src/raydium/farm/util.ts"],"sourcesContent":["import { TOKEN_PROGRAM_ID, createAssociatedTokenAccountInstruction } from \"@solana/spl-token\";\nimport {\n  AccountMeta,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { accountMeta, AddInstructionParam, commonSystemAccountMeta, TxBuilder } from \"../../common\";\nimport { isDateAfter, isDateBefore, offsetDateTime } from \"../../common/date\";\nimport { getMax, sub, isMeaningfulNumber } from \"../../common/fractionUtil\";\nimport {\n  BigNumberish,\n  toTotalPrice,\n  toPercent,\n  toBN,\n  parseNumberInfo,\n  parseBigNumberish,\n} from \"../../common/bignumber\";\nimport { PublicKeyish, SOLMint, validateAndParsePublicKey } from \"../../common/pubKey\";\nimport { Fraction } from \"../../module/fraction\";\nimport { Token as RToken } from \"../../module/token\";\nimport { TokenAmount } from \"../../module/amount\";\nimport { createWSolAccountInstructions } from \"../account/instruction\";\nimport ModuleBase from \"../moduleBase\";\nimport { TOKEN_WSOL } from \"../token/constant\";\nimport { LoadParams, MakeTransaction } from \"../type\";\n\nimport {\n  FARM_LOCK_MINT,\n  FARM_LOCK_VAULT,\n  farmDespotVersionToInstruction,\n  farmWithdrawVersionToInstruction,\n  isValidFarmVersion,\n  poolTypeV6,\n  validateFarmRewards,\n} from \"./config\";\nimport { createAssociatedLedgerAccountInstruction, makeCreateFarmInstruction } from \"./instruction\";\nimport {\n  dwLayout,\n  farmAddRewardLayout,\n  farmRewardRestartLayout,\n  farmStateV6Layout,\n  withdrawRewardLayout,\n} from \"./layout\";\nimport {\n  CreateFarm,\n  FarmDWParam,\n  FarmPoolJsonInfo,\n  FarmRewardInfo,\n  FarmRewardInfoConfig,\n  RewardInfoKey,\n  SdkParsedFarmInfo,\n  UpdateFarmReward,\n  HydratedFarmInfo,\n} from \"./type\";\nimport {\n  calFarmRewardAmount,\n  farmRewardInfoToConfig,\n  getAssociatedAuthority,\n  getAssociatedLedgerAccount,\n  getAssociatedLedgerPoolAccount,\n  getFarmProgramId,\n  mergeSdkFarmInfo,\n  judgeFarmType,\n  whetherIsStakeFarmPool,\n  calculateFarmPoolAprList,\n} from \"./util\";\n\nexport default class Farm extends ModuleBase {\n  private _farmPools: FarmPoolJsonInfo[] = [];\n  private _hydratedFarmPools: HydratedFarmInfo[] = [];\n  private _hydratedFarmMap: Map<string, HydratedFarmInfo> = new Map();\n  private _sdkParsedFarmPools: SdkParsedFarmInfo[] = [];\n  private _lpTokenInfoMap: Map<string, RToken> = new Map();\n\n  public async load(params?: LoadParams): Promise<void> {\n    await this.scope.liquidity.load(params);\n    await this.scope.fetchFarms(params?.forceUpdate);\n\n    const data = this.scope.apiData.farmPools?.data || {};\n\n    this._farmPools = Object.keys(data || {}).reduce(\n      (acc, cur) =>\n        acc.concat(\n          data[cur].map?.((data: FarmPoolJsonInfo) => {\n            const baseToken = this.scope.token.allTokenMap.get(data.baseMint);\n            const quoteToken = this.scope.token.allTokenMap.get(data.quoteMint);\n            if (baseToken && quoteToken) {\n              this._lpTokenInfoMap.set(\n                data.lpMint,\n                new RToken({\n                  mint: data.lpMint,\n                  decimals: baseToken.decimals,\n                  symbol: `${baseToken.symbol} - ${quoteToken.name}`,\n                  name: `${baseToken.symbol} - ${quoteToken.name} LP`,\n                }),\n              );\n            }\n\n            return { ...data, name: data.symbol, category: cur };\n          }) || [],\n        ),\n      [],\n    );\n    await this.fetchSdkFarmInfo();\n  }\n\n  public async fetchSdkFarmInfo(): Promise<void> {\n    this._sdkParsedFarmPools = await mergeSdkFarmInfo({\n      connection: this.scope.connection,\n      farmPools: this._farmPools,\n      owner: this.scope.owner?.publicKey,\n      config: { commitment: \"confirmed\" },\n    });\n  }\n\n  public async loadHydratedFarmInfo(params?: LoadParams & { skipPrice?: boolean }): Promise<HydratedFarmInfo[]> {\n    const { forceUpdate, skipPrice } = params || {};\n    if (this._hydratedFarmPools.length && !forceUpdate) return this._hydratedFarmPools;\n    await this.scope.farm.load();\n    try {\n      await this.scope.account.fetchWalletTokenAccounts();\n    } catch {\n      //\n    }\n    !skipPrice && (await this.scope.token.fetchTokenPrices());\n    await this.scope.liquidity.loadPairs();\n    const chainTimeOffset = await this.scope.chainTimeOffset();\n    const currentBlockChainDate = offsetDateTime(Date.now() + chainTimeOffset, { minutes: 0 /* force */ });\n    const blockSlotCountForSecond = await this.scope.api.getBlockSlotCountForSecond(this.scope.connection.rpcEndpoint);\n\n    const farmAprs = Object.fromEntries(\n      this.scope.liquidity.allPairs.map((i) => [i.ammId, { apr30d: i.apr30d, apr7d: i.apr7d, apr24h: i.apr24h }]),\n    );\n\n    this._hydratedFarmPools = this._sdkParsedFarmPools.map((farmInfo) => {\n      const info = this.hydrateFarmInfo({\n        farmInfo,\n        blockSlotCountForSecond,\n        farmAprs,\n        currentBlockChainDate, // same as chainTimeOffset\n        chainTimeOffset, // same as currentBlockChainDate\n      });\n      this._hydratedFarmMap.set(farmInfo.id.toBase58(), info);\n      return info;\n    });\n    return this._hydratedFarmPools;\n  }\n\n  get allFarms(): FarmPoolJsonInfo[] {\n    return this._farmPools;\n  }\n  get allParsedFarms(): SdkParsedFarmInfo[] {\n    return this._sdkParsedFarmPools;\n  }\n  get allHydratedFarms(): HydratedFarmInfo[] {\n    return this._hydratedFarmPools;\n  }\n  get allHydratedFarmMap(): Map<string, HydratedFarmInfo> {\n    return this._hydratedFarmMap;\n  }\n\n  public getFarm(farmId: PublicKeyish): FarmPoolJsonInfo {\n    const _farmId = validateAndParsePublicKey({ publicKey: farmId });\n    const farmInfo = this.allFarms.find((farm) => farm.id === _farmId.toBase58());\n    if (!farmInfo) this.logAndCreateError(\"invalid farm id\");\n    return farmInfo!;\n  }\n  public getParsedFarm(farmId: PublicKeyish): SdkParsedFarmInfo {\n    const _farmId = validateAndParsePublicKey({ publicKey: farmId });\n    const farmInfo = this.allParsedFarms.find((farm) => _farmId.equals(farm.id));\n    if (!farmInfo) this.logAndCreateError(\"invalid farm id\");\n    return farmInfo!;\n  }\n  public getLpTokenInfo(lpMint: PublicKeyish): RToken {\n    const pubKey = validateAndParsePublicKey({ publicKey: lpMint });\n    const lpToken = this._lpTokenInfoMap.get(pubKey.toBase58());\n    if (!lpToken) this.logAndCreateError(\"LP Token not found\", pubKey.toBase58());\n    return lpToken!;\n  }\n  public lpDecimalAmount({ mint, amount }: { mint: PublicKeyish; amount: BigNumberish }): BN {\n    const numberDetails = parseNumberInfo(amount);\n    const token = this.getLpTokenInfo(mint);\n    return toBN(\n      new Fraction(numberDetails.numerator, numberDetails.denominator).mul(new BN(10).pow(new BN(token.decimals))),\n    );\n  }\n\n  public hydrateFarmInfo(params: {\n    farmInfo: SdkParsedFarmInfo;\n    blockSlotCountForSecond: number;\n    farmAprs: Record<string, { apr30d: number; apr7d: number; apr24h: number }>; // from api:pairs\n    currentBlockChainDate: Date;\n    chainTimeOffset: number;\n  }): HydratedFarmInfo {\n    const { farmInfo, blockSlotCountForSecond, farmAprs, currentBlockChainDate, chainTimeOffset = 0 } = params;\n    const farmPoolType = judgeFarmType(farmInfo, currentBlockChainDate);\n    const isStakePool = whetherIsStakeFarmPool(farmInfo);\n    const isDualFusionPool = farmPoolType === \"dual fusion pool\";\n    const isNormalFusionPool = farmPoolType === \"normal fusion pool\";\n    const isClosedPool = farmPoolType === \"closed pool\" && !farmInfo.upcoming; // NOTE: I don't know why, but Amanda says there is a bug.\n    const isUpcomingPool = farmInfo.version !== 6 ? farmInfo.upcoming && isClosedPool : farmInfo.upcoming;\n    const isNewPool = farmInfo.version !== 6 && farmInfo.upcoming && !isClosedPool; // NOTE: Rudy says!!!\n    const isStablePool =\n      this.scope.liquidity.allPools.find((i) => i.lpMint === farmInfo.lpMint.toBase58())?.version === 5;\n\n    const lpToken = isStakePool ? this.scope.mintToToken(farmInfo.lpMint) : this.getLpTokenInfo(farmInfo.lpMint);\n    const baseToken = this.scope.mintToToken(isStakePool ? farmInfo.lpMint : farmInfo.baseMint);\n    const quoteToken = this.scope.mintToToken(isStakePool ? farmInfo.lpMint : farmInfo.quoteMint);\n\n    if (!baseToken?.symbol) {\n      // console.log('farmInfo: ', farmInfo.jsonInfo)\n    }\n    const name = isStakePool\n      ? `${baseToken?.symbol ?? \"unknown\"}`\n      : `${baseToken?.symbol ?? \"unknown\"}-${quoteToken?.symbol ?? \"unknown\"}`;\n\n    const rewardTokens = farmInfo.jsonInfo.rewardInfos.map(({ rewardMint: mint }) => this.scope.mintToToken(mint));\n    const pendingRewards = farmInfo.wrapped?.pendingRewards.map((reward, idx) =>\n      rewardTokens[idx] ? new TokenAmount(rewardTokens[idx]!, toBN(getMax(reward, 0))) : undefined,\n    );\n\n    const lpPrice = isStakePool\n      ? this.scope.token.tokenPrices.get(farmInfo.lpMint.toBase58())!\n      : this.scope.liquidity.lpPriceMap.get(farmInfo.lpMint.toBase58())!;\n\n    const stakedLpAmount = lpToken && new TokenAmount(lpToken, farmInfo.lpVault.amount);\n    const tvl =\n      lpPrice && lpToken ? toTotalPrice(new TokenAmount(lpToken, farmInfo.lpVault.amount), lpPrice) : undefined;\n\n    const aprs = calculateFarmPoolAprList(farmInfo, {\n      tvl,\n      currentBlockChainDate,\n      rewardTokens,\n      rewardTokenPrices:\n        farmInfo.rewardInfos.map(({ rewardMint }) => this.scope.token.tokenPrices.get(rewardMint.toBase58())) ?? [],\n      blockSlotCountForSecond,\n    });\n\n    const ammId = this.scope.liquidity.allPools.find((pool) => pool.lpMint === farmInfo.lpMint.toBase58())?.id;\n    const raydiumFeeApr7d = ammId ? toPercent(farmAprs[ammId]?.apr7d, { alreadyDecimaled: true }) : undefined;\n    const raydiumFeeApr30d = ammId ? toPercent(farmAprs[ammId]?.apr30d, { alreadyDecimaled: true }) : undefined;\n    const raydiumFeeApr24h = ammId ? toPercent(farmAprs[ammId]?.apr24h, { alreadyDecimaled: true }) : undefined;\n    const totalApr7d = aprs.reduce((acc, cur) => (acc ? (cur ? acc.add(cur) : acc) : cur), raydiumFeeApr7d);\n    const totalApr30d = aprs.reduce((acc, cur) => (acc ? (cur ? acc.add(cur) : acc) : cur), raydiumFeeApr30d);\n    const totalApr24h = aprs.reduce((acc, cur) => (acc ? (cur ? acc.add(cur) : acc) : cur), raydiumFeeApr24h);\n\n    const rewards =\n      farmInfo.version === 6\n        ? (farmInfo.state.rewardInfos\n            .map((rewardInfo, idx) => {\n              const { rewardOpenTime: openTime, rewardEndTime: endTime, rewardPerSecond } = rewardInfo;\n              const rewardOpenTime = openTime.toNumber()\n                ? new Date(openTime.toNumber() * 1000 + chainTimeOffset)\n                : undefined; // chain time\n              const rewardEndTime = endTime.toNumber()\n                ? new Date(endTime.toNumber() * 1000 + chainTimeOffset)\n                : undefined; // chain time\n              const onlineCurrentDate = Date.now() + chainTimeOffset;\n              if (!rewardOpenTime && !rewardEndTime) return undefined; // if reward is not any state, return undefined to delete it\n              const token = this.scope.mintToToken(\n                (rewardInfo.rewardMint ?? farmInfo.rewardInfos[idx]?.rewardMint)?.toBase58(),\n              );\n              const isRewardBeforeStart = Boolean(rewardOpenTime && isDateBefore(onlineCurrentDate, rewardOpenTime));\n              const isRewardEnded = Boolean(rewardEndTime && isDateAfter(onlineCurrentDate, rewardEndTime));\n              const isRewarding = (!rewardOpenTime && !rewardEndTime) || (!isRewardEnded && !isRewardBeforeStart);\n              const isRwardingBeforeEnd72h =\n                isRewarding &&\n                isDateAfter(\n                  onlineCurrentDate,\n                  offsetDateTime(rewardEndTime, { seconds: -(farmInfo.jsonInfo.rewardPeriodExtend ?? 72 * 60 * 60) }),\n                );\n              const claimableRewards =\n                token &&\n                this.scope.mintToTokenAmount({\n                  mint: token.mint,\n                  amount: sub(rewardInfo.totalReward, rewardInfo.totalRewardEmissioned)!.toFixed(token.decimals),\n                });\n\n              const pendingReward = pendingRewards?.[idx];\n              const apr = aprs[idx];\n              const usedTohaveReward = Boolean(rewardEndTime);\n              const jsonRewardInfo = farmInfo.rewardInfos[idx];\n\n              return {\n                ...jsonRewardInfo,\n                ...rewardInfo,\n                owner: jsonRewardInfo?.rewardSender,\n                apr,\n                token,\n                userPendingReward: pendingReward,\n                userHavedReward: usedTohaveReward,\n                perSecond:\n                  token && this.scope.mintToTokenAmount({ mint: token.mint, amount: rewardPerSecond }).toSignificant(),\n                openTime: rewardOpenTime,\n                endTime: rewardEndTime,\n                isOptionToken: rewardInfo.rewardType === \"Option tokens\",\n                isRewardBeforeStart,\n                isRewardEnded,\n                isRewarding,\n                isRwardingBeforeEnd72h,\n                claimableRewards,\n                version: 6,\n              };\n            })\n            .filter((data) => !!data) as HydratedFarmInfo[\"rewards\"])\n        : farmInfo.state.rewardInfos.map((rewardInfo, idx) => {\n            const pendingReward = pendingRewards?.[idx];\n            const apr = aprs[idx];\n            const token = rewardTokens[idx];\n            const { perSlotReward } = rewardInfo;\n\n            const usedTohaveReward = isMeaningfulNumber(pendingReward) || isMeaningfulNumber(perSlotReward);\n            return {\n              ...rewardInfo,\n              apr,\n              token,\n              userPendingReward: pendingReward,\n              userHavedReward: usedTohaveReward,\n              version: farmInfo.version,\n            };\n          });\n    const userStakedLpAmount =\n      lpToken && farmInfo.ledger?.deposited ? new TokenAmount(lpToken, farmInfo.ledger?.deposited) : undefined;\n\n    return {\n      ...farmInfo,\n      lp: lpToken,\n      lpPrice,\n      base: baseToken,\n      quote: quoteToken,\n      name,\n      isStakePool,\n      isDualFusionPool,\n      isNormalFusionPool,\n      isClosedPool,\n      isUpcomingPool,\n      isStablePool,\n      isNewPool,\n      totalApr7d,\n      raydiumFeeApr7d,\n      totalApr24h,\n      raydiumFeeApr24h,\n      totalApr30d,\n      raydiumFeeApr30d,\n      ammId,\n      tvl,\n      userHasStaked: isMeaningfulNumber(userStakedLpAmount),\n      rewards,\n      userStakedLpAmount,\n      stakedLpAmount,\n    };\n  }\n\n  // token account needed\n  private async _getUserRewardInfo({ payer, rewardInfo }: { payer: PublicKey; rewardInfo: FarmRewardInfo }): Promise<{\n    rewardPubKey?: PublicKey;\n    newInstruction?: AddInstructionParam;\n  }> {\n    if (rewardInfo.rewardMint.equals(SOLMint)) {\n      const txInstructions = await createWSolAccountInstructions({\n        connection: this.scope.connection,\n        owner: this.scope.ownerPubKey,\n        payer,\n        amount: calFarmRewardAmount(rewardInfo),\n      });\n      return {\n        rewardPubKey: txInstructions.signers![0].publicKey,\n        newInstruction: txInstructions,\n      };\n    }\n\n    return {\n      rewardPubKey: await this.scope.account.getCreatedTokenAccount({\n        mint: rewardInfo.rewardMint,\n      })!,\n    };\n  }\n\n  // token account needed\n  public async create({ poolId, rewardInfos, payer }: CreateFarm): Promise<MakeTransaction> {\n    this.checkDisabled();\n    this.scope.checkOwner();\n\n    const poolPubkey = validateAndParsePublicKey({ publicKey: poolId });\n    const poolJsonInfo = this.scope.liquidity.allPools.find((j) => j.id === poolPubkey.toBase58());\n    if (!poolJsonInfo) this.logAndCreateError(\"invalid pool id\");\n\n    const lpMint = new PublicKey(poolJsonInfo!.lpMint);\n    const poolInfo = {\n      lpMint,\n      lockInfo: { lockMint: FARM_LOCK_MINT, lockVault: FARM_LOCK_VAULT },\n      version: 6,\n      rewardInfos,\n      programId: getFarmProgramId(6)!,\n    };\n\n    const txBuilder = this.createTxBuilder();\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\n    const farmKeyPair = Keypair.generate();\n    const lamports = await this.scope.connection.getMinimumBalanceForRentExemption(farmStateV6Layout.span);\n\n    txBuilder.addInstruction({\n      instructions: [\n        SystemProgram.createAccount({\n          fromPubkey: payerPubKey,\n          newAccountPubkey: farmKeyPair.publicKey,\n          lamports,\n          space: farmStateV6Layout.span,\n          programId: poolInfo.programId,\n        }),\n      ],\n      signers: [farmKeyPair],\n    });\n\n    const { publicKey: authority, nonce } = await getAssociatedAuthority({\n      programId: poolInfo.programId,\n      poolId: farmKeyPair.publicKey,\n    });\n\n    const lpVault = await getAssociatedLedgerPoolAccount({\n      programId: poolInfo.programId,\n      poolId: farmKeyPair.publicKey,\n      mint: poolInfo.lpMint,\n      type: \"lpVault\",\n    });\n\n    const rewardInfoConfig: FarmRewardInfoConfig[] = [];\n    const rewardInfoKey: RewardInfoKey[] = [];\n\n    for (const rewardInfo of poolInfo.rewardInfos) {\n      if (rewardInfo.rewardOpenTime >= rewardInfo.rewardEndTime)\n        this.logAndCreateError(\"start time error\", \"rewardInfo.rewardOpenTime\", rewardInfo.rewardOpenTime.toString());\n      if (!poolTypeV6[rewardInfo.rewardType]) this.logAndCreateError(\"rewardType error\", rewardInfo.rewardType);\n      if (rewardInfo.rewardPerSecond <= 0)\n        this.logAndCreateError(\"rewardPerSecond error\", rewardInfo.rewardPerSecond.toString());\n\n      rewardInfoConfig.push(farmRewardInfoToConfig(rewardInfo));\n\n      const { rewardPubKey, newInstruction } = await this._getUserRewardInfo({\n        rewardInfo,\n        payer: payerPubKey,\n      });\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\n\n      if (!rewardPubKey) this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\n\n      const rewardMint = rewardInfo.rewardMint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.mint) : rewardInfo.rewardMint;\n      rewardInfoKey.push({\n        rewardMint,\n        rewardVault: await getAssociatedLedgerPoolAccount({\n          programId: poolInfo.programId,\n          poolId: farmKeyPair.publicKey,\n          mint: rewardMint,\n          type: \"rewardVault\",\n        }),\n        userRewardToken: rewardPubKey!,\n      });\n    }\n\n    const lockUserAccount = await this.scope.account.getCreatedTokenAccount({\n      mint: poolInfo.lockInfo.lockMint,\n    });\n\n    if (!lockUserAccount)\n      this.logAndCreateError(\"cannot found lock vault\", \"tokenAccounts\", this.scope.account.tokenAccounts);\n\n    const createInstruction = makeCreateFarmInstruction({\n      farmKeyPair,\n      owner: this.scope.ownerPubKey,\n      farmAuthority: authority,\n      lpVault,\n      lpMint: poolInfo.lpMint,\n      lockVault: poolInfo.lockInfo.lockVault,\n      lockMint: poolInfo.lockInfo.lockMint,\n      lockUserAccount,\n      programId: poolInfo.programId,\n      rewardInfo: rewardInfoKey,\n      rewardInfoConfig,\n      nonce,\n    });\n\n    return await txBuilder\n      .addInstruction({\n        instructions: [createInstruction],\n      })\n      .build();\n  }\n\n  // token account needed\n  public async restartReward({ farmId, payer, newRewardInfo }: UpdateFarmReward): Promise<MakeTransaction> {\n    const farmInfo = this.getFarm(farmId)!;\n    if (farmInfo!.version !== 6) this.logAndCreateError(\"invalid farm version\", farmInfo!.version);\n\n    const poolKeys = {\n      id: new PublicKey(farmInfo.id),\n      rewardInfos: farmInfo.rewardInfos,\n      lpVault: new PublicKey(farmInfo.lpVault),\n      programId: new PublicKey(farmInfo.programId),\n    };\n\n    if (newRewardInfo.rewardOpenTime >= newRewardInfo.rewardEndTime)\n      this.logAndCreateError(\"start time error\", \"newRewardInfo\", newRewardInfo);\n\n    const payerPubKey = payer || this.scope.ownerPubKey;\n\n    const rewardMint = newRewardInfo.rewardMint.equals(SOLMint)\n      ? new PublicKey(TOKEN_WSOL.mint)\n      : newRewardInfo.rewardMint;\n    const rewardInfo = poolKeys.rewardInfos.find((item) => new PublicKey(item.rewardMint).equals(rewardMint));\n\n    if (!rewardInfo) this.logAndCreateError(\"configuration does not exist\", \"rewardMint\", rewardMint);\n\n    const rewardVault = rewardInfo!.rewardVault ? new PublicKey(rewardInfo!.rewardVault) : SOLMint;\n    const txBuilder = this.createTxBuilder();\n\n    const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\n      rewardInfo: newRewardInfo,\n      payer: payerPubKey,\n    });\n    if (newInstruction) txBuilder.addInstruction(newInstruction);\n\n    if (!userRewardTokenPub)\n      this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\n\n    const data = Buffer.alloc(farmRewardRestartLayout.span);\n    farmRewardRestartLayout.encode(\n      {\n        instruction: 3,\n        rewardReopenTime: parseBigNumberish(newRewardInfo.rewardOpenTime),\n        rewardEndTime: parseBigNumberish(newRewardInfo.rewardEndTime),\n        rewardPerSecond: parseBigNumberish(newRewardInfo.rewardPerSecond),\n      },\n      data,\n    );\n\n    const keys = [\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n      accountMeta({ pubkey: poolKeys.id }),\n      accountMeta({ pubkey: poolKeys.lpVault, isWritable: false }),\n      accountMeta({ pubkey: rewardVault }),\n      accountMeta({ pubkey: userRewardTokenPub! }),\n      accountMeta({ pubkey: this.scope.ownerPubKey, isWritable: false, isSigner: true }),\n    ];\n\n    return await txBuilder\n      .addInstruction({\n        instructions: [new TransactionInstruction({ programId: poolKeys.programId, keys, data })],\n      })\n      .build();\n  }\n\n  // token account needed\n  public async addNewRewardToken(params: UpdateFarmReward): Promise<MakeTransaction> {\n    const { farmId, newRewardInfo, payer } = params;\n    const farmInfo = this.getFarm(farmId)!;\n    if (farmInfo!.version !== 6) this.logAndCreateError(\"invalid farm version\", farmInfo!.version);\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\n    const txBuilder = this.createTxBuilder();\n\n    const rewardVault = await getAssociatedLedgerPoolAccount({\n      programId: new PublicKey(farmInfo.programId),\n      poolId: new PublicKey(farmInfo.id),\n      mint: newRewardInfo.rewardMint,\n      type: \"rewardVault\",\n    });\n\n    const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\n      rewardInfo: newRewardInfo,\n      payer: payerPubKey,\n    });\n    if (newInstruction) txBuilder.addInstruction(newInstruction);\n\n    if (!userRewardTokenPub)\n      this.logAndCreateError(\"annot found target token accounts\", this.scope.account.tokenAccounts);\n\n    const rewardMint = newRewardInfo.rewardMint.equals(SOLMint)\n      ? new PublicKey(TOKEN_WSOL.mint)\n      : newRewardInfo.rewardMint;\n    const data = Buffer.alloc(farmAddRewardLayout.span);\n    farmAddRewardLayout.encode(\n      {\n        instruction: 4,\n        isSet: new BN(1),\n        rewardPerSecond: parseBigNumberish(newRewardInfo.rewardPerSecond),\n        rewardOpenTime: parseBigNumberish(newRewardInfo.rewardOpenTime),\n        rewardEndTime: parseBigNumberish(newRewardInfo.rewardEndTime),\n      },\n      data,\n    );\n\n    const keys = [\n      ...commonSystemAccountMeta,\n      accountMeta({ pubkey: new PublicKey(farmInfo.id) }),\n      accountMeta({ pubkey: new PublicKey(farmInfo.authority), isWritable: false }),\n      accountMeta({ pubkey: rewardMint, isWritable: false }),\n      accountMeta({ pubkey: rewardVault }),\n      accountMeta({ pubkey: userRewardTokenPub! }),\n      accountMeta({ pubkey: this.scope.ownerPubKey, isWritable: false, isSigner: true }),\n    ];\n\n    return await txBuilder\n      .addInstruction({\n        instructions: [new TransactionInstruction({ programId: new PublicKey(farmInfo.programId), keys, data })],\n      })\n      .build();\n  }\n\n  private async _prepareFarmAccounts(params: { mint: PublicKey; farmInfo: SdkParsedFarmInfo }): Promise<{\n    txBuilder: TxBuilder;\n    lpTokenAccount: PublicKey;\n    ledgerAddress: PublicKey;\n    rewardTokenAccountsPublicKeys: PublicKey[];\n    lowVersionKeys: AccountMeta[];\n  }> {\n    const txBuilder = this.createTxBuilder();\n    const { farmInfo } = params;\n\n    const { pubKey: lpTokenAccount, newInstructions } = await this.scope.account.checkOrCreateAta({\n      mint: farmInfo.lpMint,\n    });\n    txBuilder.addInstruction(newInstructions);\n\n    const rewardTokenAccountsPublicKeys = await Promise.all(\n      farmInfo.rewardInfos.map(async ({ rewardMint }) => {\n        const { pubKey, newInstructions } = await this.scope.account.checkOrCreateAta({\n          mint: rewardMint,\n          autoUnwrapWSOLToSOL: true,\n        });\n        txBuilder.addInstruction(newInstructions);\n        return pubKey;\n      }),\n    );\n\n    const ledgerAddress = await getAssociatedLedgerAccount({\n      programId: new PublicKey(farmInfo.programId),\n      poolId: new PublicKey(farmInfo.id),\n      owner: this.scope.ownerPubKey,\n    });\n\n    if (!farmInfo.ledger && farmInfo.version < 6 /* start from v6, no need init ledger any more */) {\n      const instruction = await createAssociatedLedgerAccountInstruction({\n        id: farmInfo.id,\n        programId: farmInfo.programId,\n        version: farmInfo.version,\n        ledger: ledgerAddress,\n        owner: this.scope.ownerPubKey,\n      });\n      txBuilder.addInstruction({ instructions: [instruction] });\n    }\n\n    const lowVersionKeys = [\n      accountMeta({ pubkey: farmInfo.id }),\n      accountMeta({ pubkey: farmInfo.authority, isWritable: false }),\n      accountMeta({ pubkey: ledgerAddress }),\n      accountMeta({ pubkey: this.scope.ownerPubKey, isWritable: false, isSigner: true }),\n      accountMeta({ pubkey: lpTokenAccount }),\n      accountMeta({ pubkey: new PublicKey(farmInfo.jsonInfo.lpVault) }),\n      accountMeta({ pubkey: rewardTokenAccountsPublicKeys[0] }),\n      accountMeta({ pubkey: farmInfo.rewardInfos[0].rewardVault }),\n      accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    ];\n\n    return { txBuilder, lpTokenAccount, rewardTokenAccountsPublicKeys, ledgerAddress, lowVersionKeys };\n  }\n\n  public async deposit(params: FarmDWParam): Promise<MakeTransaction> {\n    this.scope.checkOwner();\n    const { farmId, amount } = params;\n    const farmInfo = this.getParsedFarm(farmId)!;\n    const mint = farmInfo.lpMint;\n    const { version, rewardInfos } = farmInfo;\n    if (!isValidFarmVersion(version)) this.logAndCreateError(\"invalid farm version:\", version);\n\n    const { txBuilder, ledgerAddress, lpTokenAccount, lowVersionKeys, rewardTokenAccountsPublicKeys } =\n      await this._prepareFarmAccounts({ mint, farmInfo });\n\n    const errorMsg = validateFarmRewards({\n      version,\n      rewardInfos,\n      rewardTokenAccountsPublicKeys,\n    });\n    if (errorMsg) this.logAndCreateError(errorMsg);\n\n    const data = Buffer.alloc(dwLayout.span);\n    dwLayout.encode(\n      {\n        instruction: farmDespotVersionToInstruction(version),\n        amount: parseBigNumberish(amount),\n      },\n      data,\n    );\n\n    const keys =\n      version === 6\n        ? [\n            accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n            accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n            accountMeta({ pubkey: farmInfo.id }),\n            accountMeta({ pubkey: farmInfo.authority, isWritable: false }),\n            accountMeta({ pubkey: farmInfo.lpVault.mint }),\n            accountMeta({ pubkey: ledgerAddress }),\n            accountMeta({ pubkey: this.scope.ownerPubKey, isWritable: false, isSigner: true }),\n            accountMeta({ pubkey: lpTokenAccount }),\n          ]\n        : lowVersionKeys;\n\n    if (version !== 3) {\n      for (let index = 1; index < rewardInfos.length; index++) {\n        keys.push(accountMeta({ pubkey: rewardTokenAccountsPublicKeys[index] }));\n        keys.push(accountMeta({ pubkey: rewardInfos[index].rewardVault }));\n      }\n    }\n\n    const newInstruction = new TransactionInstruction({ programId: farmInfo.programId, keys, data });\n\n    return await txBuilder\n      .addInstruction({\n        instructions: [newInstruction],\n      })\n      .build();\n  }\n\n  public async withdraw(params: FarmDWParam): Promise<MakeTransaction> {\n    this.scope.checkOwner();\n    const { farmId, amount } = params;\n    const farmInfo = this.getParsedFarm(farmId)!;\n    const mint = farmInfo.lpMint;\n    const { version, rewardInfos } = farmInfo;\n    if (!isValidFarmVersion(version)) this.logAndCreateError(\"invalid farm version:\", version);\n    const { txBuilder, ledgerAddress, lpTokenAccount, lowVersionKeys, rewardTokenAccountsPublicKeys } =\n      await this._prepareFarmAccounts({ mint, farmInfo });\n\n    const data = Buffer.alloc(dwLayout.span);\n    dwLayout.encode(\n      {\n        instruction: farmWithdrawVersionToInstruction(version),\n        amount: parseBigNumberish(amount),\n      },\n      data,\n    );\n\n    const keys =\n      version === 6\n        ? [\n            accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n            accountMeta({ pubkey: farmInfo.id }),\n            accountMeta({ pubkey: farmInfo.authority, isWritable: false }),\n            accountMeta({ pubkey: farmInfo.lpVault.mint }),\n            accountMeta({ pubkey: ledgerAddress }),\n            accountMeta({ pubkey: this.scope.ownerPubKey, isWritable: false, isSigner: true }),\n            accountMeta({ pubkey: lpTokenAccount }),\n          ]\n        : lowVersionKeys;\n\n    if (version !== 3) {\n      for (let index = 1; index < rewardInfos.length; index++) {\n        keys.push(accountMeta({ pubkey: rewardTokenAccountsPublicKeys[index] }));\n        keys.push(accountMeta({ pubkey: rewardInfos[index].rewardVault }));\n      }\n    }\n    const newInstruction = new TransactionInstruction({ programId: farmInfo.programId, keys, data });\n    return await txBuilder\n      .addInstruction({\n        instructions: [newInstruction],\n      })\n      .build();\n  }\n\n  // token account needed\n  public async withdrawFarmReward({\n    farmId,\n    withdrawMint,\n  }: {\n    farmId: PublicKey;\n    withdrawMint: PublicKey;\n    payer?: PublicKey;\n  }): Promise<MakeTransaction> {\n    this.scope.checkOwner();\n    const farmInfo = this.getParsedFarm(farmId);\n    const { version } = farmInfo;\n    if (version !== 6) this.logAndCreateError(\"invalid farm version\", farmInfo!.version);\n\n    const rewardInfo = farmInfo.rewardInfos.find((item) =>\n      item.rewardMint.equals(withdrawMint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.mint) : withdrawMint),\n    );\n    if (!rewardInfo) this.logAndCreateError(\"withdraw mint error\", \"rewardInfos\", farmInfo);\n\n    const rewardVault = rewardInfo?.rewardVault ?? SOLMint;\n    const txBuilder = this.createTxBuilder();\n\n    let userRewardToken: PublicKey;\n    this._getUserRewardInfo({\n      payer: this.scope.ownerPubKey,\n      rewardInfo: rewardInfo!,\n    });\n\n    if (withdrawMint.equals(SOLMint)) {\n      const txInstruction = await createWSolAccountInstructions({\n        connection: this.scope.connection,\n        owner: this.scope.ownerPubKey,\n        payer: this.scope.ownerPubKey,\n        amount: calFarmRewardAmount(rewardInfo!),\n      });\n      userRewardToken = txInstruction.signers![0].publicKey;\n      txBuilder.addInstruction(txInstruction);\n    } else {\n      const selectUserRewardToken = await this.scope.account.getCreatedTokenAccount({\n        mint: withdrawMint,\n      });\n\n      if (selectUserRewardToken === null) {\n        userRewardToken = await this.scope.account.getAssociatedTokenAccount(withdrawMint);\n        txBuilder.addInstruction({\n          instructions: [\n            createAssociatedTokenAccountInstruction(\n              this.scope.ownerPubKey,\n              userRewardToken,\n              this.scope.ownerPubKey,\n              withdrawMint,\n            ),\n          ],\n        });\n      } else {\n        userRewardToken = selectUserRewardToken!;\n      }\n    }\n\n    const data = Buffer.alloc(withdrawRewardLayout.span);\n    withdrawRewardLayout.encode({ instruction: 5 }, data);\n\n    const keys = [\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n      accountMeta({ pubkey: farmInfo.id }),\n      accountMeta({ pubkey: farmInfo.authority, isWritable: false }),\n      accountMeta({ pubkey: farmInfo.lpVault.mint, isWritable: false }),\n      accountMeta({ pubkey: rewardVault }),\n      accountMeta({ pubkey: userRewardToken }),\n      accountMeta({ pubkey: this.scope.ownerPubKey, isWritable: false, isSigner: true }),\n    ];\n\n    return await txBuilder\n      .addInstruction({\n        instructions: [new TransactionInstruction({ programId: farmInfo.programId, keys, data })],\n      })\n      .build();\n  }\n}\n","import { get, set } from \"lodash\";\nimport dayjs from \"dayjs\";\nimport utc from \"dayjs/plugin/utc\";\ndayjs.extend(utc);\n\nexport type ModuleName = \"Common.Api\";\n\nexport enum LogLevel {\n  Error,\n  Warning,\n  Info,\n  Debug,\n}\nexport class Logger {\n  private logLevel: LogLevel;\n  private name: string;\n  constructor(params: { name: string; logLevel?: LogLevel }) {\n    this.logLevel = params.logLevel !== undefined ? params.logLevel : LogLevel.Error;\n    this.name = params.name;\n  }\n\n  set level(logLevel: LogLevel) {\n    this.logLevel = logLevel;\n  }\n  get time(): string {\n    return dayjs().utc().format(\"YYYY/MM/DD HH:mm:ss UTC\");\n  }\n  get moduleName(): string {\n    return this.name;\n  }\n\n  private isLogLevel(level: LogLevel): boolean {\n    return level <= this.logLevel;\n  }\n\n  public error(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Error)) return this;\n    console.error(this.time, this.name, \"sdk logger error\", ...props);\n    return this;\n  }\n\n  public logWithError(...props): Logger {\n    // this.error(...props)\n    const msg = props.map((arg) => (typeof arg === \"object\" ? JSON.stringify(arg) : arg)).join(\", \");\n    throw new Error(msg);\n  }\n\n  public warning(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Warning)) return this;\n    console.warn(this.time, this.name, \"sdk logger warning\", ...props);\n    return this;\n  }\n\n  public info(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Info)) return this;\n    console.info(this.time, this.name, \"sdk logger info\", ...props);\n    return this;\n  }\n\n  public debug(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Debug)) return this;\n    console.debug(this.time, this.name, \"sdk logger debug\", ...props);\n    return this;\n  }\n}\n\nconst moduleLoggers: { [key in ModuleName]?: Logger } = {};\nconst moduleLevels: { [key in ModuleName]?: LogLevel } = {};\n\nexport function createLogger(moduleName: string): Logger {\n  let logger = get(moduleLoggers, moduleName);\n  if (!logger) {\n    // default level is error\n    const logLevel = get(moduleLevels, moduleName);\n\n    logger = new Logger({ name: moduleName, logLevel });\n    set(moduleLoggers, moduleName, logger);\n  }\n\n  return logger;\n}\n\nexport function setLoggerLevel(moduleName: string, level: LogLevel): void {\n  set(moduleLevels, moduleName, level);\n\n  const logger = get(moduleLoggers, moduleName);\n  if (logger) logger.level = level;\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { Fraction, Percent, Price, Token, TokenAmount } from \"../module\";\nimport { ReplaceType } from \"../raydium/type\";\n\nimport { tryParsePublicKey } from \"./pubKey\";\n\nexport async function sleep(ms: number): Promise<void> {\n  new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function getTimestamp(): number {\n  return new Date().getTime();\n}\n\nconst baseInnerObjects = [Token, TokenAmount, PublicKey, Fraction, BN, Price, Percent];\n\nfunction notInnerObject(v: unknown): v is Record<string, any> {\n  return typeof v === \"object\" && v !== null && !baseInnerObjects.some((o) => typeof o === \"object\" && v instanceof o);\n}\n\nexport function jsonInfo2PoolKeys<T>(jsonInfo: T): ReplaceType<T, string, PublicKey> {\n  // @ts-expect-error no need type for inner code\n  return typeof jsonInfo === \"string\"\n    ? tryParsePublicKey(jsonInfo)\n    : Array.isArray(jsonInfo)\n    ? jsonInfo.map((k) => jsonInfo2PoolKeys(k))\n    : notInnerObject(jsonInfo)\n    ? Object.fromEntries(Object.entries(jsonInfo).map(([k, v]) => [k, jsonInfo2PoolKeys(v)]))\n    : jsonInfo;\n}\n","import _Big from \"big.js\";\nimport BN from \"bn.js\";\n\nimport { BigNumberish, BN_TEN, parseBigNumberish, Rounding } from \"../common/bignumber\";\nimport { createLogger, Logger } from \"../common/logger\";\n\nimport toFormat, { WrappedBig } from \"./formatter\";\nimport { Fraction } from \"./fraction\";\nimport { Token } from \"./token\";\n\nconst logger = createLogger(\"Raydium_amount\");\n\nconst Big = toFormat(_Big);\ntype Big = WrappedBig;\n\nexport function splitNumber(num: string, decimals: number): [string, string] {\n  let integral = \"0\";\n  let fractional = \"0\";\n\n  if (num.includes(\".\")) {\n    const splited = num.split(\".\");\n    if (splited.length === 2) {\n      [integral, fractional] = splited;\n      fractional = fractional.padEnd(decimals, \"0\");\n    } else {\n      logger.logWithError(`invalid number string, num: ${num}`);\n    }\n  } else {\n    integral = num;\n  }\n\n  // fix decimals is 0\n  return [integral, fractional.slice(0, decimals) || fractional];\n}\n\nexport class TokenAmount extends Fraction {\n  public readonly token: Token;\n  protected logger: Logger;\n\n  public constructor(token: Token, amount: BigNumberish, isRaw = true, name?: string) {\n    let parsedAmount = new BN(0);\n    const multiplier = BN_TEN.pow(new BN(token.decimals));\n\n    if (isRaw) {\n      parsedAmount = parseBigNumberish(amount);\n    } else {\n      let integralAmount = new BN(0);\n      let fractionalAmount = new BN(0);\n\n      // parse fractional string\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\n        const [integral, fractional] = splitNumber(amount.toString(), token.decimals);\n        integralAmount = parseBigNumberish(integral);\n        fractionalAmount = parseBigNumberish(fractional);\n      }\n\n      integralAmount = integralAmount.mul(multiplier);\n      parsedAmount = integralAmount.add(fractionalAmount);\n    }\n\n    super(parsedAmount, multiplier);\n    this.logger = createLogger(name || \"Amount\");\n    this.token = token;\n  }\n\n  public get raw(): BN {\n    return this.numerator;\n  }\n  public isZero(): boolean {\n    return this.raw.isZero();\n  }\n  public gt(other: TokenAmount): boolean {\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"gt token not equals\");\n    return this.raw.gt(other.raw);\n  }\n\n  /**\n   * a less than b\n   */\n  public lt(other: TokenAmount): boolean {\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"lt token not equals\");\n    return this.raw.lt(other.raw);\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"add token not equals\");\n    return new TokenAmount(this.token, this.raw.add(other.raw));\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"sub token not equals\");\n    return new TokenAmount(this.token, this.raw.sub(other.raw));\n  }\n\n  public toSignificant(\n    significantDigits = this.token.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding);\n  }\n\n  /**\n   * To fixed\n   *\n   * @example\n   * ```\n   * 1 -> 1.000000000\n   * 1.234 -> 1.234000000\n   * 1.123456789876543 -> 1.123456789\n   * ```\n   */\n  public toFixed(\n    decimalPlaces = this.token.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    if (decimalPlaces > this.token.decimals) this.logger.logWithError(\"decimals overflow\");\n    return super.toFixed(decimalPlaces, format, rounding);\n  }\n\n  /**\n   * To exact\n   *\n   * @example\n   * ```\n   * 1 -> 1\n   * 1.234 -> 1.234\n   * 1.123456789876543 -> 1.123456789\n   * ```\n   */\n  public toExact(format: object = { groupSeparator: \"\" }): string {\n    Big.DP = this.token.decimals;\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  }\n}\n\n// export class TokenAmount extends CurrencyAmount {\n//   public readonly token: Token;\n\n//   public constructor(token: Token, amount: BigNumberish, isRaw = true) {\n//     super(token, amount, isRaw);\n//     this.token = token;\n//   }\n\n//   public add(other: TokenAmount): TokenAmount {\n//     if (!currencyEquals(this.token, other.token)) this.logger.logWithError(\"add token not equals\");\n//     return new TokenAmount(this.token, this.raw.add(other.raw));\n//   }\n\n//   public subtract(other: TokenAmount): TokenAmount {\n//     if (!currencyEquals(this.token, other.token)) this.logger.logWithError(\"sub token not equals\");\n//     return new TokenAmount(this.token, this.raw.sub(other.raw));\n//   }\n// }\n","import BN from \"bn.js\";\n\nimport { Fraction, Percent, Price, TokenAmount, Token } from \"../module\";\nimport { SplToken, TokenJson } from \"../raydium/token/type\";\nimport { createLogger } from \"./logger\";\n\nconst logger = createLogger(\"Raydium_bignumber\");\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const BN_ZERO = new BN(0);\nexport const BN_ONE = new BN(1);\nexport const BN_TWO = new BN(2);\nexport const BN_THREE = new BN(3);\nexport const BN_FIVE = new BN(5);\nexport const BN_TEN = new BN(10);\nexport const BN_100 = new BN(100);\nexport const BN_1000 = new BN(1000);\nexport const BN_10000 = new BN(10000);\nexport type BigNumberish = BN | string | number | bigint;\nexport type Numberish = number | string | bigint | Fraction | BN;\n\nconst MAX_SAFE = 0x1fffffffffffff;\n\nexport function parseBigNumberish(value: BigNumberish): BN {\n  // BN\n  if (value instanceof BN) {\n    return value;\n  }\n\n  if (typeof value === \"string\") {\n    if (value.match(/^-?[0-9]+$/)) {\n      return new BN(value);\n    }\n    logger.logWithError(`invalid BigNumberish string: ${value}`);\n  }\n\n  if (typeof value === \"number\") {\n    if (value % 1) {\n      logger.logWithError(`BigNumberish number underflow: ${value}`);\n    }\n\n    if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n      logger.logWithError(`BigNumberish number overflow: ${value}`);\n    }\n\n    return new BN(String(value));\n  }\n\n  if (typeof value === \"bigint\") {\n    return new BN(value.toString());\n  }\n  logger.logWithError(`invalid BigNumberish value: ${value}`);\n  return new BN(0); // never reach, because logWithError will throw error\n}\n\nexport function tenExponential(shift: BigNumberish): BN {\n  return BN_TEN.pow(parseBigNumberish(shift));\n}\n\n/**\n *\n * @example\n * getIntInfo(0.34) //=> { numerator: '34', denominator: '100'}\n * getIntInfo('0.34') //=> { numerator: '34', denominator: '100'}\n */\nexport function parseNumberInfo(n: Numberish | undefined): {\n  denominator: string;\n  numerator: string;\n  sign?: string;\n  int?: string;\n  dec?: string;\n} {\n  if (n === undefined) return { denominator: \"1\", numerator: \"0\" };\n  if (n instanceof BN) {\n    return { numerator: n.toString(), denominator: \"1\" };\n  }\n\n  if (n instanceof Fraction) {\n    return { denominator: n.denominator.toString(), numerator: n.numerator.toString() };\n  }\n\n  const s = String(n);\n  const [, sign = \"\", int = \"\", dec = \"\"] = s.replace(\",\", \"\").match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\n  const denominator = \"1\" + \"0\".repeat(dec.length);\n  const numerator = sign + (int === \"0\" ? \"\" : int) + dec || \"0\";\n  return { denominator, numerator, sign, int, dec };\n}\n\n// round up\nexport function divCeil(a: BN, b: BN): BN {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const dm = a.divmod(b);\n\n  // Fast case - exact division\n  if (dm.mod.isZero()) return dm.div;\n\n  // Round up\n  return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n}\n\nexport function shakeFractionDecimal(n: Fraction): string {\n  const [, sign = \"\", int = \"\"] = n.toFixed(2).match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\n  return `${sign}${int}`;\n}\n\nexport function toBN(n: Numberish, decimal: BigNumberish = 0): BN {\n  if (n instanceof BN) return n;\n  return new BN(shakeFractionDecimal(toFraction(n).mul(BN_TEN.pow(new BN(String(decimal))))));\n}\n\nexport function toFraction(value: Numberish): Fraction {\n  //  to complete math format(may have decimal), not int\n  if (value instanceof Percent) return new Fraction(value.numerator, value.denominator);\n\n  if (value instanceof Price) return value.adjusted;\n\n  // to complete math format(may have decimal), not BN\n  if (value instanceof TokenAmount)\n    try {\n      return toFraction(value.toExact());\n    } catch {\n      return new Fraction(BN_ZERO);\n    }\n\n  // do not ideal with other fraction value\n  if (value instanceof Fraction) return value;\n\n  // wrap to Fraction\n  const n = String(value);\n  const details = parseNumberInfo(n);\n  return new Fraction(details.numerator, details.denominator);\n}\n\n/**\n * @example\n * toPercent(3.14) // => Percent { 314.00% }\n * toPercent(3.14, { alreadyDecimaled: true }) // => Percent {3.14%}\n */\nexport function toPercent(\n  n: Numberish,\n  options?: { /* usually used for backend data */ alreadyDecimaled?: boolean },\n): Percent {\n  const { numerator, denominator } = parseNumberInfo(n);\n  return new Percent(new BN(numerator), new BN(denominator).mul(options?.alreadyDecimaled ? new BN(100) : new BN(1)));\n}\n\nexport function toTokenPrice(params: {\n  token: TokenJson | Token | SplToken;\n  numberPrice: Numberish;\n  decimalDone?: boolean;\n}): Price {\n  const { token, numberPrice, decimalDone } = params;\n  const usdCurrency = new Token({ mint: \"\", decimals: 6, symbol: \"usd\", name: \"usd\", skipMint: true });\n  const { numerator, denominator } = parseNumberInfo(numberPrice);\n  const parsedNumerator = decimalDone ? new BN(numerator).mul(BN_TEN.pow(new BN(token.decimals))) : numerator;\n  const parsedDenominator = new BN(denominator).mul(BN_TEN.pow(new BN(usdCurrency.decimals)));\n\n  return new Price({\n    baseToken: usdCurrency,\n    denominator: parsedDenominator.toString(),\n    quoteToken: new Token({ ...token, skipMint: true, mint: \"\" }),\n    numerator: parsedNumerator.toString(),\n  });\n}\n\nexport function mul(a: Numberish | undefined, b: Numberish | undefined): Fraction | undefined {\n  if (a == null || b == null) return undefined;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.mul(fb);\n}\n\nexport function toUsdCurrency(amount: Numberish): TokenAmount {\n  const usdCurrency = new Token({ mint: \"\", decimals: 6, symbol: \"usd\", name: \"usd\", skipMint: true });\n  const amountBigNumber = toBN(mul(amount, 10 ** usdCurrency.decimals)!);\n  return new TokenAmount(usdCurrency, amountBigNumber);\n}\n\nexport function toTotalPrice(amount: Numberish | undefined, price: Price | undefined): TokenAmount {\n  if (!price || !amount) return toUsdCurrency(0);\n  return toUsdCurrency(mul(amount, price)!);\n}\n","import Big, { BigConstructor, BigSource, RoundingMode } from \"big.js\";\nimport Decimal, { Config, Numeric } from \"decimal.js-light\";\nimport _toFarmat from \"toformat\";\n\ntype TakeStatic<T> = { [P in keyof T]: T[P] };\ninterface FormatOptions {\n  decimalSeparator?: string;\n  groupSeparator?: string;\n  groupSize?: number;\n  fractionGroupSeparator?: string;\n  fractionGroupSize?: number;\n}\ninterface WrappedBigConstructor extends TakeStatic<BigConstructor> {\n  new (value: BigSource): WrappedBig;\n  (value: BigSource): WrappedBig;\n  (): WrappedBigConstructor;\n\n  format: FormatOptions;\n}\nexport interface WrappedBig extends Big {\n  add(n: BigSource): WrappedBig;\n  abs(): WrappedBig;\n  div(n: BigSource): WrappedBig;\n  minus(n: BigSource): WrappedBig;\n  mod(n: BigSource): WrappedBig;\n  mul(n: BigSource): WrappedBig;\n  plus(n: BigSource): WrappedBig;\n  pow(exp: number): WrappedBig;\n  round(dp?: number, rm?: RoundingMode): WrappedBig;\n  sqrt(): WrappedBig;\n  sub(n: BigSource): WrappedBig;\n  times(n: BigSource): WrappedBig;\n  toFormat(): string;\n  toFormat(options: FormatOptions): string;\n  toFormat(fractionLength: number): string;\n  toFormat(fractionLength: number, options: FormatOptions): string;\n  toFormat(fractionLength: number, missionUnknown: number): string;\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\n}\n\ntype DecimalConstructor = typeof Decimal;\ninterface WrappedDecimalConstructor extends TakeStatic<DecimalConstructor> {\n  new (value: Numeric): WrappedDecimal;\n  clone(config?: Config): WrappedDecimalConstructor;\n  config(config: Config): WrappedDecimal;\n  set(config: Config): WrappedDecimal;\n  format: FormatOptions;\n}\nexport interface WrappedDecimal extends Decimal {\n  absoluteValue(): WrappedDecimal;\n  abs(): WrappedDecimal;\n  dividedBy(y: Numeric): WrappedDecimal;\n  div(y: Numeric): WrappedDecimal;\n  dividedToIntegerBy(y: Numeric): WrappedDecimal;\n  idiv(y: Numeric): WrappedDecimal;\n  logarithm(base?: Numeric): WrappedDecimal;\n  log(base?: Numeric): WrappedDecimal;\n  minus(y: Numeric): WrappedDecimal;\n  sub(y: Numeric): WrappedDecimal;\n  modulo(y: Numeric): WrappedDecimal;\n  mod(y: Numeric): WrappedDecimal;\n  naturalExponetial(): WrappedDecimal;\n  exp(): WrappedDecimal;\n  naturalLogarithm(): WrappedDecimal;\n  ln(): WrappedDecimal;\n  negated(): WrappedDecimal;\n  neg(): WrappedDecimal;\n  plus(y: Numeric): WrappedDecimal;\n  add(y: Numeric): WrappedDecimal;\n  squareRoot(): WrappedDecimal;\n  sqrt(): WrappedDecimal;\n  times(y: Numeric): WrappedDecimal;\n  mul(y: Numeric): WrappedDecimal;\n  toWrappedDecimalPlaces(dp?: number, rm?: number): WrappedDecimal;\n  todp(dp?: number, rm?: number): WrappedDecimal;\n  toInteger(): WrappedDecimal;\n  toint(): WrappedDecimal;\n  toPower(y: Numeric): WrappedDecimal;\n  pow(y: Numeric): WrappedDecimal;\n  toSignificantDigits(sd?: number, rm?: number): WrappedDecimal;\n  tosd(sd?: number, rm?: number): WrappedDecimal;\n  toFormat(options: FormatOptions): string;\n  toFormat(fractionLength: number): string;\n  toFormat(fractionLength: number, options: FormatOptions): string;\n  toFormat(fractionLength: number, missionUnknown: number): string;\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\n}\n\nconst toFormat: {\n  (fn: BigConstructor): WrappedBigConstructor;\n  (fn: DecimalConstructor): WrappedDecimalConstructor;\n} = _toFarmat;\nexport default toFormat;\n","import _Big from \"big.js\";\nimport BN from \"bn.js\";\nimport _Decimal from \"decimal.js-light\";\n\nimport { BigNumberish, BN_ONE, parseBigNumberish, Rounding } from \"../common/bignumber\";\nimport { createLogger } from \"../common/logger\";\n\nimport toFormat, { WrappedBig } from \"./formatter\";\n\nconst logger = createLogger(\"module/fraction\");\n\nconst Big = toFormat(_Big);\ntype Big = WrappedBig;\n\nconst Decimal = toFormat(_Decimal);\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n};\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: _Big.roundDown,\n  [Rounding.ROUND_HALF_UP]: _Big.roundHalfUp,\n  [Rounding.ROUND_UP]: _Big.roundUp,\n};\n\nexport class Fraction {\n  public readonly numerator: BN;\n  public readonly denominator: BN;\n\n  public constructor(numerator: BigNumberish, denominator: BigNumberish = BN_ONE) {\n    this.numerator = parseBigNumberish(numerator);\n    this.denominator = parseBigNumberish(denominator);\n  }\n\n  public get quotient(): BN {\n    return this.numerator.div(this.denominator);\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator);\n  }\n\n  public add(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    if (this.denominator.eq(otherParsed.denominator)) {\n      return new Fraction(this.numerator.add(otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(\n      this.numerator.mul(otherParsed.denominator).add(otherParsed.numerator.mul(this.denominator)),\n      this.denominator.mul(otherParsed.denominator),\n    );\n  }\n\n  public sub(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    if (this.denominator.eq(otherParsed.denominator)) {\n      return new Fraction(this.numerator.sub(otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(\n      this.numerator.mul(otherParsed.denominator).sub(otherParsed.numerator.mul(this.denominator)),\n      this.denominator.mul(otherParsed.denominator),\n    );\n  }\n\n  public mul(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    return new Fraction(this.numerator.mul(otherParsed.numerator), this.denominator.mul(otherParsed.denominator));\n  }\n\n  public div(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    return new Fraction(this.numerator.mul(otherParsed.denominator), this.denominator.mul(otherParsed.numerator));\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: \"\" },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    if (!Number.isInteger(significantDigits)) logger.logWithError(`${significantDigits} is not an integer.`);\n    if (significantDigits <= 0) logger.logWithError(`${significantDigits} is not positive.`);\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: \"\" },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    if (!Number.isInteger(decimalPlaces)) logger.logWithError(`${decimalPlaces} is not an integer.`);\n    if (decimalPlaces < 0) logger.logWithError(`${decimalPlaces} is negative.`);\n\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding] || 1;\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  }\n\n  public isZero(): boolean {\n    return this.numerator.isZero();\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { NativeTokenInfo, SplTokenInfo } from \"./type\";\n\nexport const TOKEN_SOL: NativeTokenInfo = {\n  symbol: \"SOL\",\n  name: \"Solana\",\n  decimals: 9,\n};\n\nexport const TOKEN_WSOL: SplTokenInfo = {\n  symbol: \"WSOL\",\n  name: \"Wrapped SOL\",\n  mint: \"So11111111111111111111111111111111111111112\",\n  decimals: 9,\n  extensions: {\n    coingeckoId: \"solana\",\n  },\n};\n\nexport const quantumSOLHydratedTokenJsonInfo = {\n  isQuantumSOL: true,\n  isLp: false,\n  official: true,\n  mint: new PublicKey(TOKEN_WSOL.mint),\n  decimals: 9,\n  symbol: \"SOL\",\n  id: \"sol\",\n  name: \"solana\",\n  icon: `https://img.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\n  extensions: {\n    coingeckoId: \"solana\",\n  },\n};\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { PublicKeyish, SOLMint, validateAndParsePublicKey } from \"../common/pubKey\";\nimport { TOKEN_WSOL } from \"../raydium/token/constant\";\n\n/**\n * A token is any fungible financial instrument on Solana, including SOL and all SPL tokens.\n */\nexport interface TokenProps {\n  mint: PublicKeyish;\n  decimals: number;\n  symbol?: string;\n  name?: string;\n  skipMint?: boolean;\n}\n\nexport class Token {\n  public readonly symbol?: string;\n  public readonly name?: string;\n  public readonly decimals: number;\n\n  public readonly mint: PublicKey;\n  public static readonly WSOL: Token = new Token(TOKEN_WSOL);\n\n  /**\n   *\n   * @param mint - pass \"sol\" as mint will auto generate wsol token config\n   */\n  public constructor({ mint, decimals, symbol = \"UNKNOWN\", name = \"UNKNOWN\", skipMint = false }: TokenProps) {\n    if (mint === SOLMint.toBase58() || (mint instanceof PublicKey && SOLMint.equals(mint))) {\n      this.decimals = TOKEN_WSOL.decimals;\n      this.symbol = TOKEN_WSOL.symbol;\n      this.name = TOKEN_WSOL.name;\n      this.mint = new PublicKey(TOKEN_WSOL.mint);\n      return;\n    }\n\n    this.decimals = decimals;\n    this.symbol = symbol;\n    this.name = name;\n    this.mint = skipMint ? PublicKey.default : validateAndParsePublicKey({ publicKey: mint });\n  }\n\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true;\n    }\n    return this.mint.equals(other.mint);\n  }\n}\n","import { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\n\ninterface AccountMetaProps {\n  pubkey: PublicKey;\n  isSigner?: boolean;\n  isWritable?: boolean;\n}\n\nexport function accountMeta({ pubkey, isSigner = false, isWritable = true }: AccountMetaProps): AccountMeta {\n  return {\n    pubkey,\n    isWritable,\n    isSigner,\n  };\n}\n\nexport const commonSystemAccountMeta = [\n  accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n  accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n  accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\n];\n\nexport type PublicKeyish = PublicKey | string;\n\nexport function validateAndParsePublicKey({\n  publicKey,\n  transformSol,\n}: {\n  publicKey: PublicKeyish;\n  transformSol?: boolean;\n}): PublicKey {\n  if (publicKey instanceof PublicKey) {\n    if (transformSol && publicKey.equals(SOLMint)) return WSOLMint;\n    return publicKey;\n  }\n\n  if (transformSol && publicKey === SOLMint.toBase58()) return WSOLMint;\n\n  if (typeof publicKey === \"string\") {\n    try {\n      const key = new PublicKey(publicKey);\n      return key;\n    } catch {\n      throw new Error(\"invalid public key\");\n    }\n  }\n\n  throw new Error(\"invalid public key\");\n}\n\nexport function tryParsePublicKey(v: string): PublicKey | string {\n  try {\n    return new PublicKey(v);\n  } catch (e) {\n    return v;\n  }\n}\n\nexport const RAYMint = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\nexport const PAIMint = new PublicKey(\"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\");\nexport const SRMMint = new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\");\nexport const USDCMint = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\nexport const USDTMint = new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\");\nexport const mSOLMint = new PublicKey(\"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\");\nexport const stSOLMint = new PublicKey(\"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\");\nexport const USDHMint = new PublicKey(\"USDH1SM1ojwWUga67PGrgFWUHibbjqMvuMaDkRJTgkX\");\nexport const NRVMint = new PublicKey(\"NRVwhjBQiUPYtfDT5zRBVJajzFQHaBUNtC7SNVvqRFa\");\nexport const ANAMint = new PublicKey(\"ANAxByE6G2WjFp7A4NqtWYXb3mgruyzZYg3spfxe6Lbo\");\nexport const ETHMint = new PublicKey(\"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\");\nexport const WSOLMint = new PublicKey(\"So11111111111111111111111111111111111111112\");\nexport const SOLMint = PublicKey.default;\n","import { TOKEN_SOL } from \"../raydium/token/constant\";\n\nimport { Token } from \"./token\";\n\ninterface CurrencyProps {\n  decimals: number;\n  symbol?: string;\n  name?: string;\n}\n/**\n * A currency is any fungible financial instrument on Solana, including SOL and all SPL tokens.\n * The only instance of the base class `Currency` is SOL.\n */\nexport class Currency {\n  public readonly symbol?: string;\n  public readonly name?: string;\n  public readonly decimals: number;\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly SOL: Currency = new Currency(TOKEN_SOL);\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.SOL`.\n   * @param decimals - decimals of the currency\n   * @param symbol - symbol of the currency\n   * @param name - name of the currency\n   */\n  public constructor({ decimals, symbol = \"UNKNOWN\", name = \"UNKNOWN\" }: CurrencyProps) {\n    this.decimals = decimals;\n    this.symbol = symbol;\n    this.name = name;\n  }\n\n  public equals(other: Currency): boolean {\n    return this === other;\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB);\n  } else if (currencyA instanceof Token || currencyB instanceof Token) {\n    return false;\n  } else {\n    return currencyA === currencyB;\n  }\n}\n","import { BN_100, Rounding } from \"../common/bignumber\";\n\nimport { Fraction } from \"./fraction\";\n\nexport const _100_PERCENT = new Fraction(BN_100);\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits = 5, format?: object, rounding?: Rounding): string {\n    return this.mul(_100_PERCENT).toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(decimalPlaces = 2, format?: object, rounding?: Rounding): string {\n    return this.mul(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\n  }\n}\n","import { BigNumberish, Rounding, tenExponential } from \"../common/bignumber\";\nimport { createLogger } from \"../common/logger\";\n\nimport { Fraction } from \"./fraction\";\nimport { Token } from \"./token\";\n\nconst logger = createLogger(\"Raydium_price\");\n\ninterface PriceProps {\n  baseToken: Token;\n  denominator: BigNumberish;\n  quoteToken: Token;\n  numerator: BigNumberish;\n}\n\nexport class Price extends Fraction {\n  public readonly baseToken: Token; // input i.e. denominator\n  public readonly quoteToken: Token; // output i.e. numerator\n  // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n  public readonly scalar: Fraction;\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(params: PriceProps) {\n    const { baseToken, quoteToken, numerator, denominator } = params;\n    super(numerator, denominator);\n\n    this.baseToken = baseToken;\n    this.quoteToken = quoteToken;\n    this.scalar = new Fraction(tenExponential(baseToken.decimals), tenExponential(quoteToken.decimals));\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n  public get adjusted(): Fraction {\n    return super.mul(this.scalar);\n  }\n\n  public invert(): Price {\n    return new Price({\n      baseToken: this.quoteToken,\n      quoteToken: this.baseToken,\n      denominator: this.numerator,\n      numerator: this.denominator,\n    });\n  }\n\n  public mul(other: Price): Price {\n    if (this.quoteToken !== other.baseToken) logger.logWithError(\"mul token not equals\");\n\n    const fraction = super.mul(other);\n    return new Price({\n      baseToken: this.baseToken,\n      quoteToken: other.quoteToken,\n      denominator: fraction.denominator,\n      numerator: fraction.numerator,\n    });\n  }\n\n  public toSignificant(significantDigits = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(decimalPlaces = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  }\n}\n","import {\n  Connection,\n  PACKET_DATA_SIZE,\n  PublicKey,\n  RpcResponseAndContext,\n  sendAndConfirmTransaction,\n  Signer,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nimport { SignAllTransactions } from \"../raydium/type\";\n\nimport { createLogger } from \"./logger\";\nimport { Owner } from \"./owner\";\n\nconst logger = createLogger(\"Raydium_txTool\");\ninterface TxBuilderInit {\n  connection: Connection;\n  feePayer: PublicKey;\n  owner?: Owner;\n  signAllTransactions?: SignAllTransactions;\n}\n\nexport interface AddInstructionParam {\n  instructions?: TransactionInstruction[];\n  endInstructions?: TransactionInstruction[];\n  signers?: Signer[];\n}\n\nexport interface TxBuildData {\n  transaction: Transaction;\n  signers: Signer[];\n  execute: () => Promise<string>;\n  extInfo: Record<string, any>;\n}\n\nexport interface MultiTxBuildData {\n  transactions: Transaction[];\n  signers: Signer[][];\n  execute: () => Promise<string[]>;\n  extInfo: Record<string, any>;\n}\n\nexport class TxBuilder {\n  private connection: Connection;\n  private owner?: Owner;\n  private instructions: TransactionInstruction[] = [];\n  private endInstructions: TransactionInstruction[] = [];\n  private signers: Signer[] = [];\n  private feePayer: PublicKey;\n  private signAllTransactions?: SignAllTransactions;\n\n  constructor(params: TxBuilderInit) {\n    this.connection = params.connection;\n    this.feePayer = params.feePayer;\n    this.signAllTransactions = params.signAllTransactions;\n    this.owner = params.owner;\n  }\n\n  get AllTxData(): {\n    instructions: TransactionInstruction[];\n    endInstructions: TransactionInstruction[];\n    signers: Signer[];\n  } {\n    return {\n      instructions: this.instructions,\n      endInstructions: this.endInstructions,\n      signers: this.signers,\n    };\n  }\n\n  get allInstructions(): TransactionInstruction[] {\n    return [...this.instructions, ...this.endInstructions];\n  }\n\n  public addInstruction({ instructions = [], endInstructions = [], signers = [] }: AddInstructionParam): TxBuilder {\n    this.instructions.push(...instructions);\n    this.endInstructions.push(...endInstructions);\n    this.signers.push(...signers);\n    return this;\n  }\n\n  public build(extInfo?: Record<string, any>): TxBuildData {\n    const transaction = new Transaction();\n    if (this.allInstructions.length) transaction.add(...this.allInstructions);\n    transaction.feePayer = this.feePayer;\n\n    return {\n      transaction,\n      signers: this.signers,\n      execute: async (): Promise<string> => {\n        const recentBlockHash = await getRecentBlockHash(this.connection);\n        transaction.recentBlockhash = recentBlockHash;\n        if (this.owner?.isKeyPair) {\n          return sendAndConfirmTransaction(this.connection, transaction, this.signers);\n        }\n        if (this.signAllTransactions) {\n          if (this.signers.length) transaction.partialSign(...this.signers);\n          const txs = await this.signAllTransactions([transaction]);\n          return await this.connection.sendRawTransaction(txs[0].serialize(), { skipPreflight: true });\n        }\n        throw new Error(\"please connect wallet first\");\n      },\n      extInfo: extInfo || {},\n    };\n  }\n\n  public buildMultiTx(params: { extraPreBuildData?: TxBuildData[]; extInfo?: Record<string, any> }): MultiTxBuildData {\n    const { extraPreBuildData = [], extInfo } = params;\n    const { transaction } = this.build(extInfo);\n\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.transaction.instructions.length > 0);\n\n    const allTransactions: Transaction[] = [...filterExtraBuildData.map((data) => data.transaction), transaction];\n    const allSigners: Signer[][] = [...filterExtraBuildData.map((data) => data.signers), this.signers];\n\n    return {\n      transactions: allTransactions,\n      signers: allSigners,\n      execute: async (): Promise<string[]> => {\n        const recentBlockHash = await getRecentBlockHash(this.connection);\n        if (this.owner?.isKeyPair) {\n          return await Promise.all(\n            allTransactions.map(async (tx, idx) => {\n              tx.recentBlockhash = recentBlockHash;\n              return await sendAndConfirmTransaction(this.connection, tx, allSigners[idx]);\n            }),\n          );\n        }\n        if (this.signAllTransactions) {\n          const partialSignedTxs = allTransactions.map((tx, idx) => {\n            tx.recentBlockhash = recentBlockHash;\n            if (allSigners[idx].length) tx.partialSign(...allSigners[idx]);\n            return tx;\n          });\n          const signedTxs = await this.signAllTransactions(partialSignedTxs);\n\n          const txIds: string[] = [];\n          for (let i = 0; i < signedTxs.length; i += 1) {\n            const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight: true });\n            txIds.push(txId);\n          }\n          return txIds;\n        }\n        throw new Error(\"please connect wallet first\");\n      },\n      extInfo: extInfo || {},\n    };\n  }\n}\n\nexport async function getRecentBlockHash(connection: Connection): Promise<string> {\n  try {\n    return (await connection.getLatestBlockhash?.())?.blockhash || (await connection.getRecentBlockhash()).blockhash;\n  } catch {\n    return (await connection.getRecentBlockhash()).blockhash;\n  }\n}\n\n/**\n * Forecast transaction size\n */\nexport function forecastTransactionSize(instructions: TransactionInstruction[], signers: PublicKey[]): number {\n  if (instructions.length < 1) logger.logWithError(`no instructions provided: ${instructions.toString()}`);\n  if (signers.length < 1) logger.logWithError(`no signers provided:, ${signers.toString()}`);\n\n  const transaction = new Transaction();\n  transaction.recentBlockhash = \"11111111111111111111111111111111\";\n  transaction.feePayer = signers[0];\n  transaction.add(...instructions);\n\n  const message = transaction.compileMessage().serialize();\n  // SIGNATURE_LENGTH = 64\n  const transactionLength = signers.length + signers.length * 64 + message.length;\n  return transactionLength;\n}\n\n/**\n * Simulates multiple instruction\n */\nexport async function simulateMultipleInstruction(\n  connection: Connection,\n  instructions: TransactionInstruction[],\n  keyword: string,\n): Promise<any> {\n  const feePayer = new PublicKey(\"RaydiumSimuLateTransaction11111111111111111\");\n\n  const transactions: Transaction[] = [];\n\n  let transaction = new Transaction();\n  transaction.feePayer = feePayer;\n\n  for (const instruction of instructions) {\n    if (forecastTransactionSize([...transaction.instructions, instruction], [feePayer]) > PACKET_DATA_SIZE) {\n      transactions.push(transaction);\n      transaction = new Transaction();\n      transaction.feePayer = feePayer;\n      transaction.add(instruction);\n    } else {\n      transaction.add(instruction);\n    }\n  }\n  if (transaction.instructions.length > 0) {\n    transactions.push(transaction);\n  }\n\n  let results: RpcResponseAndContext<SimulatedTransactionResponse>[] = [];\n\n  try {\n    results = await Promise.all(transactions.map((transaction) => connection.simulateTransaction(transaction)));\n  } catch (error) {\n    if (error instanceof Error) {\n      logger.logWithError(`failed to simulate for instructions, RPC_ERROR, ${error.message}`);\n    }\n  }\n\n  const logs: string[] = [];\n  for (const result of results) {\n    const { value } = result;\n    logger.debug(`simulate result: ${JSON.stringify(result)}`);\n\n    if (value.logs) {\n      const filteredLog = value.logs.filter((log) => log && log.includes(keyword));\n      logger.debug(`filteredLog: ${JSON.stringify(logs)}`);\n      if (!filteredLog.length) logger.logWithError(` \"simulate log not match keyword, keyword: ${keyword}`);\n      logs.push(...filteredLog);\n    }\n  }\n\n  return logs;\n}\n\nexport function parseSimulateLogToJson(log: string, keyword: string): any {\n  const results = log.match(/{[\"\\w:,]+}/g);\n  if (!results || results.length !== 1) {\n    return logger.logWithError(`simulate log fail to match json, keyword: ${keyword}`);\n  }\n\n  return results[0];\n}\n\nexport function parseSimulateValue(log: string, key: string): any {\n  const reg = new RegExp(`\"${key}\":(\\\\d+)`, \"g\");\n\n  const results = reg.exec(log);\n  if (!results || results.length !== 2) {\n    return logger.logWithError(`simulate log fail to match key\", key: ${key}`);\n  }\n\n  return results[1];\n}\n\nexport interface ProgramAddress {\n  publicKey: PublicKey;\n  nonce: number;\n}\nexport async function findProgramAddress(\n  seeds: Array<Buffer | Uint8Array>,\n  programId: PublicKey,\n): Promise<ProgramAddress> {\n  const [publicKey, nonce] = await PublicKey.findProgramAddress(seeds, programId);\n  return { publicKey, nonce };\n}\n","/**\n * https://youmightnotneed.com/lodash/\n */\n\nexport function chunkArray<T>(arr: T[], chunkSize = 1, cache: T[][] = []): T[][] {\n  const tmp = [...arr];\n  if (chunkSize <= 0) return cache;\n  while (tmp.length) cache.push(tmp.splice(0, chunkSize));\n  return cache;\n}\n\nexport function intersection<T>(arr: T[], ...args: T[][]): T[] {\n  return arr.filter((item) => args.every((arr) => arr.includes(item)));\n}\n\nexport function xor<T>(arr: T[], ...args: T[][]): T[] {\n  return arr.filter((item) => args.every((arr) => !arr.includes(item)));\n}\n\nexport function uniq<T>(arr: T[]): T[] {\n  return [...new Set(arr)];\n}\n","import { AccountInfo, Commitment, Connection, PublicKey } from \"@solana/web3.js\";\n\nimport { chunkArray } from \"./lodash\";\nimport { createLogger } from \"./logger\";\n\ninterface MultipleAccountsJsonRpcResponse {\n  jsonrpc: string;\n  id: string;\n  error?: {\n    code: number;\n    message: string;\n  };\n  result: {\n    context: { slot: number };\n    value: { data: Array<string>; executable: boolean; lamports: number; owner: string; rentEpoch: number }[];\n  };\n}\n\nexport interface GetMultipleAccountsInfoConfig {\n  batchRequest?: boolean;\n  commitment?: Commitment;\n}\n\nconst logger = createLogger(\"Raydium_accountInfo_util\");\n\nexport async function getMultipleAccountsInfo(\n  connection: Connection,\n  publicKeys: PublicKey[],\n  config?: GetMultipleAccountsInfoConfig,\n): Promise<(AccountInfo<Buffer> | null)[]> {\n  const { batchRequest, commitment } = {\n    batchRequest: false,\n    ...config,\n  };\n\n  const chunkedKeys = chunkArray(publicKeys, 100);\n  let results: (AccountInfo<Buffer> | null)[][] = new Array(chunkedKeys.length).fill([]);\n\n  if (batchRequest) {\n    const batch = chunkedKeys.map((keys) => {\n      const args = connection._buildArgs([keys.map((key) => key.toBase58())], commitment, \"base64\");\n      return {\n        methodName: \"getMultipleAccounts\",\n        args,\n      };\n    });\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const unsafeResponse: MultipleAccountsJsonRpcResponse[] = await connection._rpcBatchRequest(batch);\n    results = unsafeResponse.map((unsafeRes: MultipleAccountsJsonRpcResponse) => {\n      if (unsafeRes.error)\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${unsafeRes.error.message}`);\n\n      return unsafeRes.result.value.map((accountInfo) => {\n        if (accountInfo) {\n          const { data, executable, lamports, owner, rentEpoch } = accountInfo;\n\n          if (data.length !== 2 && data[1] !== \"base64\") logger.logWithError(`info must be base64 encoded, RPC_ERROR`);\n\n          return {\n            data: Buffer.from(data[0], \"base64\"),\n            executable,\n            lamports,\n            owner: new PublicKey(owner),\n            rentEpoch,\n          };\n        }\n        return null;\n      });\n    });\n  } else {\n    try {\n      results = (await Promise.all(\n        chunkedKeys.map((keys) => connection.getMultipleAccountsInfo(keys, commitment)),\n      )) as (AccountInfo<Buffer> | null)[][];\n    } catch (error) {\n      if (error instanceof Error) {\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${error.message}`);\n      }\n    }\n  }\n\n  return results.flat();\n}\n\nexport async function getMultipleAccountsInfoWithCustomFlags<T extends { pubkey: PublicKey }>(\n  connection: Connection,\n  publicKeysWithCustomFlag: T[],\n  config?: GetMultipleAccountsInfoConfig,\n): Promise<({ accountInfo: AccountInfo<Buffer> | null } & T)[]> {\n  const multipleAccountsInfo = await getMultipleAccountsInfo(\n    connection,\n    publicKeysWithCustomFlag.map((o) => o.pubkey),\n    config,\n  );\n\n  return publicKeysWithCustomFlag.map((o, idx) => ({ ...o, accountInfo: multipleAccountsInfo[idx] }));\n}\n","import { Fraction, Percent, Price, TokenAmount } from \"../module\";\n\nimport { BN_ZERO, Numberish, parseNumberInfo } from \"./bignumber\";\n\nexport default function toFraction(value: Numberish): Fraction {\n  //  to complete math format(may have decimal), not int\n  if (value instanceof Percent) return new Fraction(value.numerator, value.denominator);\n\n  if (value instanceof Price) return value.adjusted;\n\n  // to complete math format(may have decimal), not BN\n  if (value instanceof TokenAmount)\n    try {\n      return toFraction(value.toExact());\n    } catch {\n      return new Fraction(BN_ZERO);\n    }\n\n  // do not ideal with other fraction value\n  if (value instanceof Fraction) return value;\n\n  // wrap to Fraction\n  const n = String(value);\n  const details = parseNumberInfo(n);\n  return new Fraction(details.numerator, details.denominator);\n}\n\nexport function toFractionWithDecimals(value: Numberish): { fr: Fraction; decimals?: number } {\n  //  to complete math format(may have decimal), not int\n  if (value instanceof Percent) return { fr: new Fraction(value.numerator, value.denominator) };\n\n  if (value instanceof Price) return { fr: value.adjusted };\n\n  // to complete math format(may have decimal), not BN\n  if (value instanceof TokenAmount) return { fr: toFraction(value.toExact()), decimals: value.token.decimals };\n\n  // do not ideal with other fraction value\n  if (value instanceof Fraction) return { fr: value };\n\n  // wrap to Fraction\n  const n = String(value);\n  const details = parseNumberInfo(n);\n  return { fr: new Fraction(details.numerator, details.denominator), decimals: details.dec?.length };\n}\n\nexport function lt(a: Numberish | undefined, b: Numberish | undefined): boolean {\n  if (a == null || b == null) return false;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  fa.sub(fb).numerator;\n  return fa.sub(fb).numerator.lt(BN_ZERO);\n}\n\nexport function gt(a: Numberish | undefined, b: Numberish | undefined): boolean {\n  if (a == null || b == null) return false;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.sub(fb).numerator.gt(BN_ZERO);\n}\n\nexport function lte(a: Numberish | undefined, b: Numberish | undefined): boolean {\n  if (a == null || b == null) return false;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.sub(fb).numerator.lte(BN_ZERO);\n}\n\nexport function gte(a: Numberish | undefined, b: Numberish | undefined): boolean {\n  if (a == null || b == null) return false;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.sub(fb).numerator.gte(BN_ZERO);\n}\n\nexport function eq(a: Numberish | undefined, b: Numberish | undefined): boolean {\n  if (a == null || b == null) return false;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.sub(fb).numerator.eq(BN_ZERO);\n}\n\nexport function div(a: Numberish | undefined, b: Numberish | undefined): Fraction | undefined {\n  if (a == null || b == null) return undefined;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  try {\n    return fa.div(fb); // if fb is zero , operation will throw error\n  } catch {\n    return fa;\n  }\n}\n\nexport function sub(a: Numberish | undefined, b: Numberish | undefined): Fraction | undefined {\n  if (a == null || b == null) return undefined;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.sub(fb);\n}\n\nexport function isMeaningfulNumber(n: Numberish | undefined): n is Numberish {\n  if (n == null) return false;\n  return !eq(n, 0);\n}\n\nexport function getMax(a: Numberish, b: Numberish): Numberish {\n  return gt(b, a) ? b : a;\n}\n","export type TimeStamp = string | number | Date;\n\nexport const isNumber = (val): boolean => typeof val === \"number\";\nexport type DateParam = string | number | Date | undefined;\n\nexport const getDate = (value?: DateParam): Date => (value ? new Date(value) : new Date());\nexport const getTime = (value?: DateParam): number => getDate(value).getTime();\n\n/** A must be milliseconds */\nexport function isDateBefore(timestampA: TimeStamp, timestampB: TimeStamp, options?: { unit?: \"ms\" | \"s\" }): boolean {\n  const realTimestampB = isNumber(timestampB)\n    ? (timestampB as number) * (options?.unit === \"s\" ? 1000 : 1)\n    : timestampB;\n  return new Date(timestampA).getTime() <= realTimestampB;\n}\n\n/** A must be milliseconds */\nexport function isDateAfter(timestampA: TimeStamp, timestampB: TimeStamp, options?: { unit?: \"ms\" | \"s\" }): boolean {\n  const realTimestampB = isNumber(timestampB)\n    ? (timestampB as number) * (options?.unit === \"s\" ? 1000 : 1)\n    : timestampB;\n  return new Date(timestampA).getTime() > realTimestampB;\n}\n\nexport function offsetDateTime(\n  baseDate: DateParam,\n  offset: {\n    days?: number;\n    hours?: number;\n    minutes?: number;\n    seconds?: number;\n    milliseconds?: number;\n  },\n): Date {\n  const timestamp = getTime(baseDate);\n  const offsetedTimestamp =\n    timestamp +\n    (offset.days ? offset.days * 24 * 60 * 60 * 1000 : 0) +\n    (offset.hours ? offset.hours * 60 * 60 * 1000 : 0) +\n    (offset.minutes ? offset.minutes * 60 * 1000 : 0) +\n    (offset.seconds ? offset.seconds * 1000 : 0) +\n    (offset.milliseconds ? offset.milliseconds : 0);\n  return getDate(offsetedTimestamp);\n}\n","import {\n  createInitializeAccountInstruction,\n  createCloseAccountInstruction,\n  createTransferInstruction,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport {\n  Commitment,\n  Connection,\n  Keypair,\n  PublicKey,\n  Signer,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { BigNumberish, parseBigNumberish } from \"../../common\";\nimport { AddInstructionParam } from \"../../common/txTool\";\nimport { u64 } from \"../../marshmallow\";\nimport { TOKEN_WSOL } from \"../token/constant\";\n\nimport { splAccountLayout } from \"./layout\";\n\nexport function initTokenAccountInstruction(params: {\n  mint: PublicKey;\n  tokenAccount: PublicKey;\n  owner: PublicKey;\n}): TransactionInstruction {\n  const { mint, tokenAccount, owner } = params;\n  return createInitializeAccountInstruction(tokenAccount, mint, owner);\n}\n\nexport function closeAccountInstruction(params: {\n  tokenAccount: PublicKey;\n  payer: PublicKey;\n  multiSigners?: Signer[];\n  owner: PublicKey;\n}): TransactionInstruction {\n  const { tokenAccount, payer, multiSigners = [], owner } = params;\n  return createCloseAccountInstruction(tokenAccount, payer, owner, multiSigners);\n}\n\ninterface CreateWSolTokenAccount {\n  connection: Connection;\n  payer: PublicKey;\n  owner: PublicKey;\n  amount: BigNumberish;\n  commitment?: Commitment;\n  skipCloseAccount?: boolean;\n}\n/**\n * WrappedNative account = wsol account\n */\nexport async function createWSolAccountInstructions(params: CreateWSolTokenAccount): Promise<AddInstructionParam> {\n  const { connection, amount, commitment, payer, owner, skipCloseAccount } = params;\n\n  const balanceNeeded = await connection.getMinimumBalanceForRentExemption(splAccountLayout.span, commitment);\n  const lamports = parseBigNumberish(amount).add(new BN(balanceNeeded));\n  const newAccount = Keypair.generate();\n\n  return {\n    signers: [newAccount],\n    instructions: [\n      SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: newAccount.publicKey,\n        lamports: lamports.toNumber(),\n        space: splAccountLayout.span,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      initTokenAccountInstruction({\n        mint: new PublicKey(TOKEN_WSOL.mint),\n        tokenAccount: newAccount.publicKey,\n        owner,\n      }),\n    ],\n    endInstructions: skipCloseAccount\n      ? []\n      : [\n          closeAccountInstruction({\n            tokenAccount: newAccount.publicKey,\n            payer,\n            owner,\n          }),\n        ],\n  };\n}\n\nexport function makeTransferInstruction({\n  source,\n  destination,\n  owner,\n  amount,\n  multiSigners = [],\n}: {\n  source: PublicKey;\n  destination: PublicKey;\n  owner: PublicKey;\n  amount: BigNumberish;\n  multiSigners?: Signer[];\n}): TransactionInstruction {\n  return createTransferInstruction(source, destination, owner, parseBigNumberish(amount).toNumber(), multiSigners);\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN, { isBN } from \"bn.js\";\n\nimport {\n  bits, blob, Blob, Layout, offset as _offset, seq as _seq, Structure as _Structure, u32 as _u32, u8 as _u8, UInt,\n  union as _union, Union as _Union,\n} from \"./buffer-layout\";\n\nexport * from \"./buffer-layout\";\nexport { blob };\n\nexport class BNLayout<P extends string = \"\"> extends Layout<BN, P> {\n  blob: Layout<Buffer>;\n  signed: boolean;\n\n  constructor(span: number, signed: boolean, property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends, but it desn't matter\n    super(span, property);\n    this.blob = blob(span);\n    this.signed = signed;\n  }\n\n  /** @override */\n  decode(b: Buffer, offset = 0): BN {\n    const num = new BN(this.blob.decode(b, offset), 10, \"le\");\n    if (this.signed) {\n      return num.fromTwos(this.span * 8).clone();\n    }\n    return num;\n  }\n\n  /** @override */\n  encode(src: BN, b: Buffer, offset = 0): number {\n    if (typeof src === \"number\") src = new BN(src); // src will pass a number accidently in union\n    if (this.signed) {\n      src = src.toTwos(this.span * 8);\n    }\n    return this.blob.encode(src.toArrayLike(Buffer, \"le\", this.span), b, offset);\n  }\n}\n\nexport class WideBits<P extends string = \"\"> extends Layout<Record<string, boolean>, P> {\n  _lower: any;\n  _upper: any;\n  // TODO: unknown\n  constructor(property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\n    super(8, property);\n    this._lower = bits(_u32(), false);\n    this._upper = bits(_u32(), false);\n  }\n\n  addBoolean(property: string): void {\n    if (this._lower.fields.length < 32) {\n      this._lower.addBoolean(property);\n    } else {\n      this._upper.addBoolean(property);\n    }\n  }\n\n  decode(b: Buffer, offset = 0): Record<string, boolean> {\n    const lowerDecoded = this._lower.decode(b, offset);\n    const upperDecoded = this._upper.decode(b, offset + this._lower.span);\n    return { ...lowerDecoded, ...upperDecoded };\n  }\n\n  encode(src: any /* TEMP */, b: Buffer, offset = 0):any {\n    return this._lower.encode(src, b, offset) + this._upper.encode(src, b, offset + this._lower.span);\n  }\n}\n\nexport function u8<P extends string = \"\">(property?: P): UInt<number, P> {\n  return new UInt(1, property);\n}\n\nexport function u32<P extends string = \"\">(property?: P): UInt<number, P> {\n  return new UInt(4, property);\n}\n\nexport function u64<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(8, false, property);\n}\n\nexport function u128<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(16, false, property);\n}\n\nexport function i64<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(8, true, property);\n}\n\nexport function i128<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(16, true, property);\n}\n\nexport class WrappedLayout<T, U, P extends string = \"\"> extends Layout<U, P> {\n  layout: Layout<T>;\n  decoder: (data: T) => U;\n  encoder: (src: U) => T;\n\n  constructor(layout: Layout<T>, decoder: (data: T) => U, encoder: (src: U) => T, property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\n    super(layout.span, property);\n    this.layout = layout;\n    this.decoder = decoder;\n    this.encoder = encoder;\n  }\n\n  decode(b: Buffer, offset?: number): U {\n    return this.decoder(this.layout.decode(b, offset));\n  }\n\n  encode(src: U, b: Buffer, offset?: number): number {\n    return this.layout.encode(this.encoder(src), b, offset);\n  }\n\n  getSpan(b: Buffer, offset?: number): number {\n    return this.layout.getSpan(b, offset);\n  }\n}\n\nexport function publicKey<P extends string = \"\">(property?: P): Layout<PublicKey, P> {\n  return new WrappedLayout(\n    blob(32),\n    (b: Buffer) => new PublicKey(b),\n    (key: PublicKey) => key.toBuffer(),\n    property,\n  );\n}\n\nexport class OptionLayout<T, P> extends Layout<T | null, P> {\n  layout: Layout<T>;\n  discriminator: Layout<number>;\n\n  constructor(layout: Layout<T>, property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\n    super(-1, property);\n    this.layout = layout;\n    this.discriminator = _u8();\n  }\n\n  encode(src: T | null, b: Buffer, offset = 0): number {\n    if (src === null || src === undefined) {\n      return this.discriminator.encode(0, b, offset);\n    }\n    this.discriminator.encode(1, b, offset);\n    return this.layout.encode(src, b, offset + 1) + 1;\n  }\n\n  decode(b: Buffer, offset = 0): T | null {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return null;\n    } else if (discriminator === 1) {\n      return this.layout.decode(b, offset + 1);\n    }\n    throw new Error(\"Invalid option \" + this.property);\n  }\n\n  getSpan(b: Buffer, offset = 0): number {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return 1;\n    } else if (discriminator === 1) {\n      return this.layout.getSpan(b, offset + 1) + 1;\n    }\n    throw new Error(\"Invalid option \" + this.property);\n  }\n}\n\nexport function option<T, P extends string = \"\">(layout: Layout<T>, property?: P): Layout<T | null, P> {\n  return new OptionLayout<T, P>(layout, property);\n}\n\nexport function bool<P extends string = \"\">(property?: P): Layout<boolean, P> {\n  return new WrappedLayout(_u8(), decodeBool, encodeBool, property);\n}\n\nexport function decodeBool(value: number): boolean {\n  if (value === 0) {\n    return false;\n  } else if (value === 1) {\n    return true;\n  }\n  throw new Error(\"Invalid bool: \" + value);\n}\n\nexport function encodeBool(value: boolean): number {\n  return value ? 1 : 0;\n}\n\nexport function vec<T, P extends string = \"\">(elementLayout: Layout<T>, property?: P): Layout<T[], P> {\n  const length = _u32(\"length\");\n  const layout: Layout<{ values: T[] }> = struct([\n    length,\n    seq(elementLayout, _offset(length, -length.span), \"values\"),\n  ]) as any; // Something I don't know\n  return new WrappedLayout(\n    layout,\n    ({ values }) => values,\n    (values) => ({ values }),\n    property,\n  );\n}\n\nexport function tagged<T, P extends string = \"\">(tag: BN, layout: Layout<T>, property?: P): Layout<T, P> {\n  const wrappedLayout: Layout<{ tag: BN; data: T }> = struct([u64(\"tag\"), layout.replicate(\"data\")]) as any; // Something I don't know\n\n  function decodeTag({ tag: receivedTag, data }: { tag: BN; data: T }): T {\n    if (!receivedTag.eq(tag)) {\n      throw new Error(\"Invalid tag, expected: \" + tag.toString(\"hex\") + \", got: \" + receivedTag.toString(\"hex\"));\n    }\n    return data;\n  }\n\n  return new WrappedLayout(wrappedLayout, decodeTag, (data) => ({ tag, data }), property);\n}\n\nexport function vecU8<P extends string = \"\">(property?: P): Layout<Buffer, P> {\n  const length = _u32(\"length\");\n  const layout: Layout<{ data: Buffer }> = struct([length, blob(_offset(length, -length.span), \"data\")]) as any; // Something I don't know\n  return new WrappedLayout(\n    layout,\n    ({ data }) => data,\n    (data) => ({ data }),\n    property,\n  );\n}\n\nexport function str<P extends string = \"\">(property?: P): Layout<string, P> {\n  return new WrappedLayout(\n    vecU8(),\n    (data) => data.toString(\"utf-8\"),\n    (s) => Buffer.from(s, \"utf-8\"),\n    property,\n  );\n}\n\nexport interface EnumLayout<T, P extends string = \"\"> extends Layout<T, P> {\n  registry: Record<string, Layout<any>>;\n}\n\nexport function rustEnum<T, P extends string = \"\">(variants: Layout<any>[], property?: P): EnumLayout<T, P> {\n  const unionLayout = _union(_u8(), property);\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property));\n  return unionLayout as any; // ?why use UnionLayout? This must be a fault\n}\n\nexport function array<T, P extends string = \"\">(\n  elementLayout: Layout<T>,\n  length: number,\n  property?: P,\n): Layout<T[], P> {\n  const layout = struct([seq(elementLayout, length, \"values\")]) as any as Layout<{ values: T[] }>; // Something I don't know\n  return new WrappedLayout(\n    layout,\n    ({ values }) => values,\n    (values) => ({ values }),\n    property,\n  );\n}\n\nexport class Structure<T, P, D> extends _Structure<T, P, D> {\n  /** @override */\n  decode(b: Buffer, offset?: number): D {\n    return super.decode(b, offset);\n  }\n}\n\nexport function struct<T, P extends string = \"\">(\n  fields: T,\n  property?: P,\n  decodePrefixes?: boolean,\n): T extends Layout<infer Value, infer Property>[]\n  ? Structure<\n      Value,\n      P,\n      {\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\n          ? V\n          : any;\n      }\n    >\n  : any {\n  //@ts-expect-error this type is not quite satisfied the define, but, never no need to worry about.\n  return new Structure(fields, property, decodePrefixes);\n}\n\nexport type GetLayoutSchemaFromStructure<T extends Structure<any, any, any>> = T extends Structure<any, any, infer S>\n  ? S\n  : any;\nexport type GetStructureFromLayoutSchema<S> = Structure<any, any, S>;\n\nexport class Union<Schema> extends _Union<Schema> {\n  encodeInstruction(instruction: any): Buffer {\n    const instructionMaxSpan = Math.max(...Object.values(this.registry).map((r) => r.span));\n    const b = Buffer.alloc(instructionMaxSpan);\n    return b.slice(0, this.encode(instruction, b));\n  }\n\n  decodeInstruction(instruction: any):Partial<Schema> {\n    return this.decode(instruction);\n  }\n}\nexport function union<UnionSchema extends { [key: string]: any } = any>(\n  discr: any,\n  defaultLayout?: any,\n  property?: string,\n): Union<UnionSchema> {\n  return new Union(discr, defaultLayout, property);\n}\n\nclass Zeros extends Blob {\n  decode(b: Buffer, offset: number):Buffer {\n    const slice = super.decode(b, offset);\n    if (!slice.every((v) => v === 0)) {\n      throw new Error(\"nonzero padding bytes\");\n    }\n    return slice;\n  }\n}\n\nexport function zeros(length: number):Zeros {\n  return new Zeros(length);\n}\n\nexport function seq<T, P extends string = \"\", AnotherP extends string = \"\">(\n  elementLayout: Layout<T, P>,\n  count: number | BN | Layout<BN | number, P>,\n  property?: AnotherP,\n): Layout<T[], AnotherP> {\n  let parsedCount: number;\n  const superCount =\n    typeof count === \"number\"\n      ? count\n      : isBN(count)\n      ? count.toNumber()\n      : new Proxy(count as unknown as Layout<number> /* pretend to be Layout<number> */, {\n          get(target, property):any {\n            if (!parsedCount) {\n              // get count in targetLayout. note that count may be BN\n              const countProperty = Reflect.get(target, \"count\");\n\n              // let targetLayout's  property:count be a number\n              parsedCount = isBN(countProperty) ? countProperty.toNumber() : countProperty;\n\n              // record the count\n              Reflect.set(target, \"count\", parsedCount);\n            }\n            return Reflect.get(target, property);\n          },\n          set(target, property, value):any {\n            if (property === \"count\") {\n              parsedCount = value;\n            }\n            return Reflect.set(target, property, value);\n          },\n        });\n\n  // @ts-expect-error force type\n  return _seq(elementLayout, superCount, property);\n}\n","import {\n  bits as _bits, BitStructure as _BitStructure, blob as _blob, Blob as _Blob, cstr as _cstr, f32 as _f32,\n  f32be as _f32be, f64 as _f64, f64be as _f64be, greedy as _greedy, Layout as _Layout, ns64 as _ns64, ns64be as _ns64be,\n  nu64 as _nu64, nu64be as _nu64be, offset as _offset, s16 as _s16, s16be as _s16be, s24 as _s24, s24be as _s24be,\n  s32 as _s32, s32be as _s32be, s40 as _s40, s40be as _s40be, s48 as _s48, s48be as _s48be, s8 as _s8, seq as _seq,\n  struct as _struct, Structure as _Structure, u16 as _u16, u16be as _u16be, u24 as _u24, u24be as _u24be, u32 as _u32,\n  u32be as _u32be, u40 as _u40, u40be as _u40be, u48 as _u48, u48be as _u48be, u8 as _u8, UInt as _UInt,\n  union as _union, Union as _Union, unionLayoutDiscriminator as _unionLayoutDiscriminator, utf8 as _utf8,\n} from \"@solana/buffer-layout\";\n\n//#region ------------------- Layout -------------------\nexport interface Layout<T = any, P = \"\"> {\n  span: number;\n  property?: P;\n  decode(b: Buffer, offset?: number): T;\n  encode(src: T, b: Buffer, offset?: number): number;\n  getSpan(b: Buffer, offset?: number): number;\n  replicate<AP extends string>(name: AP): Layout<T, AP>;\n}\nexport interface LayoutConstructor {\n  new <T, P>(): Layout<T, P>; // for class extends syntex\n  new <T, P>(span?: T, property?: P): Layout<T, P>;\n  readonly prototype: Layout;\n}\nexport const Layout = _Layout as unknown as LayoutConstructor;\n//#endregion\n\n//#region ------------------- Structure -------------------\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface Structure<T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>\n  extends Layout<DecodeSchema, P> {\n  span: number;\n  decode(b: Buffer, offset?: number): DecodeSchema;\n  layoutFor<AP extends string>(property: AP): Layout<DecodeSchema[AP]>;\n  offsetOf<AP extends string>(property: AP): number;\n}\ninterface StructureConstructor {\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(): Structure<T, P, DecodeSchema>;\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(\n    fields: T,\n    property?: P,\n    decodePrefixes?: boolean,\n  ): Structure<T, P, DecodeSchema>;\n}\nexport const Structure = _Structure as unknown as StructureConstructor;\n//#endregion\n\n//#region ------------------- Union -------------------\nexport interface Union<UnionSchema extends { [key: string]: any } = any> extends Layout {\n  registry: object;\n  decode(b: Buffer, offset?: number): Partial<UnionSchema>;\n  addVariant(\n    variant: number,\n    layout: Structure<any, any, Partial<UnionSchema>> | Layout<any, keyof UnionSchema>,\n    property?: string,\n  ): any /* TEMP: code in Layout.js 1809 */;\n}\ninterface UnionConstructor {\n  new <UnionSchema extends { [key: string]: any } = any>(): Union<UnionSchema>;\n  new <UnionSchema extends { [key: string]: any } = any>(\n    discr: Layout<any, any>,\n    defaultLayout: Layout<any, any>,\n    property?: string,\n  ): Union<UnionSchema>;\n}\nexport const Union = _Union as unknown as UnionConstructor;\n//#endregion\n\n//#region ------------------- BitStructure -------------------\nexport type BitStructure<T = unknown /* TEMP */, P = \"\"> = Layout<T, P>;\ninterface BitStructureConstructor {\n  new (...params: any[]): BitStructure;\n}\nexport const BitStructure = _BitStructure as BitStructureConstructor;\n//#endregion\n\n//#region ------------------- UInt -------------------\nexport type UInt<T = any, P = \"\"> = Layout<T, P>;\ninterface UIntConstructor {\n  new <T, P>(span?: T, property?: P): UInt<T, P>;\n}\nexport const UInt = _UInt as UIntConstructor;\n//#endregion\n\n//#region ------------------- Blob -------------------\nexport type Blob<P extends string = \"\"> = Layout<Buffer, P>;\ninterface BlobConstructor {\n  new (...params: ConstructorParameters<LayoutConstructor>): Blob;\n}\nexport const Blob = _Blob as unknown as BlobConstructor;\n//#endregion\n\nexport const greedy = _greedy as <P extends string = \"\">(elementSpan?: number, property?: P) => Layout<number, P>;\nexport const u8 = _u8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u16 = _u16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u24 = _u24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u32 = _u32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u40 = _u40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u48 = _u48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const nu64 = _nu64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u16be = _u16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u24be = _u24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u32be = _u32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u40be = _u40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u48be = _u48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const nu64be = _nu64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s8 = _s8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s16 = _s16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s24 = _s24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s32 = _s32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s40 = _s40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s48 = _s48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const ns64 = _ns64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s16be = _s16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s24be = _s24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s32be = _s32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s40be = _s40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s48be = _s48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const ns64be = _ns64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f32 = _f32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f32be = _f32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f64 = _f64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f64be = _f64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const struct = _struct as <T, P extends string = \"\">(\n  fields: T,\n  property?: P,\n  decodePrefixes?: boolean,\n) => T extends Layout<infer Value, infer Property>[]\n  ? Structure<\n      Value,\n      P,\n      {\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\n          ? V\n          : any;\n      }\n    >\n  : any;\n\nexport const seq = _seq as unknown as <T, P>(\n  elementLayout: Layout<T, string>,\n  count: number | Layout<number, string>,\n  property?: P,\n) => Layout<T[]>;\nexport const union = _union as <UnionSchema extends { [key: string]: any } = any>(\n  discr: Layout<any, any>,\n  defaultLayout?: any,\n  property?: string,\n) => Union<UnionSchema>;\nexport const unionLayoutDiscriminator = _unionLayoutDiscriminator as <P extends string = \"\">(\n  layout: Layout<any, P>,\n  property?: P,\n) => any;\nexport const blob = _blob as unknown as <P extends string = \"\">(length: number | Layout<number, P>, property?: P) => Blob<P>;\nexport const cstr = _cstr as <P extends string = \"\">(property?: P) => Layout<string, P>;\nexport const utf8 = _utf8 as <P extends string = \"\">(maxSpan: number, property?: P) => Layout<string, P>;\nexport const bits = _bits as unknown as <T, P extends string = \"\">(\n  word: Layout<T>,\n  msb?: boolean,\n  property?: P,\n) => BitStructure<T, P>; // TODO: not quite sure\nexport const offset = _offset as unknown as <T, P extends string = \"\">(\n  layout: Layout<T, P>,\n  offset?: number,\n  property?: P,\n) => Layout<T, P>;\n\nexport type GetStructureSchema<T extends Structure> = T extends Structure<any, any, infer S> ? S : unknown;\n","import { publicKey, struct, u32, u64, u8 } from \"../../marshmallow\";\n\nexport const splAccountLayout = struct([\n  publicKey(\"mint\"),\n  publicKey(\"owner\"),\n  u64(\"amount\"),\n  u32(\"delegateOption\"),\n  publicKey(\"delegate\"),\n  u8(\"state\"),\n  u32(\"isNativeOption\"),\n  u64(\"isNative\"),\n  u64(\"delegatedAmount\"),\n  u32(\"closeAuthorityOption\"),\n  publicKey(\"closeAuthority\"),\n]);\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { createLogger, Logger } from \"../common/logger\";\nimport { TxBuilder } from \"../common/txTool\";\n\nimport { Raydium } from \"./\";\n\nexport interface ModuleBaseProps {\n  scope: Raydium;\n  moduleName: string;\n}\n\nconst joinMsg = (...args: (string | number | Record<string, any>)[]): string =>\n  args\n    .map((arg) => {\n      try {\n        return typeof arg === \"object\" ? JSON.stringify(arg) : arg;\n      } catch {\n        return arg;\n      }\n    })\n    .join(\", \");\nexport default class ModuleBase {\n  public scope: Raydium;\n  private disabled = false;\n  protected logger: Logger;\n\n  constructor({ scope, moduleName }: ModuleBaseProps) {\n    this.scope = scope;\n    this.logger = createLogger(moduleName);\n  }\n\n  protected createTxBuilder(feePayer?: PublicKey): TxBuilder {\n    this.scope.checkOwner();\n    return new TxBuilder({\n      connection: this.scope.connection,\n      feePayer: feePayer || this.scope.ownerPubKey,\n      owner: this.scope.owner,\n      signAllTransactions: this.scope.signAllTransactions,\n    });\n  }\n\n  public logDebug(...args: (string | number | Record<string, any>)[]): void {\n    this.logger.debug(joinMsg(args));\n  }\n\n  public logInfo(...args: (string | number | Record<string, any>)[]): void {\n    this.logger.info(joinMsg(args));\n  }\n\n  public logAndCreateError(...args: (string | number | Record<string, any>)[]): void {\n    const message = joinMsg(args);\n    // this.logger.error(message);\n    throw new Error(message);\n  }\n\n  public checkDisabled(): void {\n    if (this.disabled || !this.scope) this.logAndCreateError(\"module not working\");\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { createLogger } from \"../../common/logger\";\n\nimport {\n  FarmLedgerLayout,\n  farmLedgerLayoutV3_2,\n  farmLedgerLayoutV5_2,\n  farmLedgerLayoutV6_1,\n  FarmStateLayout,\n  farmStateV3Layout,\n  farmStateV5Layout,\n  farmStateV6Layout,\n} from \"./layout\";\nimport { RewardInfoWithKey } from \"./type\";\n\nconst logger = createLogger(\"Raydium_farm_config\");\n\n/* ================= program public keys ================= */\nexport const FARM_PROGRAM_ID_V3 = \"EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q\";\nexport const FARM_PROGRAM_ID_V3_PUBKEY = new PublicKey(FARM_PROGRAM_ID_V3);\nexport const FARM_PROGRAM_ID_V5 = \"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\";\nexport const FARM_PROGRAM_ID_V5_PUBKEY = new PublicKey(FARM_PROGRAM_ID_V5);\nexport const FARM_PROGRAM_ID_V6 = \"FarmqiPv5eAj3j1GMdMCMUGXqPUvmquZtMy86QH6rzhG\";\nexport const FARM_PROGRAM_ID_V6_PUBKEY = new PublicKey(FARM_PROGRAM_ID_V6);\n\nexport type FarmVersion = 3 | 4 | 5 | 6;\n\n// farm program id string => farm version\nexport const FARM_PROGRAMID_TO_VERSION: {\n  [key: string]: FarmVersion;\n} = {\n  [FARM_PROGRAM_ID_V3]: 3,\n  [FARM_PROGRAM_ID_V5]: 5,\n  [FARM_PROGRAM_ID_V6]: 6,\n};\n\n// farm version => farm program id\nexport const FARM_VERSION_TO_PROGRAMID: { [key in FarmVersion]?: PublicKey } & {\n  [K: number]: PublicKey;\n} = {\n  3: FARM_PROGRAM_ID_V3_PUBKEY,\n  5: FARM_PROGRAM_ID_V5_PUBKEY,\n  6: FARM_PROGRAM_ID_V6_PUBKEY,\n};\n\nexport const FARM_LOCK_MINT = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\nexport const FARM_LOCK_VAULT = new PublicKey(\"FrspKwj8i3pNmKwXreTveC4fu7KL5ZbGeXdZBe2XViu1\");\n\n/* ================= index ================= */\n// version => farm state layout\nexport const FARM_VERSION_TO_STATE_LAYOUT: {\n  [version in FarmVersion]?: FarmStateLayout;\n} = {\n  3: farmStateV3Layout,\n  5: farmStateV5Layout,\n  6: farmStateV6Layout,\n};\n\n// version => farm ledger layout\nexport const FARM_VERSION_TO_LEDGER_LAYOUT: {\n  [version in FarmVersion]?: FarmLedgerLayout;\n} = {\n  3: farmLedgerLayoutV3_2,\n  5: farmLedgerLayoutV5_2,\n  6: farmLedgerLayoutV6_1,\n};\n\nexport const isValidFarmVersion = (version: number): boolean => [3, 5, 6].indexOf(version) !== -1;\n\nconst farmDepositInstruction = {\n  3: 10,\n  5: 11,\n  6: 1,\n};\nexport const farmDespotVersionToInstruction = (version: number): number => {\n  const ver = farmDepositInstruction[version];\n  if (!ver) logger.logWithError(\"invalid deposit farm version\");\n  return ver;\n};\n\nconst farmWithdrawInstruction = {\n  3: 11,\n  5: 12,\n  6: 2,\n};\nexport const farmWithdrawVersionToInstruction = (version: number): number => {\n  const ver = farmWithdrawInstruction[version];\n  if (!ver) logger.logWithError(\"invalid withdraw farm version\");\n  return ver;\n};\n\nexport const validateFarmRewards = (params: {\n  version: number;\n  rewardInfos: RewardInfoWithKey[];\n  rewardTokenAccountsPublicKeys: PublicKey[];\n}): (() => string | undefined) => {\n  const { version, rewardInfos, rewardTokenAccountsPublicKeys } = params;\n\n  const infoMsg = `rewardInfo:${JSON.stringify(rewardInfos)}, rewardAccount:${JSON.stringify(\n    rewardTokenAccountsPublicKeys,\n  )}`;\n\n  const validator = {\n    3: (): string | undefined => {\n      if (rewardInfos.length !== 1 || rewardTokenAccountsPublicKeys.length !== 1) {\n        return `rewardInfos or rewardTokenAccounts lengths not equal 1: ${infoMsg}`;\n      }\n    },\n    5: (): string | undefined => {\n      if (rewardInfos.length !== rewardTokenAccountsPublicKeys.length) {\n        return `rewardInfos and rewardTokenAccounts lengths not equal: ${infoMsg}`;\n      }\n    },\n    6: (): string | undefined => {\n      if (!rewardTokenAccountsPublicKeys.length || rewardInfos.length !== rewardTokenAccountsPublicKeys.length) {\n        return `no rewardTokenAccounts or rewardInfos and rewardTokenAccounts lengths not equal: ${infoMsg}`;\n      }\n    },\n  };\n\n  return validator[version]?.();\n};\n\nexport const poolTypeV6 = { \"Standard SPL\": 0, \"Option tokens\": 1 };\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport {\n  blob,\n  GetLayoutSchemaFromStructure,\n  GetStructureFromLayoutSchema,\n  GetStructureSchema,\n  publicKey,\n  seq,\n  struct,\n  u128,\n  u64,\n  u8,\n} from \"../../marshmallow\";\n\nimport { poolTypeV6 } from \"./config\";\nimport { RewardType } from \"./type\";\n\nexport const associatedLedgerAccountLayout = struct([u8(\"instruction\")]);\nexport const withdrawRewardLayout = struct([u8(\"instruction\")]);\n\nconst farmStateRewardInfoV6Layout = struct([\n  u64(\"rewardState\"),\n  u64(\"rewardOpenTime\"),\n  u64(\"rewardEndTime\"),\n  u64(\"rewardLastUpdateTime\"),\n  u64(\"totalReward\"),\n  u64(\"totalRewardEmissioned\"),\n  u64(\"rewardClaimed\"),\n  u64(\"rewardPerSecond\"),\n  u128(\"accRewardPerShare\"),\n  publicKey(\"rewardVault\"),\n  publicKey(\"rewardMint\"),\n  publicKey(\"rewardSender\"),\n  u64(\"rewardType\"),\n  seq(u64(), 15, \"padding\"),\n]);\n\nexport const realFarmStateV3Layout = struct([\n  u64(\"state\"),\n  u64(\"nonce\"),\n  publicKey(\"lpVault\"),\n  publicKey(\"rewardVault\"),\n  publicKey(),\n  publicKey(),\n  u64(),\n  u64(),\n  u64(\"totalReward\"),\n  u128(\"perShareReward\"),\n  u64(\"lastSlot\"),\n  u64(\"perSlotReward\"),\n]);\n\nexport const realFarmStateV5Layout = struct([\n  u64(\"state\"),\n  u64(\"nonce\"),\n  publicKey(\"lpVault\"),\n  publicKey(\"rewardVaultA\"),\n  u64(\"totalRewardA\"),\n  u128(\"perShareRewardA\"),\n  u64(\"perSlotRewardA\"),\n  u8(\"option\"),\n  publicKey(\"rewardVaultB\"),\n  blob(7),\n  u64(\"totalRewardB\"),\n  u128(\"perShareRewardB\"),\n  u64(\"perSlotRewardB\"),\n  u64(\"lastSlot\"),\n  publicKey(),\n]);\n\nexport const realFarmV6Layout = struct([\n  u64(),\n  u64(\"state\"),\n  u64(\"nonce\"),\n  u64(\"validRewardTokenNum\"),\n  u128(\"rewardMultiplier\"),\n  u64(\"rewardPeriodMax\"),\n  u64(\"rewardPeriodMin\"),\n  u64(\"rewardPeriodExtend\"),\n  publicKey(\"lpMint\"),\n  publicKey(\"lpVault\"),\n  seq(farmStateRewardInfoV6Layout, 5, \"rewardInfos\"),\n  publicKey(\"creator\"),\n  publicKey(),\n  seq(u64(), 32, \"padding\"),\n]);\n\nexport const farmStateV3Layout = new Proxy(\n  realFarmStateV3Layout as GetStructureFromLayoutSchema<\n    {\n      version: 3;\n      rewardInfos: {\n        rewardVault: PublicKey;\n        totalReward: BN;\n        perSlotReward: BN;\n        perShareReward: BN;\n      }[];\n    } & GetLayoutSchemaFromStructure<typeof realFarmStateV3Layout>\n  >,\n  {\n    get(target, p, receiver): any {\n      if (p === \"decode\")\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\n          const originalResult = target.decode(...decodeParams);\n          return {\n            ...originalResult,\n            version: 3,\n            rewardInfos: [\n              {\n                rewardVault: originalResult.rewardVault,\n                totalReward: originalResult.totalReward,\n                perSlotReward: originalResult.perSlotReward,\n                perShareReward: originalResult.perShareReward,\n              },\n            ],\n          };\n        };\n      else return Reflect.get(target, p, receiver);\n    },\n  },\n);\n\nexport const farmStateV5Layout = new Proxy(\n  realFarmStateV5Layout as GetStructureFromLayoutSchema<\n    {\n      version: 5;\n      rewardInfos: {\n        rewardVault: PublicKey;\n        totalReward: BN;\n        perSlotReward: BN;\n        perShareReward: BN;\n      }[];\n    } & GetLayoutSchemaFromStructure<typeof realFarmStateV5Layout>\n  >,\n  {\n    get(target, p, receiver): any {\n      if (p === \"decode\")\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\n          const originalResult = target.decode(...decodeParams);\n          return {\n            ...originalResult,\n            version: 5,\n            rewardInfos: [\n              {\n                rewardVault: originalResult.rewardVaultA,\n                totalReward: originalResult.totalRewardA,\n                perSlotReward: originalResult.perSlotRewardA,\n                perShareReward: originalResult.perShareRewardA,\n              },\n              {\n                rewardVault: originalResult.rewardVaultB,\n                totalReward: originalResult.totalRewardB,\n                perSlotReward: originalResult.perSlotRewardB,\n                perShareReward: originalResult.perShareRewardB,\n              },\n            ],\n          };\n        };\n      else return Reflect.get(target, p, receiver);\n    },\n  },\n);\n\nexport const farmStateV6Layout = new Proxy(\n  realFarmV6Layout as GetStructureFromLayoutSchema<\n    {\n      version: 6;\n      rewardInfos: {\n        rewardState: BN;\n        rewardOpenTime: BN;\n        rewardEndTime: BN;\n        rewardLastUpdateTime: BN;\n        totalReward: BN;\n        totalRewardEmissioned: BN;\n        rewardClaimed: BN;\n        rewardPerSecond: BN;\n        accRewardPerShare: BN;\n        rewardVault: PublicKey;\n        rewardMint: PublicKey;\n        rewardSender: PublicKey;\n        rewardType: RewardType;\n      }[];\n    } & GetLayoutSchemaFromStructure<typeof realFarmV6Layout>\n  >,\n  {\n    get(target, p, receiver): any {\n      if (p === \"decode\")\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\n          const originalResult = target.decode(...decodeParams);\n          return {\n            ...originalResult,\n            version: 6,\n            rewardInfos: originalResult.rewardInfos.map((item) => ({\n              ...item,\n              rewardType: (Object.entries(poolTypeV6).find((i) => String(i[1]) === item.rewardType.toString()) ?? [\n                \"Standard SPL\",\n              ])[0],\n            })),\n          };\n        };\n      else return Reflect.get(target, p, receiver);\n    },\n  },\n);\n\nexport const farmRewardTimeInfoLayout = struct([\n  u64(\"isSet\"),\n  u64(\"rewardPerSecond\"),\n  u64(\"rewardOpenTime\"),\n  u64(\"rewardEndTime\"),\n  u64(\"rewardType\"),\n]);\n\nexport const farmRewardLayout = struct([\n  u8(\"instruction\"),\n  u64(\"nonce\"),\n  seq(farmRewardTimeInfoLayout, 5, \"rewardTimeInfo\"),\n]);\n\nexport const farmRewardRestartLayout = struct([\n  u8(\"instruction\"),\n  u64(\"rewardReopenTime\"),\n  u64(\"rewardEndTime\"),\n  u64(\"rewardPerSecond\"),\n]);\n\nexport const farmAddRewardLayout = struct([\n  u8(\"instruction\"),\n  u64(\"isSet\"),\n  u64(\"rewardPerSecond\"),\n  u64(\"rewardOpenTime\"),\n  u64(\"rewardEndTime\"),\n]);\n\nexport type FarmStateLayoutV3 = typeof farmStateV3Layout;\nexport type FarmStateLayoutV5 = typeof farmStateV5Layout;\nexport type FarmStateLayoutV6 = typeof farmStateV6Layout;\n\nexport type FarmStateV3 = GetStructureSchema<FarmStateLayoutV3>;\nexport type FarmStateV5 = GetStructureSchema<FarmStateLayoutV5>;\nexport type FarmStateV6 = GetStructureSchema<FarmStateLayoutV6>;\n\nexport type FarmState = FarmStateV3 | FarmStateV5 | FarmStateV6;\n// farmStateLayoutV3\nexport type FarmStateLayout = FarmStateLayoutV3 | FarmStateLayoutV5 | FarmStateLayoutV6;\n\n/* ================= ledger layouts ================= */\nexport const farmLedgerLayoutV3_1 = struct([\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u64(), 1, \"rewardDebts\"),\n]);\n\nexport const farmLedgerLayoutV3_2 = struct([\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u128(), 1, \"rewardDebts\"),\n  seq(u64(), 17),\n]);\n\nexport const farmLedgerLayoutV5_1 = struct([\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u64(), 2, \"rewardDebts\"),\n]);\n\nexport const farmLedgerLayoutV5_2 = struct([\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u128(), 2, \"rewardDebts\"),\n  seq(u64(), 17),\n]);\n\nexport const farmLedgerLayoutV6_1 = struct([\n  u64(),\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u128(), 5, \"rewardDebts\"),\n  seq(u64(), 16),\n]);\n\nexport type FarmLedgerLayoutV3_1 = typeof farmLedgerLayoutV3_1;\nexport type FarmLedgerLayoutV3_2 = typeof farmLedgerLayoutV3_2;\nexport type FarmLedgerLayoutV5_1 = typeof farmLedgerLayoutV5_1;\nexport type FarmLedgerLayoutV5_2 = typeof farmLedgerLayoutV5_2;\nexport type FarmLedgerLayoutV6_1 = typeof farmLedgerLayoutV6_1;\nexport type FarmLedgerLayout =\n  | FarmLedgerLayoutV3_1\n  | FarmLedgerLayoutV3_2\n  | FarmLedgerLayoutV5_1\n  | FarmLedgerLayoutV5_2\n  | FarmLedgerLayoutV6_1;\n\nexport type FarmLedgerV3_1 = GetStructureSchema<FarmLedgerLayoutV3_1>;\nexport type FarmLedgerV3_2 = GetStructureSchema<FarmLedgerLayoutV3_2>;\nexport type FarmLedgerV5_1 = GetStructureSchema<FarmLedgerLayoutV5_1>;\nexport type FarmLedgerV5_2 = GetStructureSchema<FarmLedgerLayoutV5_2>;\nexport type FarmLedgerV6_1 = GetStructureSchema<FarmLedgerLayoutV6_1>;\nexport type FarmLedger = FarmLedgerV3_1 | FarmLedgerV3_2 | FarmLedgerV5_1 | FarmLedgerV5_2 | FarmLedgerV6_1;\n\nexport const dwLayout = struct([u8(\"instruction\"), u64(\"amount\")]);\n","import { Keypair, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { createLogger } from \"../../common/logger\";\nimport { accountMeta, commonSystemAccountMeta, SOLMint } from \"../../common/pubKey\";\n\nimport { associatedLedgerAccountLayout, farmRewardLayout } from \"./layout\";\nimport { FarmRewardInfoConfig, RewardInfoKey } from \"./type\";\n\nconst logger = createLogger(\"Raydium_farm_instruction\");\n\nexport async function createAssociatedLedgerAccountInstruction(params: {\n  version: number;\n  id: PublicKey;\n  programId: PublicKey;\n  ledger: PublicKey;\n  owner: PublicKey;\n}): Promise<TransactionInstruction> {\n  const { version, id, ledger, programId, owner } = params;\n  const instruction = { 3: 9, 5: 10 }[version];\n  if (!instruction) logger.logWithError(`invalid farm pool version: ${version}`);\n\n  const data = Buffer.alloc(associatedLedgerAccountLayout.span);\n  associatedLedgerAccountLayout.encode(\n    {\n      instruction: instruction!,\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: id }),\n    accountMeta({ pubkey: ledger }),\n    accountMeta({ pubkey: owner, isWritable: false }),\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n    accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\n  ];\n\n  return new TransactionInstruction({\n    programId,\n    keys,\n    data,\n  });\n}\n\ninterface CreateFarmInstruction {\n  farmKeyPair: Keypair;\n  farmAuthority: PublicKey;\n  lpVault: PublicKey;\n  lpMint: PublicKey;\n  lockVault: PublicKey;\n  lockMint: PublicKey;\n  lockUserAccount?: PublicKey;\n  programId: PublicKey;\n  owner: PublicKey;\n  rewardInfo: RewardInfoKey[];\n  rewardInfoConfig: FarmRewardInfoConfig[];\n  nonce: number;\n}\nexport function makeCreateFarmInstruction(params: CreateFarmInstruction): TransactionInstruction {\n  const data = Buffer.alloc(farmRewardLayout.span);\n  farmRewardLayout.encode(\n    {\n      instruction: 0,\n      nonce: new BN(params.nonce),\n      rewardTimeInfo: params.rewardInfoConfig,\n    },\n    data,\n  );\n\n  const keys = [\n    ...commonSystemAccountMeta,\n    accountMeta({ pubkey: params.farmKeyPair.publicKey }),\n    accountMeta({ pubkey: params.farmAuthority, isWritable: false }),\n    accountMeta({ pubkey: params.lpVault }),\n    accountMeta({ pubkey: params.lpMint, isWritable: false }),\n    accountMeta({ pubkey: params.lockVault }),\n    accountMeta({ pubkey: params.lockMint, isWritable: false }),\n    accountMeta({ pubkey: params.lockUserAccount ?? SOLMint }),\n    accountMeta({ pubkey: params.owner, isWritable: false, isSigner: true }),\n  ];\n\n  for (const item of params.rewardInfo) {\n    keys.push(\n      ...[\n        accountMeta({ pubkey: item.rewardMint, isWritable: false }),\n        accountMeta({ pubkey: item.rewardVault }),\n        accountMeta({ pubkey: item.userRewardToken }),\n      ],\n    );\n  }\n\n  return new TransactionInstruction({ programId: params.programId, keys, data });\n}\n","import { Connection, PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { GetMultipleAccountsInfoConfig, getMultipleAccountsInfoWithCustomFlags } from \"../../common/accountInfo\";\nimport { parseBigNumberish, BN_ONE, BN_TEN, toTotalPrice, toFraction } from \"../../common/bignumber\";\nimport { createLogger } from \"../../common/logger\";\nimport { PublicKeyish, validateAndParsePublicKey, RAYMint } from \"../../common/pubKey\";\nimport { findProgramAddress, ProgramAddress } from \"../../common/txTool\";\nimport { DateParam, isDateAfter, isDateBefore } from \"../../common/date\";\nimport { splAccountLayout } from \"../account/layout\";\nimport { SplAccount } from \"../account/types\";\n\nimport {\n  FARM_PROGRAMID_TO_VERSION,\n  FARM_VERSION_TO_LEDGER_LAYOUT,\n  FARM_VERSION_TO_PROGRAMID,\n  FARM_VERSION_TO_STATE_LAYOUT,\n  FarmVersion,\n} from \"./config\";\nimport { TokenAmount, Fraction, Price, Token } from \"../../module\";\nimport { FarmLedger, FarmLedgerLayout, FarmState, FarmStateLayout } from \"./layout\";\nimport { FarmPoolJsonInfo, FarmPoolKeys, FarmRewardInfo, FarmRewardInfoConfig, SdkParsedFarmInfo } from \"./type\";\nimport { jsonInfo2PoolKeys } from \"../../common\";\n\nconst logger = createLogger(\"Raydium.farm.util\");\ninterface AssociatedLedgerPoolAccount {\n  programId: PublicKey;\n  poolId: PublicKey;\n  mint: PublicKey;\n  type: \"lpVault\" | \"rewardVault\";\n}\n\nexport async function getAssociatedLedgerPoolAccount({\n  programId,\n  poolId,\n  mint,\n  type,\n}: AssociatedLedgerPoolAccount): Promise<PublicKey> {\n  const { publicKey } = await findProgramAddress(\n    [\n      poolId.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from(\n        type === \"lpVault\" ? \"lp_vault_associated_seed\" : type === \"rewardVault\" ? \"reward_vault_associated_seed\" : \"\",\n        \"utf-8\",\n      ),\n    ],\n    programId,\n  );\n  return publicKey;\n}\n\nexport function getFarmVersion(programId: PublicKeyish): FarmVersion {\n  const programIdPubKey = validateAndParsePublicKey({ publicKey: programId });\n  const programIdString = programIdPubKey.toBase58();\n\n  const version = FARM_PROGRAMID_TO_VERSION[programIdString];\n\n  return version;\n}\n\nexport async function getAssociatedLedgerAccount({\n  programId,\n  poolId,\n  owner,\n}: {\n  programId: PublicKey;\n  poolId: PublicKey;\n  owner: PublicKey;\n}): Promise<PublicKey> {\n  const { publicKey } = await findProgramAddress(\n    [\n      poolId.toBuffer(),\n      owner.toBuffer(),\n      Buffer.from(\n        getFarmVersion(programId) === 6 ? \"farmer_info_associated_seed\" : \"staker_info_v2_associated_seed\",\n        \"utf-8\",\n      ),\n    ],\n    programId,\n  );\n  return publicKey;\n}\n\nexport const getAssociatedAuthority = async ({\n  programId,\n  poolId,\n}: {\n  programId: PublicKey;\n  poolId: PublicKey;\n}): Promise<ProgramAddress> => await findProgramAddress([poolId.toBuffer()], programId);\n\nexport function getFarmProgramId(version: number): PublicKey | undefined {\n  const programId = FARM_VERSION_TO_PROGRAMID[version];\n\n  return programId;\n}\n\nexport function farmRewardInfoToConfig(data: FarmRewardInfo): FarmRewardInfoConfig {\n  return {\n    isSet: new BN(1),\n    rewardPerSecond: parseBigNumberish(data.rewardPerSecond),\n    rewardOpenTime: parseBigNumberish(data.rewardOpenTime),\n    rewardEndTime: parseBigNumberish(data.rewardEndTime),\n    rewardType: parseBigNumberish(data.rewardType),\n  };\n}\n\nexport function calFarmRewardAmount(data: FarmRewardInfo): BN {\n  return parseBigNumberish(data.rewardEndTime)\n    .sub(parseBigNumberish(data.rewardOpenTime))\n    .mul(parseBigNumberish(data.rewardPerSecond));\n}\n\nexport function getFarmLedgerLayout(version: number): FarmLedgerLayout | undefined {\n  const ledgerLayout = FARM_VERSION_TO_LEDGER_LAYOUT[version];\n  if (!ledgerLayout) logger.logWithError(\"invalid version\", version);\n  return ledgerLayout;\n}\n\nexport function getFarmStateLayout(version: number): FarmStateLayout | undefined {\n  const stateLayout = FARM_VERSION_TO_STATE_LAYOUT[version];\n  if (!stateLayout) logger.logWithError(\"invalid version\", version);\n  return stateLayout;\n}\n\nexport function updateFarmPoolInfo(\n  poolInfo: FarmState,\n  lpVault: SplAccount,\n  slot: number,\n  chainTime: number,\n): FarmState {\n  if (poolInfo.version === 3 || poolInfo.version === 5) {\n    if (poolInfo.lastSlot.gte(new BN(slot))) return poolInfo;\n\n    const spread = new BN(slot).sub(poolInfo.lastSlot);\n    poolInfo.lastSlot = new BN(slot);\n\n    for (const itemRewardInfo of poolInfo.rewardInfos) {\n      if (lpVault.amount.eq(new BN(0))) continue;\n\n      const reward = itemRewardInfo.perSlotReward.mul(spread);\n      itemRewardInfo.perShareReward = itemRewardInfo.perShareReward.add(\n        reward.mul(new BN(10).pow(new BN(poolInfo.version === 3 ? 9 : 15))).div(lpVault.amount),\n      );\n      itemRewardInfo.totalReward = itemRewardInfo.totalReward.add(reward);\n    }\n  } else if (poolInfo.version === 6) {\n    for (const itemRewardInfo of poolInfo.rewardInfos) {\n      if (itemRewardInfo.rewardState.eq(new BN(0))) continue;\n      const updateTime = BN.min(new BN(chainTime), itemRewardInfo.rewardEndTime);\n      if (itemRewardInfo.rewardOpenTime.gte(updateTime)) continue;\n      const spread = updateTime.sub(itemRewardInfo.rewardLastUpdateTime);\n      let reward = spread.mul(itemRewardInfo.rewardPerSecond);\n      const leftReward = itemRewardInfo.totalReward.sub(itemRewardInfo.totalRewardEmissioned);\n      if (leftReward.lt(reward)) {\n        reward = leftReward;\n        itemRewardInfo.rewardLastUpdateTime = itemRewardInfo.rewardLastUpdateTime.add(\n          leftReward.div(itemRewardInfo.rewardPerSecond),\n        );\n      } else {\n        itemRewardInfo.rewardLastUpdateTime = updateTime;\n      }\n      if (lpVault.amount.eq(new BN(0))) continue;\n      itemRewardInfo.accRewardPerShare = itemRewardInfo.accRewardPerShare.add(\n        reward.mul(poolInfo.rewardMultiplier).div(lpVault.amount),\n      );\n      itemRewardInfo.totalRewardEmissioned = itemRewardInfo.totalRewardEmissioned.add(reward);\n    }\n  }\n  return poolInfo;\n}\n\ninterface FarmPoolsInfo {\n  [id: string]: {\n    state: FarmState;\n    lpVault: SplAccount;\n    ledger?: FarmLedger;\n    wrapped?: { pendingRewards: BN[] };\n  };\n}\n\nexport interface FarmFetchMultipleInfoParams {\n  connection: Connection;\n  farmPools: FarmPoolJsonInfo[];\n  owner?: PublicKey;\n  config?: GetMultipleAccountsInfoConfig;\n}\n\nexport async function fetchMultipleFarmInfoAndUpdate({\n  connection,\n  farmPools,\n  owner,\n  config,\n}: FarmFetchMultipleInfoParams): Promise<FarmPoolsInfo> {\n  let hasNotV6Pool = false;\n  let hasV6Pool = false;\n  const tenBN = new BN(10);\n\n  const publicKeys: {\n    pubkey: PublicKey;\n    version: number;\n    key: \"state\" | \"lpVault\" | \"ledger\";\n    poolId: PublicKey;\n  }[] = [];\n\n  for (const poolInfo of farmPools) {\n    const pool = jsonInfo2PoolKeys(poolInfo);\n    if (pool.version === 6) hasV6Pool = true;\n    else hasNotV6Pool = true;\n\n    publicKeys.push(\n      {\n        pubkey: pool.id,\n        version: pool.version,\n        key: \"state\",\n        poolId: pool.id,\n      },\n      {\n        pubkey: pool.lpVault,\n        version: pool.version,\n        key: \"lpVault\",\n        poolId: pool.id,\n      },\n    );\n\n    if (owner) {\n      publicKeys.push({\n        pubkey: await getAssociatedLedgerAccount({ programId: pool.programId, poolId: pool.id, owner }),\n        version: pool.version,\n        key: \"ledger\",\n        poolId: pool.id,\n      });\n    }\n  }\n\n  const poolsInfo: FarmPoolsInfo = {};\n  const accountsInfo = await getMultipleAccountsInfoWithCustomFlags(connection, publicKeys, config);\n  for (const { pubkey, version, key, poolId, accountInfo } of accountsInfo) {\n    const _poolId = poolId.toBase58();\n    poolsInfo[_poolId] = { ...poolsInfo[_poolId] };\n    if (key === \"state\") {\n      const stateLayout = getFarmStateLayout(version);\n      if (!accountInfo || !accountInfo.data || accountInfo.data.length !== stateLayout!.span)\n        logger.logWithError(`invalid farm state account info, pools.id, ${pubkey}`);\n      poolsInfo[_poolId].state = stateLayout!.decode(accountInfo!.data);\n    } else if (key === \"lpVault\") {\n      if (!accountInfo || !accountInfo.data || accountInfo.data.length !== splAccountLayout.span)\n        logger.logWithError(`invalid farm lp vault account info, pools.lpVault, ${pubkey}`);\n      poolsInfo[_poolId].lpVault = splAccountLayout.decode(accountInfo!.data);\n    } else if (key === \"ledger\") {\n      const legerLayout = getFarmLedgerLayout(version)!;\n      if (accountInfo && accountInfo.data) {\n        if (accountInfo.data.length !== legerLayout.span)\n          logger.logWithError(`invalid farm ledger account info, ledger, ${pubkey}`);\n        poolsInfo[_poolId].ledger = legerLayout.decode(accountInfo.data);\n      }\n    }\n  }\n\n  const slot = hasV6Pool || hasNotV6Pool ? await connection.getSlot() : 0;\n  const chainTime = hasV6Pool ? (await connection.getBlockTime(slot)) ?? 0 : 0;\n\n  for (const poolId of Object.keys(poolsInfo)) {\n    poolsInfo[poolId].state = updateFarmPoolInfo(poolsInfo[poolId].state, poolsInfo[poolId].lpVault, slot, chainTime);\n  }\n\n  for (const [poolId, { state, ledger }] of Object.entries(poolsInfo)) {\n    if (ledger) {\n      const multiplier =\n        state.version === 6\n          ? state.rewardMultiplier\n          : state.rewardInfos.length === 1\n          ? tenBN.pow(new BN(9))\n          : tenBN.pow(new BN(15));\n\n      const pendingRewards = state.rewardInfos.map((rewardInfo, index) => {\n        const rewardDebt = ledger.rewardDebts[index];\n        const pendingReward = ledger.deposited\n          .mul(state.version === 6 ? rewardInfo.accRewardPerShare : rewardInfo.perShareReward)\n          .div(multiplier)\n          .sub(rewardDebt);\n\n        return pendingReward;\n      });\n\n      poolsInfo[poolId].wrapped = {\n        ...poolsInfo[poolId].wrapped,\n        pendingRewards,\n      };\n    }\n  }\n\n  return poolsInfo;\n}\n\n/** and state info  */\nexport async function mergeSdkFarmInfo(options: FarmFetchMultipleInfoParams): Promise<SdkParsedFarmInfo[]> {\n  const { farmPools } = options;\n  const rawInfos = await fetchMultipleFarmInfoAndUpdate(options);\n  const result = farmPools.map(\n    (pool, idx) =>\n      ({\n        ...farmPools[idx],\n        ...jsonInfo2PoolKeys(pool),\n        ...rawInfos[pool.id],\n        jsonInfo: farmPools[idx],\n      } as unknown as SdkParsedFarmInfo),\n  );\n  return result;\n}\n\nexport function judgeFarmType(\n  info: SdkParsedFarmInfo,\n  currentTime: DateParam = Date.now(),\n): \"closed pool\" | \"normal fusion pool\" | \"dual fusion pool\" | undefined | \"upcoming pool\" {\n  if (info.version === 6) {\n    const rewardInfos = info.state.rewardInfos;\n    if (rewardInfos.every(({ rewardOpenTime }) => isDateBefore(currentTime, rewardOpenTime.toNumber(), { unit: \"s\" })))\n      return \"upcoming pool\";\n    if (rewardInfos.every(({ rewardEndTime }) => isDateAfter(currentTime, rewardEndTime.toNumber(), { unit: \"s\" })))\n      return \"closed pool\";\n  } else {\n    const perSlotRewards = info.state.rewardInfos.map(({ perSlotReward }) => perSlotReward);\n    if (perSlotRewards.length === 2) {\n      // v5\n      if (String(perSlotRewards[0]) === \"0\" && String(perSlotRewards[1]) !== \"0\") {\n        return \"normal fusion pool\"; // reward xxx token\n      }\n      if (String(perSlotRewards[0]) !== \"0\" && String(perSlotRewards[1]) !== \"0\") {\n        return \"dual fusion pool\"; // reward ray and xxx token\n      }\n      if (String(perSlotRewards[0]) === \"0\" && String(perSlotRewards[1]) === \"0\") {\n        return \"closed pool\";\n      }\n    } else if (perSlotRewards.length === 1) {\n      // v3\n      if (String(perSlotRewards[0]) === \"0\") {\n        return \"closed pool\";\n      }\n    }\n  }\n}\n\nexport function whetherIsStakeFarmPool(info: SdkParsedFarmInfo): boolean {\n  return info.state.rewardInfos.length === 1 && String(info.lpMint) === RAYMint.toBase58();\n}\n\nexport function calculateFarmPoolAprList(\n  info: SdkParsedFarmInfo,\n  payload: {\n    currentBlockChainDate: Date;\n    blockSlotCountForSecond: number;\n    tvl: TokenAmount | undefined;\n    rewardTokens: (Token | undefined)[];\n    rewardTokenPrices: (Price | undefined)[];\n  },\n): (Fraction | undefined)[] {\n  if (info.version === 6) {\n    return info.state.rewardInfos.map(({ rewardPerSecond, rewardOpenTime, rewardEndTime }, idx) => {\n      // don't calculate upcoming reward || inactive reward\n      const isRewardBeforeStart = isDateBefore(payload.currentBlockChainDate, rewardOpenTime.toNumber(), { unit: \"s\" });\n      const isRewardAfterEnd = isDateAfter(payload.currentBlockChainDate, rewardEndTime.toNumber(), { unit: \"s\" });\n      if (isRewardBeforeStart || isRewardAfterEnd) return undefined;\n      const rewardToken = payload.rewardTokens[idx];\n      if (!rewardToken) return undefined;\n      const rewardTokenPrice = payload.rewardTokenPrices[idx];\n      if (!rewardTokenPrice) return undefined;\n      const rewardtotalPricePerYear = toTotalPrice(\n        new Fraction(rewardPerSecond, BN_ONE)\n          .div(BN_TEN.pow(new BN(rewardToken.decimals || 1)))\n          .mul(new BN(60 * 60 * 24 * 365)),\n        rewardTokenPrice,\n      );\n      if (!payload.tvl) return undefined;\n      // if tvl is zero, apr should be zero\n      const apr = payload.tvl.isZero() ? toFraction(0) : rewardtotalPricePerYear.div(payload.tvl ?? BN_ONE);\n      return apr;\n    });\n  } else {\n    const calcAprList = info.state.rewardInfos.map(({ perSlotReward }, idx) => {\n      const rewardToken = payload.rewardTokens[idx];\n      if (!rewardToken) return undefined;\n      const rewardTokenPrice = payload.rewardTokenPrices[idx];\n      if (!rewardTokenPrice) return undefined;\n      const rewardtotalPricePerYear = toTotalPrice(\n        new Fraction(perSlotReward, BN_ONE)\n          .div(BN_TEN.pow(new BN(rewardToken.decimals || 1)))\n          .mul(new BN(payload.blockSlotCountForSecond * 60 * 60 * 24 * 365)),\n        rewardTokenPrice,\n      );\n      if (!payload.tvl) return undefined;\n      // if tvl is zero, apr should be zero\n      const apr = payload.tvl.isZero() ? toFraction(0) : rewardtotalPricePerYear.div(payload.tvl ?? BN_ONE);\n      return apr;\n    });\n    return calcAprList;\n  }\n}\n"],"mappings":"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","names":[]}