{"version":3,"sources":["../../../src/raydium/farm/type.ts"],"sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { PublicKeyish } from \"../../common\";\nimport { BigNumberish } from \"../../common/bignumber\";\nimport { SplToken } from \"../token/type\";\nimport { Token, Price, Percent, TokenAmount } from \"../../module\";\nimport { SplAccount } from \"../account/types\";\nimport { UnionCover } from \"../type\";\n\nimport { poolTypeV6 } from \"./config\";\nimport { FarmStateV3, FarmStateV5, FarmStateV6 } from \"./layout\";\n\nexport type RewardType = keyof typeof poolTypeV6;\nexport interface APIRewardInfo {\n  rewardMint: string;\n  rewardVault: string;\n  rewardOpenTime: number;\n  rewardEndTime: number;\n  rewardPerSecond: string | number;\n  rewardSender?: string;\n  rewardType: string;\n}\n\nexport interface RewardInfoWithKey {\n  rewardMint: PublicKey;\n  rewardVault: PublicKey;\n  rewardOpenTime: number;\n  rewardEndTime: number;\n  rewardType: RewardType;\n  rewardPerSecond: string | number;\n  rewardSender?: PublicKey;\n}\nexport interface FarmPoolJsonInfo {\n  id: string;\n  lpMint: string;\n  lpVault: string;\n\n  baseMint: string;\n  quoteMint: string;\n  name: string;\n  symbol: string;\n\n  version: number;\n  programId: string;\n\n  authority: string;\n  creator?: string;\n  rewardInfos: APIRewardInfo[];\n  upcoming: boolean;\n\n  rewardPeriodMin?: number; // v6 '7-90 days's     7 * 24 * 60 * 60 seconds\n  rewardPeriodMax?: number; // v6 '7-90 days's     90 * 24 * 60 * 60 seconds\n  rewardPeriodExtend?: number; // v6 'end before 72h's    72 * 60 * 60 seconds\n\n  local: boolean; // only if it is in localstorage(create just by user)\n  category: \"stake\" | \"raydium\" | \"fusion\" | \"ecosystem\"; // add by UI for unify the interface\n}\nexport interface FarmRewardInfo {\n  rewardMint: PublicKey;\n  rewardPerSecond: BigNumberish;\n  rewardOpenTime: BigNumberish;\n  rewardEndTime: BigNumberish;\n  rewardType: RewardType;\n}\n\nexport interface FarmRewardInfoConfig {\n  isSet: BN;\n  rewardPerSecond: BN;\n  rewardOpenTime: BN;\n  rewardEndTime: BN;\n  rewardType: BN;\n}\n\nexport interface RewardInfoKey {\n  rewardMint: PublicKey;\n  rewardVault: PublicKey;\n  userRewardToken: PublicKey;\n}\n\nexport interface FarmPoolInfoV6 {\n  version: number;\n  programId: PublicKey;\n\n  lpMint: PublicKey;\n\n  rewardInfos: FarmRewardInfo[];\n\n  lockInfo: {\n    lockMint: PublicKey;\n    lockVault: PublicKey;\n  };\n}\n\nexport interface CreateFarm {\n  poolId: PublicKeyish;\n  rewardInfos: FarmRewardInfo[];\n  payer?: PublicKey;\n}\n\nexport interface UpdateFarmReward {\n  farmId: PublicKeyish;\n  newRewardInfo: FarmRewardInfo;\n  payer?: PublicKey;\n}\nexport interface FarmDWParam {\n  farmId: PublicKey;\n  amount: BigNumberish;\n}\n\n/* ================= pool keys ================= */\nexport type FarmPoolKeys = {\n  readonly id: PublicKey;\n  readonly lpMint: PublicKey;\n  readonly version: number;\n  readonly programId: PublicKey;\n  readonly authority: PublicKey;\n  readonly lpVault: PublicKey;\n  readonly upcoming: boolean;\n  readonly rewardInfos: (\n    | {\n        readonly rewardMint: PublicKey;\n        readonly rewardVault: PublicKey;\n      }\n    | {\n        readonly rewardMint: PublicKey;\n        readonly rewardVault: PublicKey;\n        readonly rewardOpenTime: number;\n        readonly rewardEndTime: number;\n        readonly rewardPerSecond: number;\n        readonly rewardType: RewardType;\n      }\n  )[];\n};\n\ntype SdkParsedFarmInfoBase = {\n  jsonInfo: FarmPoolJsonInfo;\n  id: PublicKey;\n  lpMint: PublicKey;\n  programId: PublicKey;\n  authority: PublicKey;\n  lpVault: SplAccount;\n  rewardInfos: RewardInfoWithKey[];\n  /** only when user have deposited and connected wallet */\n  ledger?: {\n    id: PublicKey;\n    owner: PublicKey;\n    state: BN;\n    deposited: BN;\n    rewardDebts: BN[];\n  };\n  /** only when user have deposited and connected wallet */\n  wrapped?: {\n    pendingRewards: BN[];\n  };\n};\n\nexport type SdkParsedFarmInfo = UnionCover<\n  FarmPoolJsonInfo,\n  SdkParsedFarmInfoBase &\n    ({ version: 6; state: FarmStateV6 } | { version: 3; state: FarmStateV3 } | { version: 5; state: FarmStateV5 })\n>;\n\n/** computed by other info  */\n\nexport type HydratedRewardInfo = {\n  userHavedReward: boolean;\n  apr: Percent | undefined; // farm's rewards apr\n  token: SplToken | Token | undefined;\n  /** only when user have deposited and connected wallet */\n  userPendingReward: TokenAmount | undefined;\n  version: 3 | 5 | 6;\n  rewardVault: PublicKey;\n  openTime?: Date; // v6\n  endTime?: Date; // v6\n\n  isOptionToken?: boolean; // v6\n  isRewarding?: boolean; // v6\n  isRewardBeforeStart?: boolean; // v6\n  isRewardEnded?: boolean; // v6\n  isRwardingBeforeEnd72h?: boolean; // v6\n\n  rewardPeriodMin?: number; // v6 '7-90 days's     7 * 24 * 60 * 60 seconds\n  rewardPeriodMax?: number; // v6 '7-90 days's     90 * 24 * 60 * 60 seconds\n  rewardPeriodExtend?: number; // v6 'end before 72h's    72 * 60 * 60 seconds\n\n  claimableRewards?: TokenAmount; // v6\n  owner?: string; // v6\n  perSecond?: string | number; // v6\n};\n\nexport type HydratedFarmInfo = SdkParsedFarmInfo & {\n  lp: SplToken | Token | /* staking pool */ undefined;\n  lpPrice: Price | undefined;\n\n  base: SplToken | Token | undefined;\n  quote: SplToken | Token | undefined;\n  name: string;\n\n  ammId: string | undefined;\n\n  /** only for v3/v5 */\n  isDualFusionPool: boolean;\n  isNormalFusionPool: boolean;\n  isClosedPool: boolean;\n  isStakePool: boolean;\n  isUpcomingPool: boolean;\n  isStablePool: boolean;\n  /** new pool shoud sort in highest  */\n  isNewPool: boolean;\n\n  /** 7d */\n  totalApr7d: Percent | undefined;\n  /** 7d; undefined means couldn't find this token by known tokenList */\n  raydiumFeeApr7d: Percent | undefined; // raydium fee for each transaction\n\n  totalApr30d: Percent | undefined;\n  /** undefined means couldn't find this token by known tokenList */\n  raydiumFeeApr30d: Percent | undefined; // raydium fee for each transaction\n\n  totalApr24h: Percent | undefined;\n  /** undefined means couldn't find this token by known tokenList */\n  raydiumFeeApr24h: Percent | undefined; // raydium fee for each transaction\n\n  tvl: TokenAmount | undefined;\n  userHasStaked: boolean;\n  rewards: HydratedRewardInfo[];\n  userStakedLpAmount: TokenAmount | undefined;\n  stakedLpAmount: TokenAmount | undefined;\n};\n"],"mappings":"kWAAA","names":[]}