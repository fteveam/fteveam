var _=Object.create;var u=Object.defineProperty,k=Object.defineProperties,S=Object.getOwnPropertyDescriptor,q=Object.getOwnPropertyDescriptors,J=Object.getOwnPropertyNames,y=Object.getOwnPropertySymbols,O=Object.getPrototypeOf,d=Object.prototype.hasOwnProperty,j=Object.prototype.propertyIsEnumerable;var b=(t,e,o)=>e in t?u(t,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[e]=o,m=(t,e)=>{for(var o in e||(e={}))d.call(e,o)&&b(t,o,e[o]);if(y)for(var o of y(e))j.call(e,o)&&b(t,o,e[o]);return t},h=(t,e)=>k(t,q(e));var G=(t,e)=>{for(var o in e)u(t,o,{get:e[o],enumerable:!0})},R=(t,e,o,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of J(e))!d.call(t,n)&&n!==o&&u(t,n,{get:()=>e[n],enumerable:!(r=S(e,n))||r.enumerable});return t};var A=(t,e,o)=>(o=t!=null?_(O(t)):{},R(e||!t||!t.__esModule?u(o,"default",{value:t,enumerable:!0}):o,t)),K=t=>R(u({},"__esModule",{value:!0}),t);var Y={};G(Y,{getMultipleAccountsInfo:()=>C,getMultipleAccountsInfoWithCustomFlags:()=>F});module.exports=K(Y);var w=require("@solana/web3.js");function x(t,e=1,o=[]){let r=[...t];if(e<=0)return o;for(;r.length;)o.push(r.splice(0,e));return o}var a=require("lodash"),M=A(require("pino")),v=A(require("pino-pretty")),I={},H={},N=(0,v.default)({colorize:!0,levelFirst:!0,translateTime:"SYS:yyyymmdd HH:MM:ss.l"}),$=(0,M.default)({base:null,level:"silent"},N);function L(t){let e=(0,a.get)(I,t);if(!e){let o=(0,a.get)(H,t);e=$.child({name:t},{level:o}),(0,a.set)(I,t,e)}return e.logWithError=(...o)=>{let r=o.map(n=>typeof n=="object"?JSON.stringify(n):n).join(", ");throw new Error(r)},e}var g=L("Raydium_accountInfo_util");async function C(t,e,o){let{batchRequest:r,commitment:n}=m({batchRequest:!1},o),l=x(e,100),p=new Array(l.length).fill([]);if(r){let i=l.map(s=>{let f=t._buildArgs([s.map(c=>c.toBase58())],n,"base64");return{methodName:"getMultipleAccounts",args:f}});p=(await t._rpcBatchRequest(i)).map(s=>(s.error&&g.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${s.error.message}`),s.result.value.map(f=>{if(f){let{data:c,executable:E,lamports:P,owner:W,rentEpoch:B}=f;return c.length!==2&&c[1]!=="base64"&&g.logWithError("info must be base64 encoded, RPC_ERROR"),{data:Buffer.from(c[0],"base64"),executable:E,lamports:P,owner:new w.PublicKey(W),rentEpoch:B}}return null})))}else try{p=await Promise.all(l.map(i=>t.getMultipleAccountsInfo(i,n)))}catch(i){i instanceof Error&&g.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${i.message}`)}return p.flat()}async function F(t,e,o){let r=await C(t,e.map(n=>n.pubkey),o);return e.map((n,l)=>h(m({},n),{accountInfo:r[l]}))}0&&(module.exports={getMultipleAccountsInfo,getMultipleAccountsInfoWithCustomFlags});
//# sourceMappingURL=accountInfo.js.map