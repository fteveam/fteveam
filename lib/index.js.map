{"version":3,"sources":["../src/index.ts","../src/api/api.ts","../src/common/logger.ts","../src/common/utility.ts","../src/module/amount.ts","../src/common/bignumber.ts","../src/module/formatter.ts","../src/module/fraction.ts","../src/raydium/token/constant.ts","../src/module/token.ts","../src/common/pubKey.ts","../src/module/currency.ts","../src/module/percent.ts","../src/module/price.ts","../src/common/txTool.ts","../src/common/owner.ts","../src/common/lodash.ts","../src/common/accountInfo.ts","../src/common/fractionUtil.ts","../src/common/date.ts","../src/raydium/raydium.ts","../src/common/error.ts","../src/raydium/account/account.ts","../src/raydium/moduleBase.ts","../src/raydium/account/instruction.ts","../src/marshmallow/index.ts","../src/marshmallow/buffer-layout.ts","../src/raydium/account/layout.ts","../src/raydium/account/util.ts","../src/raydium/farm/farm.ts","../src/raydium/farm/config.ts","../src/raydium/farm/layout.ts","../src/raydium/farm/instruction.ts","../src/raydium/farm/util.ts","../src/raydium/liquidity/liquidity.ts","../src/raydium/liquidity/constant.ts","../src/raydium/liquidity/instruction.ts","../src/raydium/liquidity/layout.ts","../src/raydium/liquidity/stable.ts","../src/raydium/liquidity/util.ts","../src/raydium/liquidity/serum.ts","../src/raydium/route/route.ts","../src/raydium/route/constant.ts","../src/raydium/route/instruction.ts","../src/raydium/route/layout.ts","../src/raydium/route/util.ts","../src/raydium/token/token.ts","../src/raydium/token/layout.ts","../src/raydium/token/util.ts","../src/raydium/trade/util.ts","../src/raydium/trade/trade.ts","../src/raydium/type.ts"],"sourcesContent":["export * from \"./api\";\nexport * from \"./common\";\nexport * from \"./raydium\";\nexport * from \"./solana\";\nexport * from \"./module\";\nexport * from \"./marshmallow\";\n","import axios, { AxiosInstance } from \"axios\";\n\nimport { createLogger, sleep } from \"../common\";\nimport { Raydium } from \"../raydium\";\nimport { Cluster } from \"../solana\";\n\nimport { ApiFarmPools, ApiJsonPairInfo, ApiLiquidityPools, ApiTokens } from \"./type\";\n\nconst logger = createLogger(\"Raydium_Api\");\n\nexport async function endlessRetry<T>(name: string, call: () => Promise<T>, interval = 1000): Promise<T> {\n  let result: T | undefined;\n\n  while (result == undefined) {\n    try {\n      logger.debug(`Request ${name} through endlessRetry`);\n      result = await call();\n    } catch (err) {\n      logger.error(`Request ${name} failed, retry after ${interval} ms`, err);\n      await sleep(interval);\n    }\n  }\n\n  return result;\n}\n\nexport interface ApiProps {\n  cluster: Cluster;\n  timeout: number;\n}\n\nexport class Api {\n  public cluster: Cluster;\n\n  public api: AxiosInstance;\n\n  constructor({ cluster, timeout }: ApiProps) {\n    this.cluster = cluster;\n\n    this.api = axios.create({ baseURL: \"https://api.raydium.io/v2\", timeout });\n\n    this.api.interceptors.request.use(\n      (config) => {\n        // before request\n        const { method, baseURL, url } = config;\n\n        logger.debug(`${method?.toUpperCase()} ${baseURL}${url}`);\n\n        return config;\n      },\n      (error) => {\n        // request error\n        logger.error(`Request failed`);\n\n        return Promise.reject(error);\n      },\n    );\n    this.api.interceptors.response.use(\n      (response) => {\n        // 2xx\n        const { config, data, status } = response;\n        const { method, baseURL, url } = config;\n\n        logger.debug(`${method?.toUpperCase()} ${baseURL}${url}  ${status}`);\n\n        return data;\n      },\n      (error) => {\n        // https://axios-http.com/docs/handling_errors\n        // not 2xx\n        const { config, response = {} } = error;\n        const { status } = response;\n        const { method, baseURL, url } = config;\n\n        logger.error(`${method.toUpperCase()} ${baseURL}${url} ${status || error.message}`);\n\n        return Promise.reject(error);\n      },\n    );\n  }\n\n  async getTokens(): Promise<ApiTokens> {\n    return this.api.get(`/sdk/token/raydium.mainnet.json`);\n  }\n\n  async getLiquidityPools(): Promise<ApiLiquidityPools> {\n    return this.api.get(`/sdk/liquidity/${this.cluster}.json`);\n  }\n\n  async getPairsInfo(): Promise<ApiJsonPairInfo[]> {\n    return this.api.get(\"https://api.raydium.io/v2/main/pairs\");\n  }\n\n  async getFarmPools(): Promise<ApiFarmPools> {\n    return this.api.get(`/sdk/farm-v2/${this.cluster}.json`);\n  }\n\n  async getCoingeckoPrice(coingeckoIds: string[]): Promise<Record<string, { usd?: number }>> {\n    return this.api.get(\n      `https://api.coingecko.com/api/v3/simple/price?ids=${coingeckoIds.join(\",\")}&vs_currencies=usd`,\n    );\n  }\n\n  async getRaydiumTokenPrice(): Promise<Record<string, number>> {\n    return this.api.get(\"https://api.raydium.io/v2/main/price\");\n  }\n\n  async getBlockSlotCountForSecond(endpointUrl?: string): Promise<number> {\n    if (!endpointUrl) return 2;\n    const res: {\n      id: string;\n      jsonrpc: string;\n      result: { numSlots: number; numTransactions: number; samplePeriodSecs: number; slot: number }[];\n    } = await this.api.post(endpointUrl, {\n      id: \"getRecentPerformanceSamples\",\n      jsonrpc: \"2.0\",\n      method: \"getRecentPerformanceSamples\",\n      params: [4],\n    });\n    const slotList = res.result.map((data) => data.numSlots);\n    return slotList.reduce((a, b) => a + b, 0) / slotList.length / 60;\n  }\n}\n","import { get, set } from \"lodash\";\nimport dayjs from \"dayjs\";\nimport utc from \"dayjs/plugin/utc\";\ndayjs.extend(utc);\n\nexport type ModuleName = \"Common.Api\";\n\nexport enum LogLevel {\n  Error,\n  Warning,\n  Info,\n  Debug,\n}\nexport class Logger {\n  private logLevel: LogLevel;\n  private name: string;\n  constructor(params: { name: string; logLevel?: LogLevel }) {\n    this.logLevel = params.logLevel !== undefined ? params.logLevel : LogLevel.Debug;\n    this.name = params.name;\n  }\n\n  set level(logLevel: LogLevel) {\n    this.logLevel = logLevel;\n  }\n  get time(): string {\n    return dayjs().utc().format(\"YYYY/MM/DD HH:mm:ss UTC\");\n  }\n  get moduleName(): string {\n    return this.name;\n  }\n\n  private isLogLevel(level: LogLevel): boolean {\n    return level <= this.logLevel;\n  }\n\n  public error(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Error)) return this;\n    console.error(this.time, this.name, \"sdk logger error\", ...props);\n    return this;\n  }\n\n  public logWithError(...props): Logger {\n    // this.error(...props)\n    const msg = props.map((arg) => (typeof arg === \"object\" ? JSON.stringify(arg) : arg)).join(\", \");\n    throw new Error(msg);\n  }\n\n  public warning(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Warning)) return this;\n    console.warn(this.time, this.name, \"sdk logger warning\", ...props);\n    return this;\n  }\n\n  public info(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Info)) return this;\n    console.info(this.time, this.name, \"sdk logger info\", ...props);\n    return this;\n  }\n\n  public debug(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Debug)) return this;\n    console.debug(this.time, this.name, \"sdk logger debug\", ...props);\n    return this;\n  }\n}\n\nconst moduleLoggers: { [key in ModuleName]?: Logger } = {};\nconst moduleLevels: { [key in ModuleName]?: LogLevel } = {};\n\nexport function createLogger(moduleName: string): Logger {\n  let logger = get(moduleLoggers, moduleName);\n  if (!logger) {\n    // default level is error\n    const logLevel = get(moduleLevels, moduleName);\n\n    logger = new Logger({ name: moduleName, logLevel });\n    set(moduleLoggers, moduleName, logger);\n  }\n\n  return logger;\n}\n\nexport function setLoggerLevel(moduleName: string, level: LogLevel): void {\n  set(moduleLevels, moduleName, level);\n\n  const logger = get(moduleLoggers, moduleName);\n  if (logger) logger.level = level;\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { Fraction, Percent, Price, Token, TokenAmount } from \"../module\";\nimport { ReplaceType } from \"../raydium/type\";\n\nimport { tryParsePublicKey } from \"./pubKey\";\n\nexport async function sleep(ms: number): Promise<void> {\n  new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function getTimestamp(): number {\n  return new Date().getTime();\n}\n\nconst baseInnerObjects = [Token, TokenAmount, PublicKey, Fraction, BN, Price, Percent];\n\nfunction notInnerObject(v: unknown): v is Record<string, any> {\n  return typeof v === \"object\" && v !== null && !baseInnerObjects.some((o) => typeof o === \"object\" && v instanceof o);\n}\n\nexport function jsonInfo2PoolKeys<T>(jsonInfo: T): ReplaceType<T, string, PublicKey> {\n  // @ts-expect-error no need type for inner code\n  return typeof jsonInfo === \"string\"\n    ? tryParsePublicKey(jsonInfo)\n    : Array.isArray(jsonInfo)\n    ? jsonInfo.map((k) => jsonInfo2PoolKeys(k))\n    : notInnerObject(jsonInfo)\n    ? Object.fromEntries(Object.entries(jsonInfo).map(([k, v]) => [k, jsonInfo2PoolKeys(v)]))\n    : jsonInfo;\n}\n","import _Big from \"big.js\";\nimport BN from \"bn.js\";\n\nimport { BigNumberish, BN_TEN, parseBigNumberish, Rounding } from \"../common/bignumber\";\nimport { createLogger, Logger } from \"../common/logger\";\n\nimport toFormat, { WrappedBig } from \"./formatter\";\nimport { Fraction } from \"./fraction\";\nimport { Token } from \"./token\";\n\nconst logger = createLogger(\"Raydium_amount\");\n\nconst Big = toFormat(_Big);\ntype Big = WrappedBig;\n\nexport function splitNumber(num: string, decimals: number): [string, string] {\n  let integral = \"0\";\n  let fractional = \"0\";\n\n  if (num.includes(\".\")) {\n    const splited = num.split(\".\");\n    if (splited.length === 2) {\n      [integral, fractional] = splited;\n      fractional = fractional.padEnd(decimals, \"0\");\n    } else {\n      logger.logWithError(`invalid number string, num: ${num}`);\n    }\n  } else {\n    integral = num;\n  }\n\n  // fix decimals is 0\n  return [integral, fractional.slice(0, decimals) || fractional];\n}\n\nexport class TokenAmount extends Fraction {\n  public readonly token: Token;\n  protected logger: Logger;\n\n  public constructor(token: Token, amount: BigNumberish, isRaw = true, name?: string) {\n    let parsedAmount = new BN(0);\n    const multiplier = BN_TEN.pow(new BN(token.decimals));\n\n    if (isRaw) {\n      parsedAmount = parseBigNumberish(amount);\n    } else {\n      let integralAmount = new BN(0);\n      let fractionalAmount = new BN(0);\n\n      // parse fractional string\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\n        const [integral, fractional] = splitNumber(amount.toString(), token.decimals);\n        integralAmount = parseBigNumberish(integral);\n        fractionalAmount = parseBigNumberish(fractional);\n      }\n\n      integralAmount = integralAmount.mul(multiplier);\n      parsedAmount = integralAmount.add(fractionalAmount);\n    }\n\n    super(parsedAmount, multiplier);\n    this.logger = createLogger(name || \"Amount\");\n    this.token = token;\n  }\n\n  public get raw(): BN {\n    return this.numerator;\n  }\n  public isZero(): boolean {\n    return this.raw.isZero();\n  }\n  public gt(other: TokenAmount): boolean {\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"gt token not equals\");\n    return this.raw.gt(other.raw);\n  }\n\n  /**\n   * a less than b\n   */\n  public lt(other: TokenAmount): boolean {\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"lt token not equals\");\n    return this.raw.lt(other.raw);\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"add token not equals\");\n    return new TokenAmount(this.token, this.raw.add(other.raw));\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"sub token not equals\");\n    return new TokenAmount(this.token, this.raw.sub(other.raw));\n  }\n\n  public toSignificant(\n    significantDigits = this.token.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding);\n  }\n\n  /**\n   * To fixed\n   *\n   * @example\n   * ```\n   * 1 -> 1.000000000\n   * 1.234 -> 1.234000000\n   * 1.123456789876543 -> 1.123456789\n   * ```\n   */\n  public toFixed(\n    decimalPlaces = this.token.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    if (decimalPlaces > this.token.decimals) this.logger.logWithError(\"decimals overflow\");\n    return super.toFixed(decimalPlaces, format, rounding);\n  }\n\n  /**\n   * To exact\n   *\n   * @example\n   * ```\n   * 1 -> 1\n   * 1.234 -> 1.234\n   * 1.123456789876543 -> 1.123456789\n   * ```\n   */\n  public toExact(format: object = { groupSeparator: \"\" }): string {\n    Big.DP = this.token.decimals;\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  }\n}\n\n// export class TokenAmount extends CurrencyAmount {\n//   public readonly token: Token;\n\n//   public constructor(token: Token, amount: BigNumberish, isRaw = true) {\n//     super(token, amount, isRaw);\n//     this.token = token;\n//   }\n\n//   public add(other: TokenAmount): TokenAmount {\n//     if (!currencyEquals(this.token, other.token)) this.logger.logWithError(\"add token not equals\");\n//     return new TokenAmount(this.token, this.raw.add(other.raw));\n//   }\n\n//   public subtract(other: TokenAmount): TokenAmount {\n//     if (!currencyEquals(this.token, other.token)) this.logger.logWithError(\"sub token not equals\");\n//     return new TokenAmount(this.token, this.raw.sub(other.raw));\n//   }\n// }\n","import BN from \"bn.js\";\n\nimport { Fraction, Percent, Price, TokenAmount, Token } from \"../module\";\nimport { SplToken, TokenJson } from \"../raydium/token/type\";\nimport { createLogger } from \"./logger\";\n\nconst logger = createLogger(\"Raydium_bignumber\");\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const BN_ZERO = new BN(0);\nexport const BN_ONE = new BN(1);\nexport const BN_TWO = new BN(2);\nexport const BN_THREE = new BN(3);\nexport const BN_FIVE = new BN(5);\nexport const BN_TEN = new BN(10);\nexport const BN_100 = new BN(100);\nexport const BN_1000 = new BN(1000);\nexport const BN_10000 = new BN(10000);\nexport type BigNumberish = BN | string | number | bigint;\nexport type Numberish = number | string | bigint | Fraction | BN;\n\nconst MAX_SAFE = 0x1fffffffffffff;\n\nexport function parseBigNumberish(value: BigNumberish): BN {\n  // BN\n  if (value instanceof BN) {\n    return value;\n  }\n\n  if (typeof value === \"string\") {\n    if (value.match(/^-?[0-9]+$/)) {\n      return new BN(value);\n    }\n    logger.logWithError(`invalid BigNumberish string: ${value}`);\n  }\n\n  if (typeof value === \"number\") {\n    if (value % 1) {\n      logger.logWithError(`BigNumberish number underflow: ${value}`);\n    }\n\n    if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n      logger.logWithError(`BigNumberish number overflow: ${value}`);\n    }\n\n    return new BN(String(value));\n  }\n\n  if (typeof value === \"bigint\") {\n    return new BN(value.toString());\n  }\n  logger.logWithError(`invalid BigNumberish value: ${value}`);\n  return new BN(0); // never reach, because logWithError will throw error\n}\n\nexport function tenExponential(shift: BigNumberish): BN {\n  return BN_TEN.pow(parseBigNumberish(shift));\n}\n\n/**\n *\n * @example\n * getIntInfo(0.34) //=> { numerator: '34', denominator: '100'}\n * getIntInfo('0.34') //=> { numerator: '34', denominator: '100'}\n */\nexport function parseNumberInfo(n: Numberish | undefined): {\n  denominator: string;\n  numerator: string;\n  sign?: string;\n  int?: string;\n  dec?: string;\n} {\n  if (n === undefined) return { denominator: \"1\", numerator: \"0\" };\n  if (n instanceof BN) {\n    return { numerator: n.toString(), denominator: \"1\" };\n  }\n\n  if (n instanceof Fraction) {\n    return { denominator: n.denominator.toString(), numerator: n.numerator.toString() };\n  }\n\n  const s = String(n);\n  const [, sign = \"\", int = \"\", dec = \"\"] = s.replace(\",\", \"\").match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\n  const denominator = \"1\" + \"0\".repeat(dec.length);\n  const numerator = sign + (int === \"0\" ? \"\" : int) + dec || \"0\";\n  return { denominator, numerator, sign, int, dec };\n}\n\n// round up\nexport function divCeil(a: BN, b: BN): BN {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const dm = a.divmod(b);\n\n  // Fast case - exact division\n  if (dm.mod.isZero()) return dm.div;\n\n  // Round up\n  return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n}\n\nexport function shakeFractionDecimal(n: Fraction): string {\n  const [, sign = \"\", int = \"\"] = n.toFixed(2).match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\n  return `${sign}${int}`;\n}\n\nexport function toBN(n: Numberish, decimal: BigNumberish = 0): BN {\n  if (n instanceof BN) return n;\n  return new BN(shakeFractionDecimal(toFraction(n).mul(BN_TEN.pow(new BN(String(decimal))))));\n}\n\nexport function toFraction(value: Numberish): Fraction {\n  //  to complete math format(may have decimal), not int\n  if (value instanceof Percent) return new Fraction(value.numerator, value.denominator);\n\n  if (value instanceof Price) return value.adjusted;\n\n  // to complete math format(may have decimal), not BN\n  if (value instanceof TokenAmount)\n    try {\n      return toFraction(value.toExact());\n    } catch {\n      return new Fraction(BN_ZERO);\n    }\n\n  // do not ideal with other fraction value\n  if (value instanceof Fraction) return value;\n\n  // wrap to Fraction\n  const n = String(value);\n  const details = parseNumberInfo(n);\n  return new Fraction(details.numerator, details.denominator);\n}\n\n/**\n * @example\n * toPercent(3.14) // => Percent { 314.00% }\n * toPercent(3.14, { alreadyDecimaled: true }) // => Percent {3.14%}\n */\nexport function toPercent(\n  n: Numberish,\n  options?: { /* usually used for backend data */ alreadyDecimaled?: boolean },\n): Percent {\n  const { numerator, denominator } = parseNumberInfo(n);\n  return new Percent(new BN(numerator), new BN(denominator).mul(options?.alreadyDecimaled ? new BN(100) : new BN(1)));\n}\n\nexport function toTokenPrice(params: {\n  token: TokenJson | Token | SplToken;\n  numberPrice: Numberish;\n  decimalDone?: boolean;\n}): Price {\n  const { token, numberPrice, decimalDone } = params;\n  const usdCurrency = new Token({ mint: \"\", decimals: 6, symbol: \"usd\", name: \"usd\", skipMint: true });\n  const { numerator, denominator } = parseNumberInfo(numberPrice);\n  const parsedNumerator = decimalDone ? new BN(numerator).mul(BN_TEN.pow(new BN(token.decimals))) : numerator;\n  const parsedDenominator = new BN(denominator).mul(BN_TEN.pow(new BN(usdCurrency.decimals)));\n\n  return new Price({\n    baseToken: usdCurrency,\n    denominator: parsedDenominator.toString(),\n    quoteToken: new Token({ ...token, skipMint: true, mint: \"\" }),\n    numerator: parsedNumerator.toString(),\n  });\n}\n\nexport function mul(a: Numberish | undefined, b: Numberish | undefined): Fraction | undefined {\n  if (a == null || b == null) return undefined;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.mul(fb);\n}\n\nexport function toUsdCurrency(amount: Numberish): TokenAmount {\n  const usdCurrency = new Token({ mint: \"\", decimals: 6, symbol: \"usd\", name: \"usd\", skipMint: true });\n  const amountBigNumber = toBN(mul(amount, 10 ** usdCurrency.decimals)!);\n  return new TokenAmount(usdCurrency, amountBigNumber);\n}\n\nexport function toTotalPrice(amount: Numberish | undefined, price: Price | undefined): TokenAmount {\n  if (!price || !amount) return toUsdCurrency(0);\n  return toUsdCurrency(mul(amount, price)!);\n}\n","import Big, { BigConstructor, BigSource, RoundingMode } from \"big.js\";\nimport Decimal, { Config, Numeric } from \"decimal.js-light\";\nimport _toFarmat from \"toformat\";\n\ntype TakeStatic<T> = { [P in keyof T]: T[P] };\ninterface FormatOptions {\n  decimalSeparator?: string;\n  groupSeparator?: string;\n  groupSize?: number;\n  fractionGroupSeparator?: string;\n  fractionGroupSize?: number;\n}\ninterface WrappedBigConstructor extends TakeStatic<BigConstructor> {\n  new (value: BigSource): WrappedBig;\n  (value: BigSource): WrappedBig;\n  (): WrappedBigConstructor;\n\n  format: FormatOptions;\n}\nexport interface WrappedBig extends Big {\n  add(n: BigSource): WrappedBig;\n  abs(): WrappedBig;\n  div(n: BigSource): WrappedBig;\n  minus(n: BigSource): WrappedBig;\n  mod(n: BigSource): WrappedBig;\n  mul(n: BigSource): WrappedBig;\n  plus(n: BigSource): WrappedBig;\n  pow(exp: number): WrappedBig;\n  round(dp?: number, rm?: RoundingMode): WrappedBig;\n  sqrt(): WrappedBig;\n  sub(n: BigSource): WrappedBig;\n  times(n: BigSource): WrappedBig;\n  toFormat(): string;\n  toFormat(options: FormatOptions): string;\n  toFormat(fractionLength: number): string;\n  toFormat(fractionLength: number, options: FormatOptions): string;\n  toFormat(fractionLength: number, missionUnknown: number): string;\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\n}\n\ntype DecimalConstructor = typeof Decimal;\ninterface WrappedDecimalConstructor extends TakeStatic<DecimalConstructor> {\n  new (value: Numeric): WrappedDecimal;\n  clone(config?: Config): WrappedDecimalConstructor;\n  config(config: Config): WrappedDecimal;\n  set(config: Config): WrappedDecimal;\n  format: FormatOptions;\n}\nexport interface WrappedDecimal extends Decimal {\n  absoluteValue(): WrappedDecimal;\n  abs(): WrappedDecimal;\n  dividedBy(y: Numeric): WrappedDecimal;\n  div(y: Numeric): WrappedDecimal;\n  dividedToIntegerBy(y: Numeric): WrappedDecimal;\n  idiv(y: Numeric): WrappedDecimal;\n  logarithm(base?: Numeric): WrappedDecimal;\n  log(base?: Numeric): WrappedDecimal;\n  minus(y: Numeric): WrappedDecimal;\n  sub(y: Numeric): WrappedDecimal;\n  modulo(y: Numeric): WrappedDecimal;\n  mod(y: Numeric): WrappedDecimal;\n  naturalExponetial(): WrappedDecimal;\n  exp(): WrappedDecimal;\n  naturalLogarithm(): WrappedDecimal;\n  ln(): WrappedDecimal;\n  negated(): WrappedDecimal;\n  neg(): WrappedDecimal;\n  plus(y: Numeric): WrappedDecimal;\n  add(y: Numeric): WrappedDecimal;\n  squareRoot(): WrappedDecimal;\n  sqrt(): WrappedDecimal;\n  times(y: Numeric): WrappedDecimal;\n  mul(y: Numeric): WrappedDecimal;\n  toWrappedDecimalPlaces(dp?: number, rm?: number): WrappedDecimal;\n  todp(dp?: number, rm?: number): WrappedDecimal;\n  toInteger(): WrappedDecimal;\n  toint(): WrappedDecimal;\n  toPower(y: Numeric): WrappedDecimal;\n  pow(y: Numeric): WrappedDecimal;\n  toSignificantDigits(sd?: number, rm?: number): WrappedDecimal;\n  tosd(sd?: number, rm?: number): WrappedDecimal;\n  toFormat(options: FormatOptions): string;\n  toFormat(fractionLength: number): string;\n  toFormat(fractionLength: number, options: FormatOptions): string;\n  toFormat(fractionLength: number, missionUnknown: number): string;\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\n}\n\nconst toFormat: {\n  (fn: BigConstructor): WrappedBigConstructor;\n  (fn: DecimalConstructor): WrappedDecimalConstructor;\n} = _toFarmat;\nexport default toFormat;\n","import _Big from \"big.js\";\nimport BN from \"bn.js\";\nimport _Decimal from \"decimal.js-light\";\n\nimport { BigNumberish, BN_ONE, parseBigNumberish, Rounding } from \"../common/bignumber\";\nimport { createLogger } from \"../common/logger\";\n\nimport toFormat, { WrappedBig } from \"./formatter\";\n\nconst logger = createLogger(\"module/fraction\");\n\nconst Big = toFormat(_Big);\ntype Big = WrappedBig;\n\nconst Decimal = toFormat(_Decimal);\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n};\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: _Big.roundDown,\n  [Rounding.ROUND_HALF_UP]: _Big.roundHalfUp,\n  [Rounding.ROUND_UP]: _Big.roundUp,\n};\n\nexport class Fraction {\n  public readonly numerator: BN;\n  public readonly denominator: BN;\n\n  public constructor(numerator: BigNumberish, denominator: BigNumberish = BN_ONE) {\n    this.numerator = parseBigNumberish(numerator);\n    this.denominator = parseBigNumberish(denominator);\n  }\n\n  public get quotient(): BN {\n    return this.numerator.div(this.denominator);\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator);\n  }\n\n  public add(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    if (this.denominator.eq(otherParsed.denominator)) {\n      return new Fraction(this.numerator.add(otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(\n      this.numerator.mul(otherParsed.denominator).add(otherParsed.numerator.mul(this.denominator)),\n      this.denominator.mul(otherParsed.denominator),\n    );\n  }\n\n  public sub(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    if (this.denominator.eq(otherParsed.denominator)) {\n      return new Fraction(this.numerator.sub(otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(\n      this.numerator.mul(otherParsed.denominator).sub(otherParsed.numerator.mul(this.denominator)),\n      this.denominator.mul(otherParsed.denominator),\n    );\n  }\n\n  public mul(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    return new Fraction(this.numerator.mul(otherParsed.numerator), this.denominator.mul(otherParsed.denominator));\n  }\n\n  public div(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    return new Fraction(this.numerator.mul(otherParsed.denominator), this.denominator.mul(otherParsed.numerator));\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: \"\" },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    if (!Number.isInteger(significantDigits)) logger.logWithError(`${significantDigits} is not an integer.`);\n    if (significantDigits <= 0) logger.logWithError(`${significantDigits} is not positive.`);\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: \"\" },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    if (!Number.isInteger(decimalPlaces)) logger.logWithError(`${decimalPlaces} is not an integer.`);\n    if (decimalPlaces < 0) logger.logWithError(`${decimalPlaces} is negative.`);\n\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding] || 1;\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  }\n\n  public isZero(): boolean {\n    return this.numerator.isZero();\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { NativeTokenInfo, SplTokenInfo } from \"./type\";\n\nexport const TOKEN_SOL: NativeTokenInfo = {\n  symbol: \"SOL\",\n  name: \"Solana\",\n  decimals: 9,\n};\n\nexport const TOKEN_WSOL: SplTokenInfo = {\n  symbol: \"WSOL\",\n  name: \"Wrapped SOL\",\n  mint: \"So11111111111111111111111111111111111111112\",\n  decimals: 9,\n  extensions: {\n    coingeckoId: \"solana\",\n  },\n};\n\nexport const quantumSOLHydratedTokenJsonInfo = {\n  isQuantumSOL: true,\n  isLp: false,\n  official: true,\n  mint: new PublicKey(TOKEN_WSOL.mint),\n  decimals: 9,\n  symbol: \"SOL\",\n  id: \"sol\",\n  name: \"solana\",\n  icon: `https://img.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\n  extensions: {\n    coingeckoId: \"solana\",\n  },\n};\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { PublicKeyish, SOLMint, validateAndParsePublicKey } from \"../common/pubKey\";\nimport { TOKEN_WSOL } from \"../raydium/token/constant\";\n\n/**\n * A token is any fungible financial instrument on Solana, including SOL and all SPL tokens.\n */\nexport interface TokenProps {\n  mint: PublicKeyish;\n  decimals: number;\n  symbol?: string;\n  name?: string;\n  skipMint?: boolean;\n}\n\nexport class Token {\n  public readonly symbol?: string;\n  public readonly name?: string;\n  public readonly decimals: number;\n\n  public readonly mint: PublicKey;\n  public static readonly WSOL: Token = new Token(TOKEN_WSOL);\n\n  /**\n   *\n   * @param mint - pass \"sol\" as mint will auto generate wsol token config\n   */\n  public constructor({ mint, decimals, symbol = \"UNKNOWN\", name = \"UNKNOWN\", skipMint = false }: TokenProps) {\n    if (mint === SOLMint.toBase58() || (mint instanceof PublicKey && SOLMint.equals(mint))) {\n      this.decimals = TOKEN_WSOL.decimals;\n      this.symbol = TOKEN_WSOL.symbol;\n      this.name = TOKEN_WSOL.name;\n      this.mint = new PublicKey(TOKEN_WSOL.mint);\n      return;\n    }\n\n    this.decimals = decimals;\n    this.symbol = symbol;\n    this.name = name;\n    this.mint = skipMint ? PublicKey.default : validateAndParsePublicKey({ publicKey: mint });\n  }\n\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true;\n    }\n    return this.mint.equals(other.mint);\n  }\n}\n","import { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\n\ninterface AccountMetaProps {\n  pubkey: PublicKey;\n  isSigner?: boolean;\n  isWritable?: boolean;\n}\n\nexport function accountMeta({ pubkey, isSigner = false, isWritable = true }: AccountMetaProps): AccountMeta {\n  return {\n    pubkey,\n    isWritable,\n    isSigner,\n  };\n}\n\nexport const commonSystemAccountMeta = [\n  accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n  accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n  accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\n];\n\nexport type PublicKeyish = PublicKey | string;\n\nexport function validateAndParsePublicKey({\n  publicKey,\n  transformSol,\n}: {\n  publicKey: PublicKeyish;\n  transformSol?: boolean;\n}): PublicKey {\n  if (publicKey instanceof PublicKey) {\n    if (transformSol && publicKey.equals(SOLMint)) return WSOLMint;\n    return publicKey;\n  }\n\n  if (transformSol && publicKey === SOLMint.toBase58()) return WSOLMint;\n\n  if (typeof publicKey === \"string\") {\n    try {\n      const key = new PublicKey(publicKey);\n      return key;\n    } catch {\n      throw new Error(\"invalid public key\");\n    }\n  }\n\n  throw new Error(\"invalid public key\");\n}\n\nexport function tryParsePublicKey(v: string): PublicKey | string {\n  try {\n    return new PublicKey(v);\n  } catch (e) {\n    return v;\n  }\n}\n\nexport const RAYMint = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\nexport const PAIMint = new PublicKey(\"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\");\nexport const SRMMint = new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\");\nexport const USDCMint = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\nexport const USDTMint = new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\");\nexport const mSOLMint = new PublicKey(\"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\");\nexport const stSOLMint = new PublicKey(\"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\");\nexport const USDHMint = new PublicKey(\"USDH1SM1ojwWUga67PGrgFWUHibbjqMvuMaDkRJTgkX\");\nexport const NRVMint = new PublicKey(\"NRVwhjBQiUPYtfDT5zRBVJajzFQHaBUNtC7SNVvqRFa\");\nexport const ANAMint = new PublicKey(\"ANAxByE6G2WjFp7A4NqtWYXb3mgruyzZYg3spfxe6Lbo\");\nexport const ETHMint = new PublicKey(\"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\");\nexport const WSOLMint = new PublicKey(\"So11111111111111111111111111111111111111112\");\nexport const SOLMint = PublicKey.default;\n","import { TOKEN_SOL } from \"../raydium/token/constant\";\n\nimport { Token } from \"./token\";\n\ninterface CurrencyProps {\n  decimals: number;\n  symbol?: string;\n  name?: string;\n}\n/**\n * A currency is any fungible financial instrument on Solana, including SOL and all SPL tokens.\n * The only instance of the base class `Currency` is SOL.\n */\nexport class Currency {\n  public readonly symbol?: string;\n  public readonly name?: string;\n  public readonly decimals: number;\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly SOL: Currency = new Currency(TOKEN_SOL);\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.SOL`.\n   * @param decimals - decimals of the currency\n   * @param symbol - symbol of the currency\n   * @param name - name of the currency\n   */\n  public constructor({ decimals, symbol = \"UNKNOWN\", name = \"UNKNOWN\" }: CurrencyProps) {\n    this.decimals = decimals;\n    this.symbol = symbol;\n    this.name = name;\n  }\n\n  public equals(other: Currency): boolean {\n    return this === other;\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB);\n  } else if (currencyA instanceof Token || currencyB instanceof Token) {\n    return false;\n  } else {\n    return currencyA === currencyB;\n  }\n}\n","import { BN_100, Rounding } from \"../common/bignumber\";\n\nimport { Fraction } from \"./fraction\";\n\nexport const _100_PERCENT = new Fraction(BN_100);\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits = 5, format?: object, rounding?: Rounding): string {\n    return this.mul(_100_PERCENT).toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(decimalPlaces = 2, format?: object, rounding?: Rounding): string {\n    return this.mul(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\n  }\n}\n","import { BigNumberish, Rounding, tenExponential } from \"../common/bignumber\";\nimport { createLogger } from \"../common/logger\";\n\nimport { Fraction } from \"./fraction\";\nimport { Token } from \"./token\";\n\nconst logger = createLogger(\"Raydium_price\");\n\ninterface PriceProps {\n  baseToken: Token;\n  denominator: BigNumberish;\n  quoteToken: Token;\n  numerator: BigNumberish;\n}\n\nexport class Price extends Fraction {\n  public readonly baseToken: Token; // input i.e. denominator\n  public readonly quoteToken: Token; // output i.e. numerator\n  // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n  public readonly scalar: Fraction;\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(params: PriceProps) {\n    const { baseToken, quoteToken, numerator, denominator } = params;\n    super(numerator, denominator);\n\n    this.baseToken = baseToken;\n    this.quoteToken = quoteToken;\n    this.scalar = new Fraction(tenExponential(baseToken.decimals), tenExponential(quoteToken.decimals));\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n  public get adjusted(): Fraction {\n    return super.mul(this.scalar);\n  }\n\n  public invert(): Price {\n    return new Price({\n      baseToken: this.quoteToken,\n      quoteToken: this.baseToken,\n      denominator: this.numerator,\n      numerator: this.denominator,\n    });\n  }\n\n  public mul(other: Price): Price {\n    if (this.quoteToken !== other.baseToken) logger.logWithError(\"mul token not equals\");\n\n    const fraction = super.mul(other);\n    return new Price({\n      baseToken: this.baseToken,\n      quoteToken: other.quoteToken,\n      denominator: fraction.denominator,\n      numerator: fraction.numerator,\n    });\n  }\n\n  public toSignificant(significantDigits = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(decimalPlaces = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  }\n}\n","import {\n  Connection,\n  PACKET_DATA_SIZE,\n  PublicKey,\n  RpcResponseAndContext,\n  sendAndConfirmTransaction,\n  Signer,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nimport { SignAllTransactions } from \"../raydium/type\";\n\nimport { createLogger } from \"./logger\";\nimport { Owner } from \"./owner\";\n\nconst logger = createLogger(\"Raydium_txTool\");\ninterface TxBuilderInit {\n  connection: Connection;\n  feePayer: PublicKey;\n  owner?: Owner;\n  signAllTransactions?: SignAllTransactions;\n}\n\nexport interface AddInstructionParam {\n  instructions?: TransactionInstruction[];\n  endInstructions?: TransactionInstruction[];\n  signers?: Signer[];\n}\n\nexport interface TxBuildData {\n  transaction: Transaction;\n  signers: Signer[];\n  execute: () => Promise<string>;\n  extInfo: Record<string, any>;\n}\n\nexport interface MultiTxBuildData {\n  transactions: Transaction[];\n  signers: Signer[][];\n  execute: () => Promise<string[]>;\n  extInfo: Record<string, any>;\n}\n\nexport class TxBuilder {\n  private connection: Connection;\n  private owner?: Owner;\n  private instructions: TransactionInstruction[] = [];\n  private endInstructions: TransactionInstruction[] = [];\n  private signers: Signer[] = [];\n  private feePayer: PublicKey;\n  private signAllTransactions?: SignAllTransactions;\n\n  constructor(params: TxBuilderInit) {\n    this.connection = params.connection;\n    this.feePayer = params.feePayer;\n    this.signAllTransactions = params.signAllTransactions;\n    this.owner = params.owner;\n  }\n\n  get AllTxData(): {\n    instructions: TransactionInstruction[];\n    endInstructions: TransactionInstruction[];\n    signers: Signer[];\n  } {\n    return {\n      instructions: this.instructions,\n      endInstructions: this.endInstructions,\n      signers: this.signers,\n    };\n  }\n\n  get allInstructions(): TransactionInstruction[] {\n    return [...this.instructions, ...this.endInstructions];\n  }\n\n  public addInstruction({ instructions = [], endInstructions = [], signers = [] }: AddInstructionParam): TxBuilder {\n    this.instructions.push(...instructions);\n    this.endInstructions.push(...endInstructions);\n    this.signers.push(...signers);\n    return this;\n  }\n\n  public build(extInfo?: Record<string, any>): TxBuildData {\n    const transaction = new Transaction();\n    if (this.allInstructions.length) transaction.add(...this.allInstructions);\n    transaction.feePayer = this.feePayer;\n\n    return {\n      transaction,\n      signers: this.signers,\n      execute: async (): Promise<string> => {\n        const recentBlockHash = await getRecentBlockHash(this.connection);\n        transaction.recentBlockhash = recentBlockHash;\n        if (this.owner?.isKeyPair) {\n          return sendAndConfirmTransaction(this.connection, transaction, this.signers);\n        }\n        if (this.signAllTransactions) {\n          if (this.signers.length) transaction.partialSign(...this.signers);\n          const txs = await this.signAllTransactions([transaction]);\n          return await this.connection.sendRawTransaction(txs[0].serialize(), { skipPreflight: true });\n        }\n        throw new Error(\"please connect wallet first\");\n      },\n      extInfo: extInfo || {},\n    };\n  }\n\n  public buildMultiTx(params: { extraPreBuildData?: TxBuildData[]; extInfo?: Record<string, any> }): MultiTxBuildData {\n    const { extraPreBuildData = [], extInfo } = params;\n    const { transaction } = this.build(extInfo);\n\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.transaction.instructions.length > 0);\n\n    const allTransactions: Transaction[] = [...filterExtraBuildData.map((data) => data.transaction), transaction];\n    const allSigners: Signer[][] = [...filterExtraBuildData.map((data) => data.signers), this.signers];\n\n    return {\n      transactions: allTransactions,\n      signers: allSigners,\n      execute: async (): Promise<string[]> => {\n        const recentBlockHash = await getRecentBlockHash(this.connection);\n        if (this.owner?.isKeyPair) {\n          return await Promise.all(\n            allTransactions.map(async (tx, idx) => {\n              tx.recentBlockhash = recentBlockHash;\n              return await sendAndConfirmTransaction(this.connection, tx, allSigners[idx]);\n            }),\n          );\n        }\n        if (this.signAllTransactions) {\n          const partialSignedTxs = allTransactions.map((tx, idx) => {\n            tx.recentBlockhash = recentBlockHash;\n            if (allSigners[idx].length) tx.partialSign(...allSigners[idx]);\n            return tx;\n          });\n          const signedTxs = await this.signAllTransactions(partialSignedTxs);\n\n          const txIds: string[] = [];\n          for (let i = 0; i < signedTxs.length; i += 1) {\n            const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight: true });\n            txIds.push(txId);\n          }\n          return txIds;\n        }\n        throw new Error(\"please connect wallet first\");\n      },\n      extInfo: extInfo || {},\n    };\n  }\n}\n\nexport async function getRecentBlockHash(connection: Connection): Promise<string> {\n  try {\n    return (await connection.getLatestBlockhash?.())?.blockhash || (await connection.getRecentBlockhash()).blockhash;\n  } catch {\n    return (await connection.getRecentBlockhash()).blockhash;\n  }\n}\n\n/**\n * Forecast transaction size\n */\nexport function forecastTransactionSize(instructions: TransactionInstruction[], signers: PublicKey[]): number {\n  if (instructions.length < 1) logger.logWithError(`no instructions provided: ${instructions.toString()}`);\n  if (signers.length < 1) logger.logWithError(`no signers provided:, ${signers.toString()}`);\n\n  const transaction = new Transaction();\n  transaction.recentBlockhash = \"11111111111111111111111111111111\";\n  transaction.feePayer = signers[0];\n  transaction.add(...instructions);\n\n  const message = transaction.compileMessage().serialize();\n  // SIGNATURE_LENGTH = 64\n  const transactionLength = signers.length + signers.length * 64 + message.length;\n  return transactionLength;\n}\n\n/**\n * Simulates multiple instruction\n */\nexport async function simulateMultipleInstruction(\n  connection: Connection,\n  instructions: TransactionInstruction[],\n  keyword: string,\n): Promise<any> {\n  const feePayer = new PublicKey(\"RaydiumSimuLateTransaction11111111111111111\");\n\n  const transactions: Transaction[] = [];\n\n  let transaction = new Transaction();\n  transaction.feePayer = feePayer;\n\n  for (const instruction of instructions) {\n    if (forecastTransactionSize([...transaction.instructions, instruction], [feePayer]) > PACKET_DATA_SIZE) {\n      transactions.push(transaction);\n      transaction = new Transaction();\n      transaction.feePayer = feePayer;\n      transaction.add(instruction);\n    } else {\n      transaction.add(instruction);\n    }\n  }\n  if (transaction.instructions.length > 0) {\n    transactions.push(transaction);\n  }\n\n  let results: RpcResponseAndContext<SimulatedTransactionResponse>[] = [];\n\n  try {\n    results = await Promise.all(transactions.map((transaction) => connection.simulateTransaction(transaction)));\n  } catch (error) {\n    if (error instanceof Error) {\n      logger.logWithError(`failed to simulate for instructions, RPC_ERROR, ${error.message}`);\n    }\n  }\n\n  const logs: string[] = [];\n  for (const result of results) {\n    const { value } = result;\n    logger.debug(`simulate result: ${JSON.stringify(result)}`);\n\n    if (value.logs) {\n      const filteredLog = value.logs.filter((log) => log && log.includes(keyword));\n      logger.debug(`filteredLog: ${JSON.stringify(logs)}`);\n      if (!filteredLog.length) logger.logWithError(` \"simulate log not match keyword, keyword: ${keyword}`);\n      logs.push(...filteredLog);\n    }\n  }\n\n  return logs;\n}\n\nexport function parseSimulateLogToJson(log: string, keyword: string): any {\n  const results = log.match(/{[\"\\w:,]+}/g);\n  if (!results || results.length !== 1) {\n    return logger.logWithError(`simulate log fail to match json, keyword: ${keyword}`);\n  }\n\n  return results[0];\n}\n\nexport function parseSimulateValue(log: string, key: string): any {\n  const reg = new RegExp(`\"${key}\":(\\\\d+)`, \"g\");\n\n  const results = reg.exec(log);\n  if (!results || results.length !== 2) {\n    return logger.logWithError(`simulate log fail to match key\", key: ${key}`);\n  }\n\n  return results[1];\n}\n\nexport interface ProgramAddress {\n  publicKey: PublicKey;\n  nonce: number;\n}\nexport async function findProgramAddress(\n  seeds: Array<Buffer | Uint8Array>,\n  programId: PublicKey,\n): Promise<ProgramAddress> {\n  const [publicKey, nonce] = await PublicKey.findProgramAddress(seeds, programId);\n  return { publicKey, nonce };\n}\n","import { Keypair, PublicKey, Signer } from \"@solana/web3.js\";\n\ntype _Owner = Keypair | PublicKey;\n\nexport class Owner {\n  private readonly _owner: _Owner;\n\n  constructor(owner: _Owner) {\n    this._owner = owner;\n  }\n\n  get publicKey(): PublicKey {\n    if (Owner.isKeyPair(this._owner)) {\n      return this._owner.publicKey;\n    }\n\n    return this._owner;\n  }\n\n  get signer(): Signer | undefined {\n    return Owner.isKeyPair(this._owner) ? this._owner : undefined;\n  }\n\n  get isKeyPair(): boolean {\n    return Owner.isKeyPair(this._owner);\n  }\n\n  get isPublicKey(): boolean {\n    return Owner.isPublicKey(this._owner);\n  }\n\n  static isKeyPair(owner: _Owner): owner is Keypair {\n    return (owner as Keypair).secretKey !== undefined;\n  }\n\n  static isPublicKey(owner: _Owner): owner is PublicKey {\n    return !Owner.isKeyPair(owner);\n  }\n}\n","/**\n * https://youmightnotneed.com/lodash/\n */\n\nexport function chunkArray<T>(arr: T[], chunkSize = 1, cache: T[][] = []): T[][] {\n  const tmp = [...arr];\n  if (chunkSize <= 0) return cache;\n  while (tmp.length) cache.push(tmp.splice(0, chunkSize));\n  return cache;\n}\n\nexport function intersection<T>(arr: T[], ...args: T[][]): T[] {\n  return arr.filter((item) => args.every((arr) => arr.includes(item)));\n}\n\nexport function xor<T>(arr: T[], ...args: T[][]): T[] {\n  return arr.filter((item) => args.every((arr) => !arr.includes(item)));\n}\n\nexport function uniq<T>(arr: T[]): T[] {\n  return [...new Set(arr)];\n}\n","import { AccountInfo, Commitment, Connection, PublicKey } from \"@solana/web3.js\";\n\nimport { chunkArray } from \"./lodash\";\nimport { createLogger } from \"./logger\";\n\ninterface MultipleAccountsJsonRpcResponse {\n  jsonrpc: string;\n  id: string;\n  error?: {\n    code: number;\n    message: string;\n  };\n  result: {\n    context: { slot: number };\n    value: { data: Array<string>; executable: boolean; lamports: number; owner: string; rentEpoch: number }[];\n  };\n}\n\nexport interface GetMultipleAccountsInfoConfig {\n  batchRequest?: boolean;\n  commitment?: Commitment;\n}\n\nconst logger = createLogger(\"Raydium_accountInfo_util\");\n\nexport async function getMultipleAccountsInfo(\n  connection: Connection,\n  publicKeys: PublicKey[],\n  config?: GetMultipleAccountsInfoConfig,\n): Promise<(AccountInfo<Buffer> | null)[]> {\n  const { batchRequest, commitment } = {\n    batchRequest: false,\n    ...config,\n  };\n\n  const chunkedKeys = chunkArray(publicKeys, 100);\n  let results: (AccountInfo<Buffer> | null)[][] = new Array(chunkedKeys.length).fill([]);\n\n  if (batchRequest) {\n    const batch = chunkedKeys.map((keys) => {\n      const args = connection._buildArgs([keys.map((key) => key.toBase58())], commitment, \"base64\");\n      return {\n        methodName: \"getMultipleAccounts\",\n        args,\n      };\n    });\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const unsafeResponse: MultipleAccountsJsonRpcResponse[] = await connection._rpcBatchRequest(batch);\n    results = unsafeResponse.map((unsafeRes: MultipleAccountsJsonRpcResponse) => {\n      if (unsafeRes.error)\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${unsafeRes.error.message}`);\n\n      return unsafeRes.result.value.map((accountInfo) => {\n        if (accountInfo) {\n          const { data, executable, lamports, owner, rentEpoch } = accountInfo;\n\n          if (data.length !== 2 && data[1] !== \"base64\") logger.logWithError(`info must be base64 encoded, RPC_ERROR`);\n\n          return {\n            data: Buffer.from(data[0], \"base64\"),\n            executable,\n            lamports,\n            owner: new PublicKey(owner),\n            rentEpoch,\n          };\n        }\n        return null;\n      });\n    });\n  } else {\n    try {\n      results = (await Promise.all(\n        chunkedKeys.map((keys) => connection.getMultipleAccountsInfo(keys, commitment)),\n      )) as (AccountInfo<Buffer> | null)[][];\n    } catch (error) {\n      if (error instanceof Error) {\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${error.message}`);\n      }\n    }\n  }\n\n  return results.flat();\n}\n\nexport async function getMultipleAccountsInfoWithCustomFlags<T extends { pubkey: PublicKey }>(\n  connection: Connection,\n  publicKeysWithCustomFlag: T[],\n  config?: GetMultipleAccountsInfoConfig,\n): Promise<({ accountInfo: AccountInfo<Buffer> | null } & T)[]> {\n  const multipleAccountsInfo = await getMultipleAccountsInfo(\n    connection,\n    publicKeysWithCustomFlag.map((o) => o.pubkey),\n    config,\n  );\n\n  return publicKeysWithCustomFlag.map((o, idx) => ({ ...o, accountInfo: multipleAccountsInfo[idx] }));\n}\n","import { Fraction, Percent, Price, TokenAmount } from \"../module\";\n\nimport { BN_ZERO, Numberish, parseNumberInfo } from \"./bignumber\";\n\nexport default function toFraction(value: Numberish): Fraction {\n  //  to complete math format(may have decimal), not int\n  if (value instanceof Percent) return new Fraction(value.numerator, value.denominator);\n\n  if (value instanceof Price) return value.adjusted;\n\n  // to complete math format(may have decimal), not BN\n  if (value instanceof TokenAmount)\n    try {\n      return toFraction(value.toExact());\n    } catch {\n      return new Fraction(BN_ZERO);\n    }\n\n  // do not ideal with other fraction value\n  if (value instanceof Fraction) return value;\n\n  // wrap to Fraction\n  const n = String(value);\n  const details = parseNumberInfo(n);\n  return new Fraction(details.numerator, details.denominator);\n}\n\nexport function toFractionWithDecimals(value: Numberish): { fr: Fraction; decimals?: number } {\n  //  to complete math format(may have decimal), not int\n  if (value instanceof Percent) return { fr: new Fraction(value.numerator, value.denominator) };\n\n  if (value instanceof Price) return { fr: value.adjusted };\n\n  // to complete math format(may have decimal), not BN\n  if (value instanceof TokenAmount) return { fr: toFraction(value.toExact()), decimals: value.token.decimals };\n\n  // do not ideal with other fraction value\n  if (value instanceof Fraction) return { fr: value };\n\n  // wrap to Fraction\n  const n = String(value);\n  const details = parseNumberInfo(n);\n  return { fr: new Fraction(details.numerator, details.denominator), decimals: details.dec?.length };\n}\n\nexport function lt(a: Numberish | undefined, b: Numberish | undefined): boolean {\n  if (a == null || b == null) return false;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  fa.sub(fb).numerator;\n  return fa.sub(fb).numerator.lt(BN_ZERO);\n}\n\nexport function gt(a: Numberish | undefined, b: Numberish | undefined): boolean {\n  if (a == null || b == null) return false;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.sub(fb).numerator.gt(BN_ZERO);\n}\n\nexport function lte(a: Numberish | undefined, b: Numberish | undefined): boolean {\n  if (a == null || b == null) return false;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.sub(fb).numerator.lte(BN_ZERO);\n}\n\nexport function gte(a: Numberish | undefined, b: Numberish | undefined): boolean {\n  if (a == null || b == null) return false;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.sub(fb).numerator.gte(BN_ZERO);\n}\n\nexport function eq(a: Numberish | undefined, b: Numberish | undefined): boolean {\n  if (a == null || b == null) return false;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.sub(fb).numerator.eq(BN_ZERO);\n}\n\nexport function div(a: Numberish | undefined, b: Numberish | undefined): Fraction | undefined {\n  if (a == null || b == null) return undefined;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  try {\n    return fa.div(fb); // if fb is zero , operation will throw error\n  } catch {\n    return fa;\n  }\n}\n\nexport function sub(a: Numberish | undefined, b: Numberish | undefined): Fraction | undefined {\n  if (a == null || b == null) return undefined;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.sub(fb);\n}\n\nexport function isMeaningfulNumber(n: Numberish | undefined): n is Numberish {\n  if (n == null) return false;\n  return !eq(n, 0);\n}\n\nexport function getMax(a: Numberish, b: Numberish): Numberish {\n  return gt(b, a) ? b : a;\n}\n","export type TimeStamp = string | number | Date;\n\nexport const isNumber = (val): boolean => typeof val === \"number\";\nexport type DateParam = string | number | Date | undefined;\n\nexport const getDate = (value?: DateParam): Date => (value ? new Date(value) : new Date());\nexport const getTime = (value?: DateParam): number => getDate(value).getTime();\n\n/** A must be milliseconds */\nexport function isDateBefore(timestampA: TimeStamp, timestampB: TimeStamp, options?: { unit?: \"ms\" | \"s\" }): boolean {\n  const realTimestampB = isNumber(timestampB)\n    ? (timestampB as number) * (options?.unit === \"s\" ? 1000 : 1)\n    : timestampB;\n  return new Date(timestampA).getTime() <= realTimestampB;\n}\n\n/** A must be milliseconds */\nexport function isDateAfter(timestampA: TimeStamp, timestampB: TimeStamp, options?: { unit?: \"ms\" | \"s\" }): boolean {\n  const realTimestampB = isNumber(timestampB)\n    ? (timestampB as number) * (options?.unit === \"s\" ? 1000 : 1)\n    : timestampB;\n  return new Date(timestampA).getTime() > realTimestampB;\n}\n\nexport function offsetDateTime(\n  baseDate: DateParam,\n  offset: {\n    days?: number;\n    hours?: number;\n    minutes?: number;\n    seconds?: number;\n    milliseconds?: number;\n  },\n): Date {\n  const timestamp = getTime(baseDate);\n  const offsetedTimestamp =\n    timestamp +\n    (offset.days ? offset.days * 24 * 60 * 60 * 1000 : 0) +\n    (offset.hours ? offset.hours * 60 * 60 * 1000 : 0) +\n    (offset.minutes ? offset.minutes * 60 * 1000 : 0) +\n    (offset.seconds ? offset.seconds * 1000 : 0) +\n    (offset.milliseconds ? offset.milliseconds : 0);\n  return getDate(offsetedTimestamp);\n}\n","import { Connection, Keypair, PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { merge } from \"lodash\";\n\nimport { Api, ApiFarmPools, ApiJsonPairInfo, ApiLiquidityPools, ApiTokens } from \"../api\";\nimport { EMPTY_CONNECTION, EMPTY_OWNER } from \"../common/error\";\nimport { createLogger, Logger } from \"../common/logger\";\nimport { Owner } from \"../common/owner\";\nimport { PublicKeyish } from \"../common/pubKey\";\nimport { TokenAmount } from \"../module/amount\";\nimport { Token } from \"../module/token\";\nimport { Cluster } from \"../solana\";\n\nimport Account, { TokenAccountDataProp } from \"./account/account\";\nimport Farm from \"./farm/farm\";\nimport Liquidity from \"./liquidity/liquidity\";\nimport Route from \"./route/route\";\nimport TokenModule, { MintToTokenAmount } from \"./token/token\";\nimport Trade from \"./trade/trade\";\nimport { SignAllTransactions } from \"./type\";\n\nexport interface RaydiumLoadParams extends TokenAccountDataProp, Omit<RaydiumApiBatchRequestParams, \"api\"> {\n  /* ================= solana ================= */\n  // solana web3 connection\n  connection: Connection;\n  // solana cluster/network/env\n  cluster?: Cluster;\n  // user public key\n  owner?: PublicKey | Keypair;\n  /* ================= api ================= */\n  // api request interval in ms, -1 means never request again, 0 means always use fresh data, default is 5 mins (5 * 60 * 1000)\n  apiRequestInterval?: number;\n  // api request timeout in ms, default is 10 secs (10 * 1000)\n  apiRequestTimeout?: number;\n  apiCacheTime?: number;\n  signAllTransactions?: SignAllTransactions;\n}\n\nexport interface RaydiumApiBatchRequestParams {\n  api: Api;\n  defaultApiTokens?: ApiTokens;\n  defaultApiLiquidityPools?: ApiLiquidityPools;\n  defaultApiFarmPools?: ApiFarmPools;\n  defaultApiPairsInfo?: ApiJsonPairInfo[];\n}\n\nexport type RaydiumConstructorParams = Required<RaydiumLoadParams> & RaydiumApiBatchRequestParams;\n\ninterface ApiData {\n  tokens?: { fetched: number; data: ApiTokens };\n  liquidityPools?: { fetched: number; data: ApiLiquidityPools };\n  liquidityPairsInfo?: { fetched: number; data: ApiJsonPairInfo[] };\n  farmPools?: { fetched: number; data: ApiFarmPools };\n}\n\nconst apiCacheData: ApiData = {};\nexport class Raydium {\n  public cluster: Cluster;\n  public farm: Farm;\n  public account: Account;\n  public liquidity: Liquidity;\n  public token: TokenModule;\n  public trade: Trade;\n  public route: Route;\n  public rawBalances: Map<string, string> = new Map();\n  public apiData: ApiData;\n\n  private _connection: Connection;\n  private _owner: Owner | undefined;\n  public api: Api;\n  private _apiCacheTime: number;\n  private _signAllTransactions?: SignAllTransactions;\n  private logger: Logger;\n\n  constructor(config: RaydiumConstructorParams) {\n    const {\n      connection,\n      cluster,\n      owner,\n      api,\n      defaultApiTokens,\n      defaultApiLiquidityPools,\n      defaultApiFarmPools,\n      defaultApiPairsInfo,\n      apiCacheTime,\n    } = config;\n\n    this._connection = connection;\n    this.cluster = cluster;\n    this._owner = owner ? new Owner(owner) : undefined;\n    this._signAllTransactions = config.signAllTransactions;\n\n    this.api = api;\n    this._apiCacheTime = apiCacheTime || 5 * 60 * 1000;\n    this.logger = createLogger(\"Raydium\");\n    this.farm = new Farm({ scope: this, moduleName: \"Raydium_Farm\" });\n    this.account = new Account({\n      scope: this,\n      moduleName: \"Raydium_Account\",\n      tokenAccounts: config.tokenAccounts,\n      tokenAccountRawInfos: config.tokenAccountRawInfos,\n    });\n    this.liquidity = new Liquidity({ scope: this, moduleName: \"Raydium_Liquidity\" });\n    this.token = new TokenModule({ scope: this, moduleName: \"Raydium_token\" });\n    this.trade = new Trade({ scope: this, moduleName: \"Raydium_trade\" });\n    this.route = new Route({ scope: this, moduleName: \"Raydium_route\" });\n\n    const now = new Date().getTime();\n\n    const [apiTokensCache, apiLiquidityPoolsCache, apiFarmPoolsCache, apiLiquidityPairsInfoCache] = [\n      defaultApiTokens ? { fetched: now, data: defaultApiTokens } : apiCacheData.tokens,\n      defaultApiLiquidityPools ? { fetched: now, data: defaultApiLiquidityPools } : apiCacheData.liquidityPools,\n      defaultApiFarmPools ? { fetched: now, data: defaultApiFarmPools } : apiCacheData.farmPools,\n      defaultApiPairsInfo ? { fetched: now, data: defaultApiPairsInfo } : apiCacheData.liquidityPairsInfo,\n    ];\n\n    this.apiData = {\n      ...(apiTokensCache ? { tokens: apiTokensCache } : {}),\n      ...(apiLiquidityPoolsCache ? { liquidityPools: apiLiquidityPoolsCache } : {}),\n      ...(apiFarmPoolsCache ? { farmPools: apiFarmPoolsCache } : {}),\n      ...(apiLiquidityPairsInfoCache ? { liquidityPairsInfo: apiLiquidityPairsInfoCache } : {}),\n    };\n  }\n\n  static async load(config: RaydiumLoadParams): Promise<Raydium> {\n    const custom: Required<RaydiumLoadParams> = merge(\n      // default\n      {\n        cluster: \"mainnet\",\n        owner: null,\n        apiRequestInterval: 5 * 60 * 1000,\n        apiRequestTimeout: 10 * 1000,\n      },\n      config,\n    );\n    const { cluster, apiRequestTimeout } = custom;\n\n    const api = new Api({ cluster, timeout: apiRequestTimeout });\n    const raydium = new Raydium({\n      ...custom,\n      api,\n    });\n\n    await raydium.token.load();\n    await raydium.liquidity.load();\n\n    return raydium;\n  }\n\n  get owner(): Owner | undefined {\n    return this._owner;\n  }\n  get ownerPubKey(): PublicKey {\n    if (!this._owner) throw new Error(EMPTY_OWNER);\n    return this._owner.publicKey;\n  }\n  public setOwner(owner?: PublicKey | Keypair): Raydium {\n    this._owner = owner ? new Owner(owner) : undefined;\n    return this;\n  }\n  get connection(): Connection {\n    if (!this._connection) throw new Error(EMPTY_CONNECTION);\n    return this._connection;\n  }\n  public setConnection(connection: Connection): Raydium {\n    this._connection = connection;\n    return this;\n  }\n  get signAllTransactions(): SignAllTransactions | undefined {\n    return this._signAllTransactions;\n  }\n  public setSignAllTransactions(signAllTransactions?: SignAllTransactions): Raydium {\n    this._signAllTransactions = signAllTransactions;\n    return this;\n  }\n\n  public checkOwner(): void {\n    if (!this.owner) {\n      this.logger.error(EMPTY_OWNER);\n      throw new Error(EMPTY_OWNER);\n    }\n  }\n\n  private isCacheInvalidate(time: number): boolean {\n    return new Date().getTime() - time > this._apiCacheTime;\n  }\n\n  public async fetchTokens(forceUpdate?: boolean): Promise<ApiTokens> {\n    if (this.apiData.tokens && !this.isCacheInvalidate(this.apiData.tokens.fetched) && !forceUpdate)\n      return this.apiData.tokens.data;\n    const dataObject = {\n      fetched: Date.now(),\n      data: await this.api.getTokens(),\n    };\n    this.apiData.tokens = dataObject;\n    apiCacheData.tokens = dataObject;\n\n    return dataObject.data;\n  }\n\n  public async fetchLiquidity(forceUpdate?: boolean): Promise<ApiLiquidityPools> {\n    if (this.apiData.liquidityPools && !this.isCacheInvalidate(this.apiData.liquidityPools.fetched) && !forceUpdate)\n      return this.apiData.liquidityPools.data;\n    const dataObject = {\n      fetched: Date.now(),\n      data: await this.api.getLiquidityPools(),\n    };\n    this.apiData.liquidityPools = dataObject;\n    apiCacheData.liquidityPools = dataObject;\n    return dataObject.data;\n  }\n\n  public async fetchPairs(forceUpdate?: boolean): Promise<ApiJsonPairInfo[]> {\n    if (\n      this.apiData.liquidityPairsInfo &&\n      !this.isCacheInvalidate(this.apiData.liquidityPairsInfo.fetched) &&\n      !forceUpdate\n    )\n      return this.apiData.liquidityPairsInfo?.data || [];\n    const dataObject = {\n      fetched: Date.now(),\n      data: await this.api.getPairsInfo(),\n    };\n    this.apiData.liquidityPairsInfo = dataObject;\n    apiCacheData.liquidityPairsInfo = dataObject;\n    return dataObject.data;\n  }\n\n  public async fetchFarms(forceUpdate?: boolean): Promise<ApiFarmPools> {\n    if (this.apiData.farmPools && !this.isCacheInvalidate(this.apiData.farmPools.fetched) && !forceUpdate)\n      return this.apiData.farmPools.data;\n\n    const dataObject = {\n      fetched: Date.now(),\n      data: await this.api.getFarmPools(),\n    };\n    this.apiData.farmPools = dataObject;\n    apiCacheData.farmPools = dataObject;\n\n    return dataObject.data;\n  }\n\n  public async chainTimeOffset(): Promise<number> {\n    const chainTime = await this.connection.getBlockTime(await this.connection.getSlot());\n    if (!chainTime) return 0;\n    chainTime * 1000;\n    const offset = Number((chainTime * 1000 - Date.now()).toFixed(0));\n    return offset;\n  }\n\n  public mintToToken(mint: PublicKeyish): Token {\n    return this.token.mintToToken(mint);\n  }\n  public mintToTokenAmount(params: MintToTokenAmount): TokenAmount {\n    return this.token.mintToTokenAmount(params);\n  }\n  public decimalAmount(params: MintToTokenAmount): BN {\n    return this.token.decimalAmount(params);\n  }\n  public uiAmount(params: MintToTokenAmount): string {\n    return this.token.uiAmount(params);\n  }\n}\n","export const EMPTY_OWNER =\n  \"please provide owner in load() initialization or you can set by calling raydium.setOwner(owner)\";\n\nexport const EMPTY_CONNECTION =\n  \"please provide connection in load() initialization or set it by raydium.setConnection(connection)\";\n","import {\n  getAssociatedTokenAddress,\n  createAssociatedTokenAccountInstruction,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Commitment, PublicKey } from \"@solana/web3.js\";\n\nimport { AddInstructionParam } from \"../../common/txTool\";\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\nimport { TOKEN_WSOL } from \"../token/constant\";\n\nimport { closeAccountInstruction, createWSolAccountInstructions } from \"./instruction\";\nimport { HandleTokenAccountParams, TokenAccount, TokenAccountRaw } from \"./types\";\nimport { parseTokenAccountResp } from \"./util\";\n\nexport interface TokenAccountDataProp {\n  tokenAccounts?: TokenAccount[];\n  tokenAccountRawInfos?: TokenAccountRaw[];\n}\nexport default class Account extends ModuleBase {\n  private _tokenAccounts: TokenAccount[] = [];\n  private _tokenAccountRawInfos: TokenAccountRaw[] = [];\n  private _ataCache: Map<string, PublicKey> = new Map();\n  private _accountChangeListenerId?: number;\n  private _accountListener: ((data: TokenAccountDataProp) => void)[] = [];\n  private _clientOwnedToken = false;\n\n  constructor(params: TokenAccountDataProp & ModuleBaseProps) {\n    super(params);\n    const { tokenAccounts, tokenAccountRawInfos } = params;\n    this._tokenAccounts = tokenAccounts || [];\n    this._tokenAccountRawInfos = tokenAccountRawInfos || [];\n    this._clientOwnedToken = !!(tokenAccounts || tokenAccountRawInfos);\n  }\n\n  get tokenAccounts(): TokenAccount[] {\n    return this._tokenAccounts;\n  }\n  get tokenAccountRawInfos(): TokenAccountRaw[] {\n    return this._tokenAccountRawInfos;\n  }\n\n  public updateTokenAccount({ tokenAccounts, tokenAccountRawInfos }: TokenAccountDataProp): Account {\n    if (tokenAccounts) this._tokenAccounts = tokenAccounts;\n    if (tokenAccountRawInfos) this._tokenAccountRawInfos = tokenAccountRawInfos;\n    this._accountChangeListenerId && this.scope.connection.removeAccountChangeListener(this._accountChangeListenerId);\n    this._accountChangeListenerId = undefined;\n    this._clientOwnedToken = true;\n    return this;\n  }\n\n  public addAccountChangeListener(cbk: (data: TokenAccountDataProp) => void): Account {\n    this._accountListener.push(cbk);\n    return this;\n  }\n\n  public removeAccountChangeListener(cbk: (data: TokenAccountDataProp) => void): Account {\n    this._accountListener = this._accountListener.filter((listener) => listener !== cbk);\n    return this;\n  }\n\n  public async getAssociatedTokenAccount(mint: PublicKey): Promise<PublicKey> {\n    this.scope.checkOwner();\n    const cacheKey = `${this.scope.ownerPubKey.toBase58()}_${mint.toBase58()}`;\n    if (this._ataCache.has(cacheKey)) return this._ataCache.get(cacheKey) as PublicKey;\n    const ataPubKey = await getAssociatedTokenAddress(mint, this.scope.ownerPubKey, true);\n    this._ataCache.set(cacheKey, ataPubKey);\n    return ataPubKey;\n  }\n\n  public async fetchWalletTokenAccounts(config?: { forceUpdate?: boolean; commitment?: Commitment }): Promise<{\n    tokenAccounts: TokenAccount[];\n    tokenAccountRawInfos: TokenAccountRaw[];\n  }> {\n    if (this._clientOwnedToken || (!config?.forceUpdate && this._tokenAccounts.length)) {\n      return {\n        tokenAccounts: this._tokenAccounts,\n        tokenAccountRawInfos: this._tokenAccountRawInfos,\n      };\n    }\n    this.scope.checkOwner();\n\n    const defaultConfig = {};\n    const customConfig = { ...defaultConfig, ...config };\n\n    const solAccountResp = await this.scope.connection.getAccountInfo(this.scope.ownerPubKey, customConfig.commitment);\n    const ownerTokenAccountResp = await this.scope.connection.getTokenAccountsByOwner(\n      this.scope.ownerPubKey,\n      { programId: TOKEN_PROGRAM_ID },\n      customConfig.commitment,\n    );\n\n    const { tokenAccounts, tokenAccountRawInfos } = parseTokenAccountResp({\n      solAccountResp,\n      tokenAccountResp: ownerTokenAccountResp,\n    });\n\n    this._tokenAccounts = tokenAccounts;\n    this._tokenAccountRawInfos = tokenAccountRawInfos;\n\n    this._accountChangeListenerId && this.scope.connection.removeAccountChangeListener(this._accountChangeListenerId);\n    this._accountChangeListenerId = this.scope.connection.onAccountChange(\n      this.scope.ownerPubKey,\n      () => this.fetchWalletTokenAccounts({ forceUpdate: true }),\n      \"confirmed\",\n    );\n\n    return { tokenAccounts, tokenAccountRawInfos };\n  }\n\n  // user token account needed\n  public async getCreatedTokenAccount({\n    mint,\n    associatedOnly = true,\n  }: {\n    mint: PublicKey;\n    associatedOnly?: boolean;\n  }): Promise<PublicKey | undefined> {\n    await this.fetchWalletTokenAccounts();\n    const tokenAccounts = this._tokenAccounts\n      .filter(({ mint: accountMint }) => accountMint?.equals(mint))\n      // sort by balance\n      .sort((a, b) => (a.amount.lt(b.amount) ? 1 : -1));\n\n    const ata = await this.getAssociatedTokenAccount(mint);\n    for (const tokenAccount of tokenAccounts) {\n      const { publicKey } = tokenAccount;\n      if (publicKey) {\n        if (associatedOnly && ata.equals(publicKey)) return publicKey;\n        return publicKey;\n      }\n    }\n  }\n\n  public async checkOrCreateAta({\n    mint,\n    autoUnwrapWSOLToSOL,\n  }: {\n    mint: PublicKey;\n    autoUnwrapWSOLToSOL?: boolean;\n  }): Promise<{ pubKey: PublicKey; newInstructions: AddInstructionParam }> {\n    await this.fetchWalletTokenAccounts();\n    let tokenAccountAddress = this.scope.account.tokenAccounts.find(\n      ({ mint: accountTokenMint }) => accountTokenMint?.toBase58() === mint.toBase58(),\n    )?.publicKey;\n\n    const owner = this.scope.ownerPubKey;\n    const newTxInstructions: AddInstructionParam = {};\n\n    if (!tokenAccountAddress) {\n      const ataAddress = await this.getAssociatedTokenAccount(mint);\n      const instruction = await createAssociatedTokenAccountInstruction(owner, ataAddress, owner, mint);\n      newTxInstructions.instructions = [instruction];\n      tokenAccountAddress = ataAddress;\n    }\n    if (autoUnwrapWSOLToSOL && TOKEN_WSOL.mint === mint.toBase58()) {\n      newTxInstructions.endInstructions = [\n        closeAccountInstruction({ owner, payer: owner, tokenAccount: tokenAccountAddress }),\n      ];\n    }\n\n    return {\n      pubKey: tokenAccountAddress,\n      newInstructions: newTxInstructions,\n    };\n  }\n\n  public async handleTokenAccount(\n    params: HandleTokenAccountParams,\n  ): Promise<AddInstructionParam & { tokenAccount: PublicKey }> {\n    const {\n      side,\n      amount,\n      mint,\n      tokenAccount,\n      payer = this.scope.ownerPubKey,\n      bypassAssociatedCheck,\n      skipCloseAccount,\n    } = params;\n\n    const txBuilder = this.createTxBuilder();\n\n    const ata = await getAssociatedTokenAddress(mint, this.scope.ownerPubKey, true);\n\n    if (new PublicKey(TOKEN_WSOL.mint).equals(mint)) {\n      const txInstruction = await createWSolAccountInstructions({\n        connection: this.scope.connection,\n        owner: this.scope.ownerPubKey,\n        payer,\n        amount,\n        skipCloseAccount,\n      });\n      txBuilder.addInstruction(txInstruction);\n      return { tokenAccount: txInstruction.signers![0].publicKey, ...txInstruction };\n    } else if (!tokenAccount || (side === \"out\" && !ata.equals(tokenAccount) && !bypassAssociatedCheck)) {\n      return {\n        tokenAccount: ata,\n        instructions: [\n          createAssociatedTokenAccountInstruction(this.scope.ownerPubKey, ata, this.scope.ownerPubKey, mint),\n        ],\n      };\n    }\n\n    return { tokenAccount };\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { createLogger, Logger } from \"../common/logger\";\nimport { TxBuilder } from \"../common/txTool\";\n\nimport { Raydium } from \"./\";\n\nexport interface ModuleBaseProps {\n  scope: Raydium;\n  moduleName: string;\n}\n\nconst joinMsg = (...args: (string | number | Record<string, any>)[]): string =>\n  args\n    .map((arg) => {\n      try {\n        return typeof arg === \"object\" ? JSON.stringify(arg) : arg;\n      } catch {\n        return arg;\n      }\n    })\n    .join(\", \");\nexport default class ModuleBase {\n  public scope: Raydium;\n  private disabled = false;\n  protected logger: Logger;\n\n  constructor({ scope, moduleName }: ModuleBaseProps) {\n    this.scope = scope;\n    this.logger = createLogger(moduleName);\n  }\n\n  protected createTxBuilder(feePayer?: PublicKey): TxBuilder {\n    this.scope.checkOwner();\n    return new TxBuilder({\n      connection: this.scope.connection,\n      feePayer: feePayer || this.scope.ownerPubKey,\n      owner: this.scope.owner,\n      signAllTransactions: this.scope.signAllTransactions,\n    });\n  }\n\n  public logDebug(...args: (string | number | Record<string, any>)[]): void {\n    this.logger.debug(joinMsg(args));\n  }\n\n  public logInfo(...args: (string | number | Record<string, any>)[]): void {\n    this.logger.info(joinMsg(args));\n  }\n\n  public logAndCreateError(...args: (string | number | Record<string, any>)[]): void {\n    const message = joinMsg(args);\n    // this.logger.error(message);\n    throw new Error(message);\n  }\n\n  public checkDisabled(): void {\n    if (this.disabled || !this.scope) this.logAndCreateError(\"module not working\");\n  }\n}\n","import {\n  createInitializeAccountInstruction,\n  createCloseAccountInstruction,\n  createTransferInstruction,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport {\n  Commitment,\n  Connection,\n  Keypair,\n  PublicKey,\n  Signer,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { BigNumberish, parseBigNumberish } from \"../../common\";\nimport { AddInstructionParam } from \"../../common/txTool\";\nimport { u64 } from \"../../marshmallow\";\nimport { TOKEN_WSOL } from \"../token/constant\";\n\nimport { splAccountLayout } from \"./layout\";\n\nexport function initTokenAccountInstruction(params: {\n  mint: PublicKey;\n  tokenAccount: PublicKey;\n  owner: PublicKey;\n}): TransactionInstruction {\n  const { mint, tokenAccount, owner } = params;\n  return createInitializeAccountInstruction(tokenAccount, mint, owner);\n}\n\nexport function closeAccountInstruction(params: {\n  tokenAccount: PublicKey;\n  payer: PublicKey;\n  multiSigners?: Signer[];\n  owner: PublicKey;\n}): TransactionInstruction {\n  const { tokenAccount, payer, multiSigners = [], owner } = params;\n  return createCloseAccountInstruction(tokenAccount, payer, owner, multiSigners);\n}\n\ninterface CreateWSolTokenAccount {\n  connection: Connection;\n  payer: PublicKey;\n  owner: PublicKey;\n  amount: BigNumberish;\n  commitment?: Commitment;\n  skipCloseAccount?: boolean;\n}\n/**\n * WrappedNative account = wsol account\n */\nexport async function createWSolAccountInstructions(params: CreateWSolTokenAccount): Promise<AddInstructionParam> {\n  const { connection, amount, commitment, payer, owner, skipCloseAccount } = params;\n\n  const balanceNeeded = await connection.getMinimumBalanceForRentExemption(splAccountLayout.span, commitment);\n  const lamports = parseBigNumberish(amount).add(new BN(balanceNeeded));\n  const newAccount = Keypair.generate();\n\n  return {\n    signers: [newAccount],\n    instructions: [\n      SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: newAccount.publicKey,\n        lamports: lamports.toNumber(),\n        space: splAccountLayout.span,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      initTokenAccountInstruction({\n        mint: new PublicKey(TOKEN_WSOL.mint),\n        tokenAccount: newAccount.publicKey,\n        owner,\n      }),\n    ],\n    endInstructions: skipCloseAccount\n      ? []\n      : [\n          closeAccountInstruction({\n            tokenAccount: newAccount.publicKey,\n            payer,\n            owner,\n          }),\n        ],\n  };\n}\n\nexport function makeTransferInstruction({\n  source,\n  destination,\n  owner,\n  amount,\n  multiSigners = [],\n}: {\n  source: PublicKey;\n  destination: PublicKey;\n  owner: PublicKey;\n  amount: BigNumberish;\n  multiSigners?: Signer[];\n}): TransactionInstruction {\n  return createTransferInstruction(source, destination, owner, parseBigNumberish(amount).toNumber(), multiSigners);\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN, { isBN } from \"bn.js\";\n\nimport {\n  bits, blob, Blob, Layout, offset as _offset, seq as _seq, Structure as _Structure, u32 as _u32, u8 as _u8, UInt,\n  union as _union, Union as _Union,\n} from \"./buffer-layout\";\n\nexport * from \"./buffer-layout\";\nexport { blob };\n\nexport class BNLayout<P extends string = \"\"> extends Layout<BN, P> {\n  blob: Layout<Buffer>;\n  signed: boolean;\n\n  constructor(span: number, signed: boolean, property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends, but it desn't matter\n    super(span, property);\n    this.blob = blob(span);\n    this.signed = signed;\n  }\n\n  /** @override */\n  decode(b: Buffer, offset = 0): BN {\n    const num = new BN(this.blob.decode(b, offset), 10, \"le\");\n    if (this.signed) {\n      return num.fromTwos(this.span * 8).clone();\n    }\n    return num;\n  }\n\n  /** @override */\n  encode(src: BN, b: Buffer, offset = 0): number {\n    if (typeof src === \"number\") src = new BN(src); // src will pass a number accidently in union\n    if (this.signed) {\n      src = src.toTwos(this.span * 8);\n    }\n    return this.blob.encode(src.toArrayLike(Buffer, \"le\", this.span), b, offset);\n  }\n}\n\nexport class WideBits<P extends string = \"\"> extends Layout<Record<string, boolean>, P> {\n  _lower: any;\n  _upper: any;\n  // TODO: unknown\n  constructor(property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\n    super(8, property);\n    this._lower = bits(_u32(), false);\n    this._upper = bits(_u32(), false);\n  }\n\n  addBoolean(property: string): void {\n    if (this._lower.fields.length < 32) {\n      this._lower.addBoolean(property);\n    } else {\n      this._upper.addBoolean(property);\n    }\n  }\n\n  decode(b: Buffer, offset = 0): Record<string, boolean> {\n    const lowerDecoded = this._lower.decode(b, offset);\n    const upperDecoded = this._upper.decode(b, offset + this._lower.span);\n    return { ...lowerDecoded, ...upperDecoded };\n  }\n\n  encode(src: any /* TEMP */, b: Buffer, offset = 0):any {\n    return this._lower.encode(src, b, offset) + this._upper.encode(src, b, offset + this._lower.span);\n  }\n}\n\nexport function u8<P extends string = \"\">(property?: P): UInt<number, P> {\n  return new UInt(1, property);\n}\n\nexport function u32<P extends string = \"\">(property?: P): UInt<number, P> {\n  return new UInt(4, property);\n}\n\nexport function u64<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(8, false, property);\n}\n\nexport function u128<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(16, false, property);\n}\n\nexport function i64<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(8, true, property);\n}\n\nexport function i128<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(16, true, property);\n}\n\nexport class WrappedLayout<T, U, P extends string = \"\"> extends Layout<U, P> {\n  layout: Layout<T>;\n  decoder: (data: T) => U;\n  encoder: (src: U) => T;\n\n  constructor(layout: Layout<T>, decoder: (data: T) => U, encoder: (src: U) => T, property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\n    super(layout.span, property);\n    this.layout = layout;\n    this.decoder = decoder;\n    this.encoder = encoder;\n  }\n\n  decode(b: Buffer, offset?: number): U {\n    return this.decoder(this.layout.decode(b, offset));\n  }\n\n  encode(src: U, b: Buffer, offset?: number): number {\n    return this.layout.encode(this.encoder(src), b, offset);\n  }\n\n  getSpan(b: Buffer, offset?: number): number {\n    return this.layout.getSpan(b, offset);\n  }\n}\n\nexport function publicKey<P extends string = \"\">(property?: P): Layout<PublicKey, P> {\n  return new WrappedLayout(\n    blob(32),\n    (b: Buffer) => new PublicKey(b),\n    (key: PublicKey) => key.toBuffer(),\n    property,\n  );\n}\n\nexport class OptionLayout<T, P> extends Layout<T | null, P> {\n  layout: Layout<T>;\n  discriminator: Layout<number>;\n\n  constructor(layout: Layout<T>, property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\n    super(-1, property);\n    this.layout = layout;\n    this.discriminator = _u8();\n  }\n\n  encode(src: T | null, b: Buffer, offset = 0): number {\n    if (src === null || src === undefined) {\n      return this.discriminator.encode(0, b, offset);\n    }\n    this.discriminator.encode(1, b, offset);\n    return this.layout.encode(src, b, offset + 1) + 1;\n  }\n\n  decode(b: Buffer, offset = 0): T | null {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return null;\n    } else if (discriminator === 1) {\n      return this.layout.decode(b, offset + 1);\n    }\n    throw new Error(\"Invalid option \" + this.property);\n  }\n\n  getSpan(b: Buffer, offset = 0): number {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return 1;\n    } else if (discriminator === 1) {\n      return this.layout.getSpan(b, offset + 1) + 1;\n    }\n    throw new Error(\"Invalid option \" + this.property);\n  }\n}\n\nexport function option<T, P extends string = \"\">(layout: Layout<T>, property?: P): Layout<T | null, P> {\n  return new OptionLayout<T, P>(layout, property);\n}\n\nexport function bool<P extends string = \"\">(property?: P): Layout<boolean, P> {\n  return new WrappedLayout(_u8(), decodeBool, encodeBool, property);\n}\n\nexport function decodeBool(value: number): boolean {\n  if (value === 0) {\n    return false;\n  } else if (value === 1) {\n    return true;\n  }\n  throw new Error(\"Invalid bool: \" + value);\n}\n\nexport function encodeBool(value: boolean): number {\n  return value ? 1 : 0;\n}\n\nexport function vec<T, P extends string = \"\">(elementLayout: Layout<T>, property?: P): Layout<T[], P> {\n  const length = _u32(\"length\");\n  const layout: Layout<{ values: T[] }> = struct([\n    length,\n    seq(elementLayout, _offset(length, -length.span), \"values\"),\n  ]) as any; // Something I don't know\n  return new WrappedLayout(\n    layout,\n    ({ values }) => values,\n    (values) => ({ values }),\n    property,\n  );\n}\n\nexport function tagged<T, P extends string = \"\">(tag: BN, layout: Layout<T>, property?: P): Layout<T, P> {\n  const wrappedLayout: Layout<{ tag: BN; data: T }> = struct([u64(\"tag\"), layout.replicate(\"data\")]) as any; // Something I don't know\n\n  function decodeTag({ tag: receivedTag, data }: { tag: BN; data: T }): T {\n    if (!receivedTag.eq(tag)) {\n      throw new Error(\"Invalid tag, expected: \" + tag.toString(\"hex\") + \", got: \" + receivedTag.toString(\"hex\"));\n    }\n    return data;\n  }\n\n  return new WrappedLayout(wrappedLayout, decodeTag, (data) => ({ tag, data }), property);\n}\n\nexport function vecU8<P extends string = \"\">(property?: P): Layout<Buffer, P> {\n  const length = _u32(\"length\");\n  const layout: Layout<{ data: Buffer }> = struct([length, blob(_offset(length, -length.span), \"data\")]) as any; // Something I don't know\n  return new WrappedLayout(\n    layout,\n    ({ data }) => data,\n    (data) => ({ data }),\n    property,\n  );\n}\n\nexport function str<P extends string = \"\">(property?: P): Layout<string, P> {\n  return new WrappedLayout(\n    vecU8(),\n    (data) => data.toString(\"utf-8\"),\n    (s) => Buffer.from(s, \"utf-8\"),\n    property,\n  );\n}\n\nexport interface EnumLayout<T, P extends string = \"\"> extends Layout<T, P> {\n  registry: Record<string, Layout<any>>;\n}\n\nexport function rustEnum<T, P extends string = \"\">(variants: Layout<any>[], property?: P): EnumLayout<T, P> {\n  const unionLayout = _union(_u8(), property);\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property));\n  return unionLayout as any; // ?why use UnionLayout? This must be a fault\n}\n\nexport function array<T, P extends string = \"\">(\n  elementLayout: Layout<T>,\n  length: number,\n  property?: P,\n): Layout<T[], P> {\n  const layout = struct([seq(elementLayout, length, \"values\")]) as any as Layout<{ values: T[] }>; // Something I don't know\n  return new WrappedLayout(\n    layout,\n    ({ values }) => values,\n    (values) => ({ values }),\n    property,\n  );\n}\n\nexport class Structure<T, P, D> extends _Structure<T, P, D> {\n  /** @override */\n  decode(b: Buffer, offset?: number): D {\n    return super.decode(b, offset);\n  }\n}\n\nexport function struct<T, P extends string = \"\">(\n  fields: T,\n  property?: P,\n  decodePrefixes?: boolean,\n): T extends Layout<infer Value, infer Property>[]\n  ? Structure<\n      Value,\n      P,\n      {\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\n          ? V\n          : any;\n      }\n    >\n  : any {\n  //@ts-expect-error this type is not quite satisfied the define, but, never no need to worry about.\n  return new Structure(fields, property, decodePrefixes);\n}\n\nexport type GetLayoutSchemaFromStructure<T extends Structure<any, any, any>> = T extends Structure<any, any, infer S>\n  ? S\n  : any;\nexport type GetStructureFromLayoutSchema<S> = Structure<any, any, S>;\n\nexport class Union<Schema> extends _Union<Schema> {\n  encodeInstruction(instruction: any): Buffer {\n    const instructionMaxSpan = Math.max(...Object.values(this.registry).map((r) => r.span));\n    const b = Buffer.alloc(instructionMaxSpan);\n    return b.slice(0, this.encode(instruction, b));\n  }\n\n  decodeInstruction(instruction: any):Partial<Schema> {\n    return this.decode(instruction);\n  }\n}\nexport function union<UnionSchema extends { [key: string]: any } = any>(\n  discr: any,\n  defaultLayout?: any,\n  property?: string,\n): Union<UnionSchema> {\n  return new Union(discr, defaultLayout, property);\n}\n\nclass Zeros extends Blob {\n  decode(b: Buffer, offset: number):Buffer {\n    const slice = super.decode(b, offset);\n    if (!slice.every((v) => v === 0)) {\n      throw new Error(\"nonzero padding bytes\");\n    }\n    return slice;\n  }\n}\n\nexport function zeros(length: number):Zeros {\n  return new Zeros(length);\n}\n\nexport function seq<T, P extends string = \"\", AnotherP extends string = \"\">(\n  elementLayout: Layout<T, P>,\n  count: number | BN | Layout<BN | number, P>,\n  property?: AnotherP,\n): Layout<T[], AnotherP> {\n  let parsedCount: number;\n  const superCount =\n    typeof count === \"number\"\n      ? count\n      : isBN(count)\n      ? count.toNumber()\n      : new Proxy(count as unknown as Layout<number> /* pretend to be Layout<number> */, {\n          get(target, property):any {\n            if (!parsedCount) {\n              // get count in targetLayout. note that count may be BN\n              const countProperty = Reflect.get(target, \"count\");\n\n              // let targetLayout's  property:count be a number\n              parsedCount = isBN(countProperty) ? countProperty.toNumber() : countProperty;\n\n              // record the count\n              Reflect.set(target, \"count\", parsedCount);\n            }\n            return Reflect.get(target, property);\n          },\n          set(target, property, value):any {\n            if (property === \"count\") {\n              parsedCount = value;\n            }\n            return Reflect.set(target, property, value);\n          },\n        });\n\n  // @ts-expect-error force type\n  return _seq(elementLayout, superCount, property);\n}\n","import {\n  bits as _bits, BitStructure as _BitStructure, blob as _blob, Blob as _Blob, cstr as _cstr, f32 as _f32,\n  f32be as _f32be, f64 as _f64, f64be as _f64be, greedy as _greedy, Layout as _Layout, ns64 as _ns64, ns64be as _ns64be,\n  nu64 as _nu64, nu64be as _nu64be, offset as _offset, s16 as _s16, s16be as _s16be, s24 as _s24, s24be as _s24be,\n  s32 as _s32, s32be as _s32be, s40 as _s40, s40be as _s40be, s48 as _s48, s48be as _s48be, s8 as _s8, seq as _seq,\n  struct as _struct, Structure as _Structure, u16 as _u16, u16be as _u16be, u24 as _u24, u24be as _u24be, u32 as _u32,\n  u32be as _u32be, u40 as _u40, u40be as _u40be, u48 as _u48, u48be as _u48be, u8 as _u8, UInt as _UInt,\n  union as _union, Union as _Union, unionLayoutDiscriminator as _unionLayoutDiscriminator, utf8 as _utf8,\n} from \"@solana/buffer-layout\";\n\n//#region ------------------- Layout -------------------\nexport interface Layout<T = any, P = \"\"> {\n  span: number;\n  property?: P;\n  decode(b: Buffer, offset?: number): T;\n  encode(src: T, b: Buffer, offset?: number): number;\n  getSpan(b: Buffer, offset?: number): number;\n  replicate<AP extends string>(name: AP): Layout<T, AP>;\n}\nexport interface LayoutConstructor {\n  new <T, P>(): Layout<T, P>; // for class extends syntex\n  new <T, P>(span?: T, property?: P): Layout<T, P>;\n  readonly prototype: Layout;\n}\nexport const Layout = _Layout as unknown as LayoutConstructor;\n//#endregion\n\n//#region ------------------- Structure -------------------\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface Structure<T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>\n  extends Layout<DecodeSchema, P> {\n  span: number;\n  decode(b: Buffer, offset?: number): DecodeSchema;\n  layoutFor<AP extends string>(property: AP): Layout<DecodeSchema[AP]>;\n  offsetOf<AP extends string>(property: AP): number;\n}\ninterface StructureConstructor {\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(): Structure<T, P, DecodeSchema>;\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(\n    fields: T,\n    property?: P,\n    decodePrefixes?: boolean,\n  ): Structure<T, P, DecodeSchema>;\n}\nexport const Structure = _Structure as unknown as StructureConstructor;\n//#endregion\n\n//#region ------------------- Union -------------------\nexport interface Union<UnionSchema extends { [key: string]: any } = any> extends Layout {\n  registry: object;\n  decode(b: Buffer, offset?: number): Partial<UnionSchema>;\n  addVariant(\n    variant: number,\n    layout: Structure<any, any, Partial<UnionSchema>> | Layout<any, keyof UnionSchema>,\n    property?: string,\n  ): any /* TEMP: code in Layout.js 1809 */;\n}\ninterface UnionConstructor {\n  new <UnionSchema extends { [key: string]: any } = any>(): Union<UnionSchema>;\n  new <UnionSchema extends { [key: string]: any } = any>(\n    discr: Layout<any, any>,\n    defaultLayout: Layout<any, any>,\n    property?: string,\n  ): Union<UnionSchema>;\n}\nexport const Union = _Union as unknown as UnionConstructor;\n//#endregion\n\n//#region ------------------- BitStructure -------------------\nexport type BitStructure<T = unknown /* TEMP */, P = \"\"> = Layout<T, P>;\ninterface BitStructureConstructor {\n  new (...params: any[]): BitStructure;\n}\nexport const BitStructure = _BitStructure as BitStructureConstructor;\n//#endregion\n\n//#region ------------------- UInt -------------------\nexport type UInt<T = any, P = \"\"> = Layout<T, P>;\ninterface UIntConstructor {\n  new <T, P>(span?: T, property?: P): UInt<T, P>;\n}\nexport const UInt = _UInt as UIntConstructor;\n//#endregion\n\n//#region ------------------- Blob -------------------\nexport type Blob<P extends string = \"\"> = Layout<Buffer, P>;\ninterface BlobConstructor {\n  new (...params: ConstructorParameters<LayoutConstructor>): Blob;\n}\nexport const Blob = _Blob as unknown as BlobConstructor;\n//#endregion\n\nexport const greedy = _greedy as <P extends string = \"\">(elementSpan?: number, property?: P) => Layout<number, P>;\nexport const u8 = _u8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u16 = _u16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u24 = _u24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u32 = _u32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u40 = _u40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u48 = _u48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const nu64 = _nu64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u16be = _u16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u24be = _u24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u32be = _u32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u40be = _u40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u48be = _u48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const nu64be = _nu64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s8 = _s8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s16 = _s16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s24 = _s24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s32 = _s32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s40 = _s40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s48 = _s48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const ns64 = _ns64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s16be = _s16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s24be = _s24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s32be = _s32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s40be = _s40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s48be = _s48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const ns64be = _ns64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f32 = _f32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f32be = _f32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f64 = _f64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f64be = _f64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const struct = _struct as <T, P extends string = \"\">(\n  fields: T,\n  property?: P,\n  decodePrefixes?: boolean,\n) => T extends Layout<infer Value, infer Property>[]\n  ? Structure<\n      Value,\n      P,\n      {\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\n          ? V\n          : any;\n      }\n    >\n  : any;\n\nexport const seq = _seq as unknown as <T, P>(\n  elementLayout: Layout<T, string>,\n  count: number | Layout<number, string>,\n  property?: P,\n) => Layout<T[]>;\nexport const union = _union as <UnionSchema extends { [key: string]: any } = any>(\n  discr: Layout<any, any>,\n  defaultLayout?: any,\n  property?: string,\n) => Union<UnionSchema>;\nexport const unionLayoutDiscriminator = _unionLayoutDiscriminator as <P extends string = \"\">(\n  layout: Layout<any, P>,\n  property?: P,\n) => any;\nexport const blob = _blob as unknown as <P extends string = \"\">(length: number | Layout<number, P>, property?: P) => Blob<P>;\nexport const cstr = _cstr as <P extends string = \"\">(property?: P) => Layout<string, P>;\nexport const utf8 = _utf8 as <P extends string = \"\">(maxSpan: number, property?: P) => Layout<string, P>;\nexport const bits = _bits as unknown as <T, P extends string = \"\">(\n  word: Layout<T>,\n  msb?: boolean,\n  property?: P,\n) => BitStructure<T, P>; // TODO: not quite sure\nexport const offset = _offset as unknown as <T, P extends string = \"\">(\n  layout: Layout<T, P>,\n  offset?: number,\n  property?: P,\n) => Layout<T, P>;\n\nexport type GetStructureSchema<T extends Structure> = T extends Structure<any, any, infer S> ? S : unknown;\n","import { publicKey, struct, u32, u64, u8 } from \"../../marshmallow\";\n\nexport const splAccountLayout = struct([\n  publicKey(\"mint\"),\n  publicKey(\"owner\"),\n  u64(\"amount\"),\n  u32(\"delegateOption\"),\n  publicKey(\"delegate\"),\n  u8(\"state\"),\n  u32(\"isNativeOption\"),\n  u64(\"isNative\"),\n  u64(\"delegatedAmount\"),\n  u32(\"closeAuthorityOption\"),\n  publicKey(\"closeAuthority\"),\n]);\n","import { AccountInfo, PublicKey, RpcResponseAndContext } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { createLogger } from \"../../common\";\n\nimport { splAccountLayout } from \"./layout\";\nimport { TokenAccount, TokenAccountRaw } from \"./types\";\n\nconst logger = createLogger(\"Raydium_Util\");\n\nexport interface ParseTokenAccount {\n  solAccountResp?: AccountInfo<Buffer> | null;\n  tokenAccountResp: RpcResponseAndContext<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer>;\n    }>\n  >;\n}\n\nexport function parseTokenAccountResp({ solAccountResp, tokenAccountResp }: ParseTokenAccount): {\n  tokenAccounts: TokenAccount[];\n  tokenAccountRawInfos: TokenAccountRaw[];\n} {\n  const tokenAccounts: TokenAccount[] = [];\n  const tokenAccountRawInfos: TokenAccountRaw[] = [];\n\n  for (const { pubkey, account } of tokenAccountResp.value) {\n    if (account.data.length !== splAccountLayout.span) {\n      logger.error(\"invalid token account layout length\", \"publicKey\", pubkey.toBase58());\n      throw new Error(\"invalid token account layout length\");\n    }\n\n    const accountInfo = splAccountLayout.decode(account.data);\n    const { mint, amount } = accountInfo;\n\n    tokenAccounts.push({\n      publicKey: pubkey,\n      mint,\n      amount,\n      isNative: false,\n    });\n    tokenAccountRawInfos.push({ pubkey, accountInfo });\n  }\n\n  if (solAccountResp) {\n    tokenAccounts.push({\n      mint: PublicKey.default,\n      amount: new BN(solAccountResp.lamports),\n      isNative: true,\n    });\n  }\n\n  return {\n    tokenAccounts,\n    tokenAccountRawInfos,\n  };\n}\n","import { TOKEN_PROGRAM_ID, createAssociatedTokenAccountInstruction } from \"@solana/spl-token\";\nimport {\n  AccountMeta,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { accountMeta, AddInstructionParam, commonSystemAccountMeta, TxBuilder } from \"../../common\";\nimport { isDateAfter, isDateBefore, offsetDateTime } from \"../../common/date\";\nimport { getMax, sub, isMeaningfulNumber } from \"../../common/fractionUtil\";\nimport {\n  BigNumberish,\n  toTotalPrice,\n  toPercent,\n  toBN,\n  parseNumberInfo,\n  parseBigNumberish,\n} from \"../../common/bignumber\";\nimport { PublicKeyish, SOLMint, validateAndParsePublicKey } from \"../../common/pubKey\";\nimport { Fraction } from \"../../module/fraction\";\nimport { Token as RToken } from \"../../module/token\";\nimport { TokenAmount } from \"../../module/amount\";\nimport { createWSolAccountInstructions } from \"../account/instruction\";\nimport ModuleBase from \"../moduleBase\";\nimport { TOKEN_WSOL } from \"../token/constant\";\nimport { LoadParams, MakeTransaction } from \"../type\";\n\nimport {\n  FARM_LOCK_MINT,\n  FARM_LOCK_VAULT,\n  farmDespotVersionToInstruction,\n  farmWithdrawVersionToInstruction,\n  isValidFarmVersion,\n  poolTypeV6,\n  validateFarmRewards,\n} from \"./config\";\nimport { createAssociatedLedgerAccountInstruction, makeCreateFarmInstruction } from \"./instruction\";\nimport {\n  dwLayout,\n  farmAddRewardLayout,\n  farmRewardRestartLayout,\n  farmStateV6Layout,\n  withdrawRewardLayout,\n} from \"./layout\";\nimport {\n  CreateFarm,\n  FarmDWParam,\n  FarmPoolJsonInfo,\n  FarmRewardInfo,\n  FarmRewardInfoConfig,\n  RewardInfoKey,\n  SdkParsedFarmInfo,\n  UpdateFarmReward,\n  HydratedFarmInfo,\n} from \"./type\";\nimport {\n  calFarmRewardAmount,\n  farmRewardInfoToConfig,\n  getAssociatedAuthority,\n  getAssociatedLedgerAccount,\n  getAssociatedLedgerPoolAccount,\n  getFarmProgramId,\n  mergeSdkFarmInfo,\n  judgeFarmType,\n  whetherIsStakeFarmPool,\n  calculateFarmPoolAprList,\n} from \"./util\";\n\nexport default class Farm extends ModuleBase {\n  private _farmPools: FarmPoolJsonInfo[] = [];\n  private _hydratedFarmPools: HydratedFarmInfo[] = [];\n  private _hydratedFarmMap: Map<string, HydratedFarmInfo> = new Map();\n  private _sdkParsedFarmPools: SdkParsedFarmInfo[] = [];\n  private _lpTokenInfoMap: Map<string, RToken> = new Map();\n\n  public async load(params?: LoadParams): Promise<void> {\n    await this.scope.liquidity.load(params);\n    await this.scope.fetchFarms(params?.forceUpdate);\n\n    const data = this.scope.apiData.farmPools?.data || {};\n\n    this._farmPools = Object.keys(data || {}).reduce(\n      (acc, cur) =>\n        acc.concat(\n          data[cur].map?.((data: FarmPoolJsonInfo) => {\n            const baseToken = this.scope.token.allTokenMap.get(data.baseMint);\n            const quoteToken = this.scope.token.allTokenMap.get(data.quoteMint);\n            if (baseToken && quoteToken) {\n              this._lpTokenInfoMap.set(\n                data.lpMint,\n                new RToken({\n                  mint: data.lpMint,\n                  decimals: baseToken.decimals,\n                  symbol: `${baseToken.symbol} - ${quoteToken.name}`,\n                  name: `${baseToken.symbol} - ${quoteToken.name} LP`,\n                }),\n              );\n            }\n\n            return { ...data, name: data.symbol, category: cur };\n          }) || [],\n        ),\n      [],\n    );\n    await this.fetchSdkFarmInfo();\n  }\n\n  public async fetchSdkFarmInfo(): Promise<void> {\n    this._sdkParsedFarmPools = await mergeSdkFarmInfo({\n      connection: this.scope.connection,\n      farmPools: this._farmPools,\n      owner: this.scope.owner?.publicKey,\n      config: { commitment: \"confirmed\" },\n    });\n  }\n\n  public async loadHydratedFarmInfo(params?: LoadParams & { skipPrice?: boolean }): Promise<HydratedFarmInfo[]> {\n    const { forceUpdate, skipPrice } = params || {};\n    if (this._hydratedFarmPools.length && !forceUpdate) return this._hydratedFarmPools;\n    await this.scope.farm.load();\n    try {\n      await this.scope.account.fetchWalletTokenAccounts();\n    } catch {\n      //\n    }\n    !skipPrice && (await this.scope.token.fetchTokenPrices());\n    await this.scope.liquidity.loadPairs();\n    const chainTimeOffset = await this.scope.chainTimeOffset();\n    const currentBlockChainDate = offsetDateTime(Date.now() + chainTimeOffset, { minutes: 0 /* force */ });\n    const blockSlotCountForSecond = await this.scope.api.getBlockSlotCountForSecond(this.scope.connection.rpcEndpoint);\n\n    const farmAprs = Object.fromEntries(\n      this.scope.liquidity.allPairs.map((i) => [i.ammId, { apr30d: i.apr30d, apr7d: i.apr7d, apr24h: i.apr24h }]),\n    );\n\n    this._hydratedFarmPools = this._sdkParsedFarmPools.map((farmInfo) => {\n      const info = this.hydrateFarmInfo({\n        farmInfo,\n        blockSlotCountForSecond,\n        farmAprs,\n        currentBlockChainDate, // same as chainTimeOffset\n        chainTimeOffset, // same as currentBlockChainDate\n      });\n      this._hydratedFarmMap.set(farmInfo.id.toBase58(), info);\n      return info;\n    });\n    return this._hydratedFarmPools;\n  }\n\n  get allFarms(): FarmPoolJsonInfo[] {\n    return this._farmPools;\n  }\n  get allParsedFarms(): SdkParsedFarmInfo[] {\n    return this._sdkParsedFarmPools;\n  }\n  get allHydratedFarms(): HydratedFarmInfo[] {\n    return this._hydratedFarmPools;\n  }\n  get allHydratedFarmMap(): Map<string, HydratedFarmInfo> {\n    return this._hydratedFarmMap;\n  }\n\n  public getFarm(farmId: PublicKeyish): FarmPoolJsonInfo {\n    const _farmId = validateAndParsePublicKey({ publicKey: farmId });\n    const farmInfo = this.allFarms.find((farm) => farm.id === _farmId.toBase58());\n    if (!farmInfo) this.logAndCreateError(\"invalid farm id\");\n    return farmInfo!;\n  }\n  public getParsedFarm(farmId: PublicKeyish): SdkParsedFarmInfo {\n    const _farmId = validateAndParsePublicKey({ publicKey: farmId });\n    const farmInfo = this.allParsedFarms.find((farm) => _farmId.equals(farm.id));\n    if (!farmInfo) this.logAndCreateError(\"invalid farm id\");\n    return farmInfo!;\n  }\n  public getLpTokenInfo(lpMint: PublicKeyish): RToken {\n    const pubKey = validateAndParsePublicKey({ publicKey: lpMint });\n    const lpToken = this._lpTokenInfoMap.get(pubKey.toBase58());\n    if (!lpToken) this.logAndCreateError(\"LP Token not found\", pubKey.toBase58());\n    return lpToken!;\n  }\n  public lpDecimalAmount({ mint, amount }: { mint: PublicKeyish; amount: BigNumberish }): BN {\n    const numberDetails = parseNumberInfo(amount);\n    const token = this.getLpTokenInfo(mint);\n    return toBN(\n      new Fraction(numberDetails.numerator, numberDetails.denominator).mul(new BN(10).pow(new BN(token.decimals))),\n    );\n  }\n\n  public hydrateFarmInfo(params: {\n    farmInfo: SdkParsedFarmInfo;\n    blockSlotCountForSecond: number;\n    farmAprs: Record<string, { apr30d: number; apr7d: number; apr24h: number }>; // from api:pairs\n    currentBlockChainDate: Date;\n    chainTimeOffset: number;\n  }): HydratedFarmInfo {\n    const { farmInfo, blockSlotCountForSecond, farmAprs, currentBlockChainDate, chainTimeOffset = 0 } = params;\n    const farmPoolType = judgeFarmType(farmInfo, currentBlockChainDate);\n    const isStakePool = whetherIsStakeFarmPool(farmInfo);\n    const isDualFusionPool = farmPoolType === \"dual fusion pool\";\n    const isNormalFusionPool = farmPoolType === \"normal fusion pool\";\n    const isClosedPool = farmPoolType === \"closed pool\" && !farmInfo.upcoming; // NOTE: I don't know why, but Amanda says there is a bug.\n    const isUpcomingPool = farmInfo.version !== 6 ? farmInfo.upcoming && isClosedPool : farmInfo.upcoming;\n    const isNewPool = farmInfo.version !== 6 && farmInfo.upcoming && !isClosedPool; // NOTE: Rudy says!!!\n    const isStablePool =\n      this.scope.liquidity.allPools.find((i) => i.lpMint === farmInfo.lpMint.toBase58())?.version === 5;\n\n    const lpToken = isStakePool ? this.scope.mintToToken(farmInfo.lpMint) : this.getLpTokenInfo(farmInfo.lpMint);\n    const baseToken = this.scope.mintToToken(isStakePool ? farmInfo.lpMint : farmInfo.baseMint);\n    const quoteToken = this.scope.mintToToken(isStakePool ? farmInfo.lpMint : farmInfo.quoteMint);\n\n    if (!baseToken?.symbol) {\n      // console.log('farmInfo: ', farmInfo.jsonInfo)\n    }\n    const name = isStakePool\n      ? `${baseToken?.symbol ?? \"unknown\"}`\n      : `${baseToken?.symbol ?? \"unknown\"}-${quoteToken?.symbol ?? \"unknown\"}`;\n\n    const rewardTokens = farmInfo.jsonInfo.rewardInfos.map(({ rewardMint: mint }) => this.scope.mintToToken(mint));\n    const pendingRewards = farmInfo.wrapped?.pendingRewards.map((reward, idx) =>\n      rewardTokens[idx] ? new TokenAmount(rewardTokens[idx]!, toBN(getMax(reward, 0))) : undefined,\n    );\n\n    const lpPrice = isStakePool\n      ? this.scope.token.tokenPrices.get(farmInfo.lpMint.toBase58())!\n      : this.scope.liquidity.lpPriceMap.get(farmInfo.lpMint.toBase58())!;\n\n    const stakedLpAmount = lpToken && new TokenAmount(lpToken, farmInfo.lpVault.amount);\n    const tvl =\n      lpPrice && lpToken ? toTotalPrice(new TokenAmount(lpToken, farmInfo.lpVault.amount), lpPrice) : undefined;\n\n    const aprs = calculateFarmPoolAprList(farmInfo, {\n      tvl,\n      currentBlockChainDate,\n      rewardTokens,\n      rewardTokenPrices:\n        farmInfo.rewardInfos.map(({ rewardMint }) => this.scope.token.tokenPrices.get(rewardMint.toBase58())) ?? [],\n      blockSlotCountForSecond,\n    });\n\n    const ammId = this.scope.liquidity.allPools.find((pool) => pool.lpMint === farmInfo.lpMint.toBase58())?.id;\n    const raydiumFeeApr7d = ammId ? toPercent(farmAprs[ammId]?.apr7d, { alreadyDecimaled: true }) : undefined;\n    const raydiumFeeApr30d = ammId ? toPercent(farmAprs[ammId]?.apr30d, { alreadyDecimaled: true }) : undefined;\n    const raydiumFeeApr24h = ammId ? toPercent(farmAprs[ammId]?.apr24h, { alreadyDecimaled: true }) : undefined;\n    const totalApr7d = aprs.reduce((acc, cur) => (acc ? (cur ? acc.add(cur) : acc) : cur), raydiumFeeApr7d);\n    const totalApr30d = aprs.reduce((acc, cur) => (acc ? (cur ? acc.add(cur) : acc) : cur), raydiumFeeApr30d);\n    const totalApr24h = aprs.reduce((acc, cur) => (acc ? (cur ? acc.add(cur) : acc) : cur), raydiumFeeApr24h);\n\n    const rewards =\n      farmInfo.version === 6\n        ? (farmInfo.state.rewardInfos\n            .map((rewardInfo, idx) => {\n              const { rewardOpenTime: openTime, rewardEndTime: endTime, rewardPerSecond } = rewardInfo;\n              const rewardOpenTime = openTime.toNumber()\n                ? new Date(openTime.toNumber() * 1000 + chainTimeOffset)\n                : undefined; // chain time\n              const rewardEndTime = endTime.toNumber()\n                ? new Date(endTime.toNumber() * 1000 + chainTimeOffset)\n                : undefined; // chain time\n              const onlineCurrentDate = Date.now() + chainTimeOffset;\n              if (!rewardOpenTime && !rewardEndTime) return undefined; // if reward is not any state, return undefined to delete it\n              const token = this.scope.mintToToken(\n                (rewardInfo.rewardMint ?? farmInfo.rewardInfos[idx]?.rewardMint)?.toBase58(),\n              );\n              const isRewardBeforeStart = Boolean(rewardOpenTime && isDateBefore(onlineCurrentDate, rewardOpenTime));\n              const isRewardEnded = Boolean(rewardEndTime && isDateAfter(onlineCurrentDate, rewardEndTime));\n              const isRewarding = (!rewardOpenTime && !rewardEndTime) || (!isRewardEnded && !isRewardBeforeStart);\n              const isRwardingBeforeEnd72h =\n                isRewarding &&\n                isDateAfter(\n                  onlineCurrentDate,\n                  offsetDateTime(rewardEndTime, { seconds: -(farmInfo.jsonInfo.rewardPeriodExtend ?? 72 * 60 * 60) }),\n                );\n              const claimableRewards =\n                token &&\n                this.scope.mintToTokenAmount({\n                  mint: token.mint,\n                  amount: sub(rewardInfo.totalReward, rewardInfo.totalRewardEmissioned)!.toFixed(token.decimals),\n                });\n\n              const pendingReward = pendingRewards?.[idx];\n              const apr = aprs[idx];\n              const usedTohaveReward = Boolean(rewardEndTime);\n              const jsonRewardInfo = farmInfo.rewardInfos[idx];\n\n              return {\n                ...jsonRewardInfo,\n                ...rewardInfo,\n                owner: jsonRewardInfo?.rewardSender,\n                apr,\n                token,\n                userPendingReward: pendingReward,\n                userHavedReward: usedTohaveReward,\n                perSecond:\n                  token && this.scope.mintToTokenAmount({ mint: token.mint, amount: rewardPerSecond }).toSignificant(),\n                openTime: rewardOpenTime,\n                endTime: rewardEndTime,\n                isOptionToken: rewardInfo.rewardType === \"Option tokens\",\n                isRewardBeforeStart,\n                isRewardEnded,\n                isRewarding,\n                isRwardingBeforeEnd72h,\n                claimableRewards,\n                version: 6,\n              };\n            })\n            .filter((data) => !!data) as HydratedFarmInfo[\"rewards\"])\n        : farmInfo.state.rewardInfos.map((rewardInfo, idx) => {\n            const pendingReward = pendingRewards?.[idx];\n            const apr = aprs[idx];\n            const token = rewardTokens[idx];\n            const { perSlotReward } = rewardInfo;\n\n            const usedTohaveReward = isMeaningfulNumber(pendingReward) || isMeaningfulNumber(perSlotReward);\n            return {\n              ...rewardInfo,\n              apr,\n              token,\n              userPendingReward: pendingReward,\n              userHavedReward: usedTohaveReward,\n              version: farmInfo.version,\n            };\n          });\n    const userStakedLpAmount =\n      lpToken && farmInfo.ledger?.deposited ? new TokenAmount(lpToken, farmInfo.ledger?.deposited) : undefined;\n\n    return {\n      ...farmInfo,\n      lp: lpToken,\n      lpPrice,\n      base: baseToken,\n      quote: quoteToken,\n      name,\n      isStakePool,\n      isDualFusionPool,\n      isNormalFusionPool,\n      isClosedPool,\n      isUpcomingPool,\n      isStablePool,\n      isNewPool,\n      totalApr7d,\n      raydiumFeeApr7d,\n      totalApr24h,\n      raydiumFeeApr24h,\n      totalApr30d,\n      raydiumFeeApr30d,\n      ammId,\n      tvl,\n      userHasStaked: isMeaningfulNumber(userStakedLpAmount),\n      rewards,\n      userStakedLpAmount,\n      stakedLpAmount,\n    };\n  }\n\n  // token account needed\n  private async _getUserRewardInfo({ payer, rewardInfo }: { payer: PublicKey; rewardInfo: FarmRewardInfo }): Promise<{\n    rewardPubKey?: PublicKey;\n    newInstruction?: AddInstructionParam;\n  }> {\n    if (rewardInfo.rewardMint.equals(SOLMint)) {\n      const txInstructions = await createWSolAccountInstructions({\n        connection: this.scope.connection,\n        owner: this.scope.ownerPubKey,\n        payer,\n        amount: calFarmRewardAmount(rewardInfo),\n      });\n      return {\n        rewardPubKey: txInstructions.signers![0].publicKey,\n        newInstruction: txInstructions,\n      };\n    }\n\n    return {\n      rewardPubKey: await this.scope.account.getCreatedTokenAccount({\n        mint: rewardInfo.rewardMint,\n      })!,\n    };\n  }\n\n  // token account needed\n  public async create({ poolId, rewardInfos, payer }: CreateFarm): Promise<MakeTransaction> {\n    this.checkDisabled();\n    this.scope.checkOwner();\n\n    const poolPubkey = validateAndParsePublicKey({ publicKey: poolId });\n    const poolJsonInfo = this.scope.liquidity.allPools.find((j) => j.id === poolPubkey.toBase58());\n    if (!poolJsonInfo) this.logAndCreateError(\"invalid pool id\");\n\n    const lpMint = new PublicKey(poolJsonInfo!.lpMint);\n    const poolInfo = {\n      lpMint,\n      lockInfo: { lockMint: FARM_LOCK_MINT, lockVault: FARM_LOCK_VAULT },\n      version: 6,\n      rewardInfos,\n      programId: getFarmProgramId(6)!,\n    };\n\n    const txBuilder = this.createTxBuilder();\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\n    const farmKeyPair = Keypair.generate();\n    const lamports = await this.scope.connection.getMinimumBalanceForRentExemption(farmStateV6Layout.span);\n\n    txBuilder.addInstruction({\n      instructions: [\n        SystemProgram.createAccount({\n          fromPubkey: payerPubKey,\n          newAccountPubkey: farmKeyPair.publicKey,\n          lamports,\n          space: farmStateV6Layout.span,\n          programId: poolInfo.programId,\n        }),\n      ],\n      signers: [farmKeyPair],\n    });\n\n    const { publicKey: authority, nonce } = await getAssociatedAuthority({\n      programId: poolInfo.programId,\n      poolId: farmKeyPair.publicKey,\n    });\n\n    const lpVault = await getAssociatedLedgerPoolAccount({\n      programId: poolInfo.programId,\n      poolId: farmKeyPair.publicKey,\n      mint: poolInfo.lpMint,\n      type: \"lpVault\",\n    });\n\n    const rewardInfoConfig: FarmRewardInfoConfig[] = [];\n    const rewardInfoKey: RewardInfoKey[] = [];\n\n    for (const rewardInfo of poolInfo.rewardInfos) {\n      if (rewardInfo.rewardOpenTime >= rewardInfo.rewardEndTime)\n        this.logAndCreateError(\"start time error\", \"rewardInfo.rewardOpenTime\", rewardInfo.rewardOpenTime.toString());\n      if (!poolTypeV6[rewardInfo.rewardType]) this.logAndCreateError(\"rewardType error\", rewardInfo.rewardType);\n      if (rewardInfo.rewardPerSecond <= 0)\n        this.logAndCreateError(\"rewardPerSecond error\", rewardInfo.rewardPerSecond.toString());\n\n      rewardInfoConfig.push(farmRewardInfoToConfig(rewardInfo));\n\n      const { rewardPubKey, newInstruction } = await this._getUserRewardInfo({\n        rewardInfo,\n        payer: payerPubKey,\n      });\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\n\n      if (!rewardPubKey) this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\n\n      const rewardMint = rewardInfo.rewardMint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.mint) : rewardInfo.rewardMint;\n      rewardInfoKey.push({\n        rewardMint,\n        rewardVault: await getAssociatedLedgerPoolAccount({\n          programId: poolInfo.programId,\n          poolId: farmKeyPair.publicKey,\n          mint: rewardMint,\n          type: \"rewardVault\",\n        }),\n        userRewardToken: rewardPubKey!,\n      });\n    }\n\n    const lockUserAccount = await this.scope.account.getCreatedTokenAccount({\n      mint: poolInfo.lockInfo.lockMint,\n    });\n\n    if (!lockUserAccount)\n      this.logAndCreateError(\"cannot found lock vault\", \"tokenAccounts\", this.scope.account.tokenAccounts);\n\n    const createInstruction = makeCreateFarmInstruction({\n      farmKeyPair,\n      owner: this.scope.ownerPubKey,\n      farmAuthority: authority,\n      lpVault,\n      lpMint: poolInfo.lpMint,\n      lockVault: poolInfo.lockInfo.lockVault,\n      lockMint: poolInfo.lockInfo.lockMint,\n      lockUserAccount,\n      programId: poolInfo.programId,\n      rewardInfo: rewardInfoKey,\n      rewardInfoConfig,\n      nonce,\n    });\n\n    return await txBuilder\n      .addInstruction({\n        instructions: [createInstruction],\n      })\n      .build();\n  }\n\n  // token account needed\n  public async restartReward({ farmId, payer, newRewardInfo }: UpdateFarmReward): Promise<MakeTransaction> {\n    const farmInfo = this.getFarm(farmId)!;\n    if (farmInfo!.version !== 6) this.logAndCreateError(\"invalid farm version\", farmInfo!.version);\n\n    const poolKeys = {\n      id: new PublicKey(farmInfo.id),\n      rewardInfos: farmInfo.rewardInfos,\n      lpVault: new PublicKey(farmInfo.lpVault),\n      programId: new PublicKey(farmInfo.programId),\n    };\n\n    if (newRewardInfo.rewardOpenTime >= newRewardInfo.rewardEndTime)\n      this.logAndCreateError(\"start time error\", \"newRewardInfo\", newRewardInfo);\n\n    const payerPubKey = payer || this.scope.ownerPubKey;\n\n    const rewardMint = newRewardInfo.rewardMint.equals(SOLMint)\n      ? new PublicKey(TOKEN_WSOL.mint)\n      : newRewardInfo.rewardMint;\n    const rewardInfo = poolKeys.rewardInfos.find((item) => new PublicKey(item.rewardMint).equals(rewardMint));\n\n    if (!rewardInfo) this.logAndCreateError(\"configuration does not exist\", \"rewardMint\", rewardMint);\n\n    const rewardVault = rewardInfo!.rewardVault ? new PublicKey(rewardInfo!.rewardVault) : SOLMint;\n    const txBuilder = this.createTxBuilder();\n\n    const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\n      rewardInfo: newRewardInfo,\n      payer: payerPubKey,\n    });\n    if (newInstruction) txBuilder.addInstruction(newInstruction);\n\n    if (!userRewardTokenPub)\n      this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\n\n    const data = Buffer.alloc(farmRewardRestartLayout.span);\n    farmRewardRestartLayout.encode(\n      {\n        instruction: 3,\n        rewardReopenTime: parseBigNumberish(newRewardInfo.rewardOpenTime),\n        rewardEndTime: parseBigNumberish(newRewardInfo.rewardEndTime),\n        rewardPerSecond: parseBigNumberish(newRewardInfo.rewardPerSecond),\n      },\n      data,\n    );\n\n    const keys = [\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n      accountMeta({ pubkey: poolKeys.id }),\n      accountMeta({ pubkey: poolKeys.lpVault, isWritable: false }),\n      accountMeta({ pubkey: rewardVault }),\n      accountMeta({ pubkey: userRewardTokenPub! }),\n      accountMeta({ pubkey: this.scope.ownerPubKey, isWritable: false, isSigner: true }),\n    ];\n\n    return await txBuilder\n      .addInstruction({\n        instructions: [new TransactionInstruction({ programId: poolKeys.programId, keys, data })],\n      })\n      .build();\n  }\n\n  // token account needed\n  public async addNewRewardToken(params: UpdateFarmReward): Promise<MakeTransaction> {\n    const { farmId, newRewardInfo, payer } = params;\n    const farmInfo = this.getFarm(farmId)!;\n    if (farmInfo!.version !== 6) this.logAndCreateError(\"invalid farm version\", farmInfo!.version);\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\n    const txBuilder = this.createTxBuilder();\n\n    const rewardVault = await getAssociatedLedgerPoolAccount({\n      programId: new PublicKey(farmInfo.programId),\n      poolId: new PublicKey(farmInfo.id),\n      mint: newRewardInfo.rewardMint,\n      type: \"rewardVault\",\n    });\n\n    const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\n      rewardInfo: newRewardInfo,\n      payer: payerPubKey,\n    });\n    if (newInstruction) txBuilder.addInstruction(newInstruction);\n\n    if (!userRewardTokenPub)\n      this.logAndCreateError(\"annot found target token accounts\", this.scope.account.tokenAccounts);\n\n    const rewardMint = newRewardInfo.rewardMint.equals(SOLMint)\n      ? new PublicKey(TOKEN_WSOL.mint)\n      : newRewardInfo.rewardMint;\n    const data = Buffer.alloc(farmAddRewardLayout.span);\n    farmAddRewardLayout.encode(\n      {\n        instruction: 4,\n        isSet: new BN(1),\n        rewardPerSecond: parseBigNumberish(newRewardInfo.rewardPerSecond),\n        rewardOpenTime: parseBigNumberish(newRewardInfo.rewardOpenTime),\n        rewardEndTime: parseBigNumberish(newRewardInfo.rewardEndTime),\n      },\n      data,\n    );\n\n    const keys = [\n      ...commonSystemAccountMeta,\n      accountMeta({ pubkey: new PublicKey(farmInfo.id) }),\n      accountMeta({ pubkey: new PublicKey(farmInfo.authority), isWritable: false }),\n      accountMeta({ pubkey: rewardMint, isWritable: false }),\n      accountMeta({ pubkey: rewardVault }),\n      accountMeta({ pubkey: userRewardTokenPub! }),\n      accountMeta({ pubkey: this.scope.ownerPubKey, isWritable: false, isSigner: true }),\n    ];\n\n    return await txBuilder\n      .addInstruction({\n        instructions: [new TransactionInstruction({ programId: new PublicKey(farmInfo.programId), keys, data })],\n      })\n      .build();\n  }\n\n  private async _prepareFarmAccounts(params: { mint: PublicKey; farmInfo: SdkParsedFarmInfo }): Promise<{\n    txBuilder: TxBuilder;\n    lpTokenAccount: PublicKey;\n    ledgerAddress: PublicKey;\n    rewardTokenAccountsPublicKeys: PublicKey[];\n    lowVersionKeys: AccountMeta[];\n  }> {\n    const txBuilder = this.createTxBuilder();\n    const { farmInfo } = params;\n\n    const { pubKey: lpTokenAccount, newInstructions } = await this.scope.account.checkOrCreateAta({\n      mint: farmInfo.lpMint,\n    });\n    txBuilder.addInstruction(newInstructions);\n\n    const rewardTokenAccountsPublicKeys = await Promise.all(\n      farmInfo.rewardInfos.map(async ({ rewardMint }) => {\n        const { pubKey, newInstructions } = await this.scope.account.checkOrCreateAta({\n          mint: rewardMint,\n          autoUnwrapWSOLToSOL: true,\n        });\n        txBuilder.addInstruction(newInstructions);\n        return pubKey;\n      }),\n    );\n\n    const ledgerAddress = await getAssociatedLedgerAccount({\n      programId: new PublicKey(farmInfo.programId),\n      poolId: new PublicKey(farmInfo.id),\n      owner: this.scope.ownerPubKey,\n    });\n\n    if (!farmInfo.ledger && farmInfo.version < 6 /* start from v6, no need init ledger any more */) {\n      const instruction = await createAssociatedLedgerAccountInstruction({\n        id: farmInfo.id,\n        programId: farmInfo.programId,\n        version: farmInfo.version,\n        ledger: ledgerAddress,\n        owner: this.scope.ownerPubKey,\n      });\n      txBuilder.addInstruction({ instructions: [instruction] });\n    }\n\n    const lowVersionKeys = [\n      accountMeta({ pubkey: farmInfo.id }),\n      accountMeta({ pubkey: farmInfo.authority, isWritable: false }),\n      accountMeta({ pubkey: ledgerAddress }),\n      accountMeta({ pubkey: this.scope.ownerPubKey, isWritable: false, isSigner: true }),\n      accountMeta({ pubkey: lpTokenAccount }),\n      accountMeta({ pubkey: new PublicKey(farmInfo.jsonInfo.lpVault) }),\n      accountMeta({ pubkey: rewardTokenAccountsPublicKeys[0] }),\n      accountMeta({ pubkey: farmInfo.rewardInfos[0].rewardVault }),\n      accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    ];\n\n    return { txBuilder, lpTokenAccount, rewardTokenAccountsPublicKeys, ledgerAddress, lowVersionKeys };\n  }\n\n  public async deposit(params: FarmDWParam): Promise<MakeTransaction> {\n    this.scope.checkOwner();\n    const { farmId, amount } = params;\n    const farmInfo = this.getParsedFarm(farmId)!;\n    const mint = farmInfo.lpMint;\n    const { version, rewardInfos } = farmInfo;\n    if (!isValidFarmVersion(version)) this.logAndCreateError(\"invalid farm version:\", version);\n\n    const { txBuilder, ledgerAddress, lpTokenAccount, lowVersionKeys, rewardTokenAccountsPublicKeys } =\n      await this._prepareFarmAccounts({ mint, farmInfo });\n\n    const errorMsg = validateFarmRewards({\n      version,\n      rewardInfos,\n      rewardTokenAccountsPublicKeys,\n    });\n    if (errorMsg) this.logAndCreateError(errorMsg);\n\n    const data = Buffer.alloc(dwLayout.span);\n    dwLayout.encode(\n      {\n        instruction: farmDespotVersionToInstruction(version),\n        amount: parseBigNumberish(amount),\n      },\n      data,\n    );\n\n    const keys =\n      version === 6\n        ? [\n            accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n            accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n            accountMeta({ pubkey: farmInfo.id }),\n            accountMeta({ pubkey: farmInfo.authority, isWritable: false }),\n            accountMeta({ pubkey: farmInfo.lpVault.mint }),\n            accountMeta({ pubkey: ledgerAddress }),\n            accountMeta({ pubkey: this.scope.ownerPubKey, isWritable: false, isSigner: true }),\n            accountMeta({ pubkey: lpTokenAccount }),\n          ]\n        : lowVersionKeys;\n\n    if (version !== 3) {\n      for (let index = 1; index < rewardInfos.length; index++) {\n        keys.push(accountMeta({ pubkey: rewardTokenAccountsPublicKeys[index] }));\n        keys.push(accountMeta({ pubkey: rewardInfos[index].rewardVault }));\n      }\n    }\n\n    const newInstruction = new TransactionInstruction({ programId: farmInfo.programId, keys, data });\n\n    return await txBuilder\n      .addInstruction({\n        instructions: [newInstruction],\n      })\n      .build();\n  }\n\n  public async withdraw(params: FarmDWParam): Promise<MakeTransaction> {\n    this.scope.checkOwner();\n    const { farmId, amount } = params;\n    const farmInfo = this.getParsedFarm(farmId)!;\n    const mint = farmInfo.lpMint;\n    const { version, rewardInfos } = farmInfo;\n    if (!isValidFarmVersion(version)) this.logAndCreateError(\"invalid farm version:\", version);\n    const { txBuilder, ledgerAddress, lpTokenAccount, lowVersionKeys, rewardTokenAccountsPublicKeys } =\n      await this._prepareFarmAccounts({ mint, farmInfo });\n\n    const data = Buffer.alloc(dwLayout.span);\n    dwLayout.encode(\n      {\n        instruction: farmWithdrawVersionToInstruction(version),\n        amount: parseBigNumberish(amount),\n      },\n      data,\n    );\n\n    const keys =\n      version === 6\n        ? [\n            accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n            accountMeta({ pubkey: farmInfo.id }),\n            accountMeta({ pubkey: farmInfo.authority, isWritable: false }),\n            accountMeta({ pubkey: farmInfo.lpVault.mint }),\n            accountMeta({ pubkey: ledgerAddress }),\n            accountMeta({ pubkey: this.scope.ownerPubKey, isWritable: false, isSigner: true }),\n            accountMeta({ pubkey: lpTokenAccount }),\n          ]\n        : lowVersionKeys;\n\n    if (version !== 3) {\n      for (let index = 1; index < rewardInfos.length; index++) {\n        keys.push(accountMeta({ pubkey: rewardTokenAccountsPublicKeys[index] }));\n        keys.push(accountMeta({ pubkey: rewardInfos[index].rewardVault }));\n      }\n    }\n    const newInstruction = new TransactionInstruction({ programId: farmInfo.programId, keys, data });\n    return await txBuilder\n      .addInstruction({\n        instructions: [newInstruction],\n      })\n      .build();\n  }\n\n  // token account needed\n  public async withdrawFarmReward({\n    farmId,\n    withdrawMint,\n  }: {\n    farmId: PublicKey;\n    withdrawMint: PublicKey;\n    payer?: PublicKey;\n  }): Promise<MakeTransaction> {\n    this.scope.checkOwner();\n    const farmInfo = this.getParsedFarm(farmId);\n    const { version } = farmInfo;\n    if (version !== 6) this.logAndCreateError(\"invalid farm version\", farmInfo!.version);\n\n    const rewardInfo = farmInfo.rewardInfos.find((item) =>\n      item.rewardMint.equals(withdrawMint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.mint) : withdrawMint),\n    );\n    if (!rewardInfo) this.logAndCreateError(\"withdraw mint error\", \"rewardInfos\", farmInfo);\n\n    const rewardVault = rewardInfo?.rewardVault ?? SOLMint;\n    const txBuilder = this.createTxBuilder();\n\n    let userRewardToken: PublicKey;\n    this._getUserRewardInfo({\n      payer: this.scope.ownerPubKey,\n      rewardInfo: rewardInfo!,\n    });\n\n    if (withdrawMint.equals(SOLMint)) {\n      const txInstruction = await createWSolAccountInstructions({\n        connection: this.scope.connection,\n        owner: this.scope.ownerPubKey,\n        payer: this.scope.ownerPubKey,\n        amount: calFarmRewardAmount(rewardInfo!),\n      });\n      userRewardToken = txInstruction.signers![0].publicKey;\n      txBuilder.addInstruction(txInstruction);\n    } else {\n      const selectUserRewardToken = await this.scope.account.getCreatedTokenAccount({\n        mint: withdrawMint,\n      });\n\n      if (selectUserRewardToken === null) {\n        userRewardToken = await this.scope.account.getAssociatedTokenAccount(withdrawMint);\n        txBuilder.addInstruction({\n          instructions: [\n            createAssociatedTokenAccountInstruction(\n              this.scope.ownerPubKey,\n              userRewardToken,\n              this.scope.ownerPubKey,\n              withdrawMint,\n            ),\n          ],\n        });\n      } else {\n        userRewardToken = selectUserRewardToken!;\n      }\n    }\n\n    const data = Buffer.alloc(withdrawRewardLayout.span);\n    withdrawRewardLayout.encode({ instruction: 5 }, data);\n\n    const keys = [\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n      accountMeta({ pubkey: farmInfo.id }),\n      accountMeta({ pubkey: farmInfo.authority, isWritable: false }),\n      accountMeta({ pubkey: farmInfo.lpVault.mint, isWritable: false }),\n      accountMeta({ pubkey: rewardVault }),\n      accountMeta({ pubkey: userRewardToken }),\n      accountMeta({ pubkey: this.scope.ownerPubKey, isWritable: false, isSigner: true }),\n    ];\n\n    return await txBuilder\n      .addInstruction({\n        instructions: [new TransactionInstruction({ programId: farmInfo.programId, keys, data })],\n      })\n      .build();\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { createLogger } from \"../../common/logger\";\n\nimport {\n  FarmLedgerLayout,\n  farmLedgerLayoutV3_2,\n  farmLedgerLayoutV5_2,\n  farmLedgerLayoutV6_1,\n  FarmStateLayout,\n  farmStateV3Layout,\n  farmStateV5Layout,\n  farmStateV6Layout,\n} from \"./layout\";\nimport { RewardInfoWithKey } from \"./type\";\n\nconst logger = createLogger(\"Raydium_farm_config\");\n\n/* ================= program public keys ================= */\nexport const FARM_PROGRAM_ID_V3 = \"EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q\";\nexport const FARM_PROGRAM_ID_V3_PUBKEY = new PublicKey(FARM_PROGRAM_ID_V3);\nexport const FARM_PROGRAM_ID_V5 = \"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\";\nexport const FARM_PROGRAM_ID_V5_PUBKEY = new PublicKey(FARM_PROGRAM_ID_V5);\nexport const FARM_PROGRAM_ID_V6 = \"FarmqiPv5eAj3j1GMdMCMUGXqPUvmquZtMy86QH6rzhG\";\nexport const FARM_PROGRAM_ID_V6_PUBKEY = new PublicKey(FARM_PROGRAM_ID_V6);\n\nexport type FarmVersion = 3 | 4 | 5 | 6;\n\n// farm program id string => farm version\nexport const FARM_PROGRAMID_TO_VERSION: {\n  [key: string]: FarmVersion;\n} = {\n  [FARM_PROGRAM_ID_V3]: 3,\n  [FARM_PROGRAM_ID_V5]: 5,\n  [FARM_PROGRAM_ID_V6]: 6,\n};\n\n// farm version => farm program id\nexport const FARM_VERSION_TO_PROGRAMID: { [key in FarmVersion]?: PublicKey } & {\n  [K: number]: PublicKey;\n} = {\n  3: FARM_PROGRAM_ID_V3_PUBKEY,\n  5: FARM_PROGRAM_ID_V5_PUBKEY,\n  6: FARM_PROGRAM_ID_V6_PUBKEY,\n};\n\nexport const FARM_LOCK_MINT = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\nexport const FARM_LOCK_VAULT = new PublicKey(\"FrspKwj8i3pNmKwXreTveC4fu7KL5ZbGeXdZBe2XViu1\");\n\n/* ================= index ================= */\n// version => farm state layout\nexport const FARM_VERSION_TO_STATE_LAYOUT: {\n  [version in FarmVersion]?: FarmStateLayout;\n} = {\n  3: farmStateV3Layout,\n  5: farmStateV5Layout,\n  6: farmStateV6Layout,\n};\n\n// version => farm ledger layout\nexport const FARM_VERSION_TO_LEDGER_LAYOUT: {\n  [version in FarmVersion]?: FarmLedgerLayout;\n} = {\n  3: farmLedgerLayoutV3_2,\n  5: farmLedgerLayoutV5_2,\n  6: farmLedgerLayoutV6_1,\n};\n\nexport const isValidFarmVersion = (version: number): boolean => [3, 5, 6].indexOf(version) !== -1;\n\nconst farmDepositInstruction = {\n  3: 10,\n  5: 11,\n  6: 1,\n};\nexport const farmDespotVersionToInstruction = (version: number): number => {\n  const ver = farmDepositInstruction[version];\n  if (!ver) logger.logWithError(\"invalid deposit farm version\");\n  return ver;\n};\n\nconst farmWithdrawInstruction = {\n  3: 11,\n  5: 12,\n  6: 2,\n};\nexport const farmWithdrawVersionToInstruction = (version: number): number => {\n  const ver = farmWithdrawInstruction[version];\n  if (!ver) logger.logWithError(\"invalid withdraw farm version\");\n  return ver;\n};\n\nexport const validateFarmRewards = (params: {\n  version: number;\n  rewardInfos: RewardInfoWithKey[];\n  rewardTokenAccountsPublicKeys: PublicKey[];\n}): (() => string | undefined) => {\n  const { version, rewardInfos, rewardTokenAccountsPublicKeys } = params;\n\n  const infoMsg = `rewardInfo:${JSON.stringify(rewardInfos)}, rewardAccount:${JSON.stringify(\n    rewardTokenAccountsPublicKeys,\n  )}`;\n\n  const validator = {\n    3: (): string | undefined => {\n      if (rewardInfos.length !== 1 || rewardTokenAccountsPublicKeys.length !== 1) {\n        return `rewardInfos or rewardTokenAccounts lengths not equal 1: ${infoMsg}`;\n      }\n    },\n    5: (): string | undefined => {\n      if (rewardInfos.length !== rewardTokenAccountsPublicKeys.length) {\n        return `rewardInfos and rewardTokenAccounts lengths not equal: ${infoMsg}`;\n      }\n    },\n    6: (): string | undefined => {\n      if (!rewardTokenAccountsPublicKeys.length || rewardInfos.length !== rewardTokenAccountsPublicKeys.length) {\n        return `no rewardTokenAccounts or rewardInfos and rewardTokenAccounts lengths not equal: ${infoMsg}`;\n      }\n    },\n  };\n\n  return validator[version]?.();\n};\n\nexport const poolTypeV6 = { \"Standard SPL\": 0, \"Option tokens\": 1 };\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport {\n  blob,\n  GetLayoutSchemaFromStructure,\n  GetStructureFromLayoutSchema,\n  GetStructureSchema,\n  publicKey,\n  seq,\n  struct,\n  u128,\n  u64,\n  u8,\n} from \"../../marshmallow\";\n\nimport { poolTypeV6 } from \"./config\";\nimport { RewardType } from \"./type\";\n\nexport const associatedLedgerAccountLayout = struct([u8(\"instruction\")]);\nexport const withdrawRewardLayout = struct([u8(\"instruction\")]);\n\nconst farmStateRewardInfoV6Layout = struct([\n  u64(\"rewardState\"),\n  u64(\"rewardOpenTime\"),\n  u64(\"rewardEndTime\"),\n  u64(\"rewardLastUpdateTime\"),\n  u64(\"totalReward\"),\n  u64(\"totalRewardEmissioned\"),\n  u64(\"rewardClaimed\"),\n  u64(\"rewardPerSecond\"),\n  u128(\"accRewardPerShare\"),\n  publicKey(\"rewardVault\"),\n  publicKey(\"rewardMint\"),\n  publicKey(\"rewardSender\"),\n  u64(\"rewardType\"),\n  seq(u64(), 15, \"padding\"),\n]);\n\nexport const realFarmStateV3Layout = struct([\n  u64(\"state\"),\n  u64(\"nonce\"),\n  publicKey(\"lpVault\"),\n  publicKey(\"rewardVault\"),\n  publicKey(),\n  publicKey(),\n  u64(),\n  u64(),\n  u64(\"totalReward\"),\n  u128(\"perShareReward\"),\n  u64(\"lastSlot\"),\n  u64(\"perSlotReward\"),\n]);\n\nexport const realFarmStateV5Layout = struct([\n  u64(\"state\"),\n  u64(\"nonce\"),\n  publicKey(\"lpVault\"),\n  publicKey(\"rewardVaultA\"),\n  u64(\"totalRewardA\"),\n  u128(\"perShareRewardA\"),\n  u64(\"perSlotRewardA\"),\n  u8(\"option\"),\n  publicKey(\"rewardVaultB\"),\n  blob(7),\n  u64(\"totalRewardB\"),\n  u128(\"perShareRewardB\"),\n  u64(\"perSlotRewardB\"),\n  u64(\"lastSlot\"),\n  publicKey(),\n]);\n\nexport const realFarmV6Layout = struct([\n  u64(),\n  u64(\"state\"),\n  u64(\"nonce\"),\n  u64(\"validRewardTokenNum\"),\n  u128(\"rewardMultiplier\"),\n  u64(\"rewardPeriodMax\"),\n  u64(\"rewardPeriodMin\"),\n  u64(\"rewardPeriodExtend\"),\n  publicKey(\"lpMint\"),\n  publicKey(\"lpVault\"),\n  seq(farmStateRewardInfoV6Layout, 5, \"rewardInfos\"),\n  publicKey(\"creator\"),\n  publicKey(),\n  seq(u64(), 32, \"padding\"),\n]);\n\nexport const farmStateV3Layout = new Proxy(\n  realFarmStateV3Layout as GetStructureFromLayoutSchema<\n    {\n      version: 3;\n      rewardInfos: {\n        rewardVault: PublicKey;\n        totalReward: BN;\n        perSlotReward: BN;\n        perShareReward: BN;\n      }[];\n    } & GetLayoutSchemaFromStructure<typeof realFarmStateV3Layout>\n  >,\n  {\n    get(target, p, receiver): any {\n      if (p === \"decode\")\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\n          const originalResult = target.decode(...decodeParams);\n          return {\n            ...originalResult,\n            version: 3,\n            rewardInfos: [\n              {\n                rewardVault: originalResult.rewardVault,\n                totalReward: originalResult.totalReward,\n                perSlotReward: originalResult.perSlotReward,\n                perShareReward: originalResult.perShareReward,\n              },\n            ],\n          };\n        };\n      else return Reflect.get(target, p, receiver);\n    },\n  },\n);\n\nexport const farmStateV5Layout = new Proxy(\n  realFarmStateV5Layout as GetStructureFromLayoutSchema<\n    {\n      version: 5;\n      rewardInfos: {\n        rewardVault: PublicKey;\n        totalReward: BN;\n        perSlotReward: BN;\n        perShareReward: BN;\n      }[];\n    } & GetLayoutSchemaFromStructure<typeof realFarmStateV5Layout>\n  >,\n  {\n    get(target, p, receiver): any {\n      if (p === \"decode\")\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\n          const originalResult = target.decode(...decodeParams);\n          return {\n            ...originalResult,\n            version: 5,\n            rewardInfos: [\n              {\n                rewardVault: originalResult.rewardVaultA,\n                totalReward: originalResult.totalRewardA,\n                perSlotReward: originalResult.perSlotRewardA,\n                perShareReward: originalResult.perShareRewardA,\n              },\n              {\n                rewardVault: originalResult.rewardVaultB,\n                totalReward: originalResult.totalRewardB,\n                perSlotReward: originalResult.perSlotRewardB,\n                perShareReward: originalResult.perShareRewardB,\n              },\n            ],\n          };\n        };\n      else return Reflect.get(target, p, receiver);\n    },\n  },\n);\n\nexport const farmStateV6Layout = new Proxy(\n  realFarmV6Layout as GetStructureFromLayoutSchema<\n    {\n      version: 6;\n      rewardInfos: {\n        rewardState: BN;\n        rewardOpenTime: BN;\n        rewardEndTime: BN;\n        rewardLastUpdateTime: BN;\n        totalReward: BN;\n        totalRewardEmissioned: BN;\n        rewardClaimed: BN;\n        rewardPerSecond: BN;\n        accRewardPerShare: BN;\n        rewardVault: PublicKey;\n        rewardMint: PublicKey;\n        rewardSender: PublicKey;\n        rewardType: RewardType;\n      }[];\n    } & GetLayoutSchemaFromStructure<typeof realFarmV6Layout>\n  >,\n  {\n    get(target, p, receiver): any {\n      if (p === \"decode\")\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\n          const originalResult = target.decode(...decodeParams);\n          return {\n            ...originalResult,\n            version: 6,\n            rewardInfos: originalResult.rewardInfos.map((item) => ({\n              ...item,\n              rewardType: (Object.entries(poolTypeV6).find((i) => String(i[1]) === item.rewardType.toString()) ?? [\n                \"Standard SPL\",\n              ])[0],\n            })),\n          };\n        };\n      else return Reflect.get(target, p, receiver);\n    },\n  },\n);\n\nexport const farmRewardTimeInfoLayout = struct([\n  u64(\"isSet\"),\n  u64(\"rewardPerSecond\"),\n  u64(\"rewardOpenTime\"),\n  u64(\"rewardEndTime\"),\n  u64(\"rewardType\"),\n]);\n\nexport const farmRewardLayout = struct([\n  u8(\"instruction\"),\n  u64(\"nonce\"),\n  seq(farmRewardTimeInfoLayout, 5, \"rewardTimeInfo\"),\n]);\n\nexport const farmRewardRestartLayout = struct([\n  u8(\"instruction\"),\n  u64(\"rewardReopenTime\"),\n  u64(\"rewardEndTime\"),\n  u64(\"rewardPerSecond\"),\n]);\n\nexport const farmAddRewardLayout = struct([\n  u8(\"instruction\"),\n  u64(\"isSet\"),\n  u64(\"rewardPerSecond\"),\n  u64(\"rewardOpenTime\"),\n  u64(\"rewardEndTime\"),\n]);\n\nexport type FarmStateLayoutV3 = typeof farmStateV3Layout;\nexport type FarmStateLayoutV5 = typeof farmStateV5Layout;\nexport type FarmStateLayoutV6 = typeof farmStateV6Layout;\n\nexport type FarmStateV3 = GetStructureSchema<FarmStateLayoutV3>;\nexport type FarmStateV5 = GetStructureSchema<FarmStateLayoutV5>;\nexport type FarmStateV6 = GetStructureSchema<FarmStateLayoutV6>;\n\nexport type FarmState = FarmStateV3 | FarmStateV5 | FarmStateV6;\n// farmStateLayoutV3\nexport type FarmStateLayout = FarmStateLayoutV3 | FarmStateLayoutV5 | FarmStateLayoutV6;\n\n/* ================= ledger layouts ================= */\nexport const farmLedgerLayoutV3_1 = struct([\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u64(), 1, \"rewardDebts\"),\n]);\n\nexport const farmLedgerLayoutV3_2 = struct([\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u128(), 1, \"rewardDebts\"),\n  seq(u64(), 17),\n]);\n\nexport const farmLedgerLayoutV5_1 = struct([\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u64(), 2, \"rewardDebts\"),\n]);\n\nexport const farmLedgerLayoutV5_2 = struct([\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u128(), 2, \"rewardDebts\"),\n  seq(u64(), 17),\n]);\n\nexport const farmLedgerLayoutV6_1 = struct([\n  u64(),\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u128(), 5, \"rewardDebts\"),\n  seq(u64(), 16),\n]);\n\nexport type FarmLedgerLayoutV3_1 = typeof farmLedgerLayoutV3_1;\nexport type FarmLedgerLayoutV3_2 = typeof farmLedgerLayoutV3_2;\nexport type FarmLedgerLayoutV5_1 = typeof farmLedgerLayoutV5_1;\nexport type FarmLedgerLayoutV5_2 = typeof farmLedgerLayoutV5_2;\nexport type FarmLedgerLayoutV6_1 = typeof farmLedgerLayoutV6_1;\nexport type FarmLedgerLayout =\n  | FarmLedgerLayoutV3_1\n  | FarmLedgerLayoutV3_2\n  | FarmLedgerLayoutV5_1\n  | FarmLedgerLayoutV5_2\n  | FarmLedgerLayoutV6_1;\n\nexport type FarmLedgerV3_1 = GetStructureSchema<FarmLedgerLayoutV3_1>;\nexport type FarmLedgerV3_2 = GetStructureSchema<FarmLedgerLayoutV3_2>;\nexport type FarmLedgerV5_1 = GetStructureSchema<FarmLedgerLayoutV5_1>;\nexport type FarmLedgerV5_2 = GetStructureSchema<FarmLedgerLayoutV5_2>;\nexport type FarmLedgerV6_1 = GetStructureSchema<FarmLedgerLayoutV6_1>;\nexport type FarmLedger = FarmLedgerV3_1 | FarmLedgerV3_2 | FarmLedgerV5_1 | FarmLedgerV5_2 | FarmLedgerV6_1;\n\nexport const dwLayout = struct([u8(\"instruction\"), u64(\"amount\")]);\n","import { Keypair, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { createLogger } from \"../../common/logger\";\nimport { accountMeta, commonSystemAccountMeta, SOLMint } from \"../../common/pubKey\";\n\nimport { associatedLedgerAccountLayout, farmRewardLayout } from \"./layout\";\nimport { FarmRewardInfoConfig, RewardInfoKey } from \"./type\";\n\nconst logger = createLogger(\"Raydium_farm_instruction\");\n\nexport async function createAssociatedLedgerAccountInstruction(params: {\n  version: number;\n  id: PublicKey;\n  programId: PublicKey;\n  ledger: PublicKey;\n  owner: PublicKey;\n}): Promise<TransactionInstruction> {\n  const { version, id, ledger, programId, owner } = params;\n  const instruction = { 3: 9, 5: 10 }[version];\n  if (!instruction) logger.logWithError(`invalid farm pool version: ${version}`);\n\n  const data = Buffer.alloc(associatedLedgerAccountLayout.span);\n  associatedLedgerAccountLayout.encode(\n    {\n      instruction: instruction!,\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: id }),\n    accountMeta({ pubkey: ledger }),\n    accountMeta({ pubkey: owner, isWritable: false }),\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n    accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\n  ];\n\n  return new TransactionInstruction({\n    programId,\n    keys,\n    data,\n  });\n}\n\ninterface CreateFarmInstruction {\n  farmKeyPair: Keypair;\n  farmAuthority: PublicKey;\n  lpVault: PublicKey;\n  lpMint: PublicKey;\n  lockVault: PublicKey;\n  lockMint: PublicKey;\n  lockUserAccount?: PublicKey;\n  programId: PublicKey;\n  owner: PublicKey;\n  rewardInfo: RewardInfoKey[];\n  rewardInfoConfig: FarmRewardInfoConfig[];\n  nonce: number;\n}\nexport function makeCreateFarmInstruction(params: CreateFarmInstruction): TransactionInstruction {\n  const data = Buffer.alloc(farmRewardLayout.span);\n  farmRewardLayout.encode(\n    {\n      instruction: 0,\n      nonce: new BN(params.nonce),\n      rewardTimeInfo: params.rewardInfoConfig,\n    },\n    data,\n  );\n\n  const keys = [\n    ...commonSystemAccountMeta,\n    accountMeta({ pubkey: params.farmKeyPair.publicKey }),\n    accountMeta({ pubkey: params.farmAuthority, isWritable: false }),\n    accountMeta({ pubkey: params.lpVault }),\n    accountMeta({ pubkey: params.lpMint, isWritable: false }),\n    accountMeta({ pubkey: params.lockVault }),\n    accountMeta({ pubkey: params.lockMint, isWritable: false }),\n    accountMeta({ pubkey: params.lockUserAccount ?? SOLMint }),\n    accountMeta({ pubkey: params.owner, isWritable: false, isSigner: true }),\n  ];\n\n  for (const item of params.rewardInfo) {\n    keys.push(\n      ...[\n        accountMeta({ pubkey: item.rewardMint, isWritable: false }),\n        accountMeta({ pubkey: item.rewardVault }),\n        accountMeta({ pubkey: item.userRewardToken }),\n      ],\n    );\n  }\n\n  return new TransactionInstruction({ programId: params.programId, keys, data });\n}\n","import { Connection, PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { GetMultipleAccountsInfoConfig, getMultipleAccountsInfoWithCustomFlags } from \"../../common/accountInfo\";\nimport { parseBigNumberish, BN_ONE, BN_TEN, toTotalPrice, toFraction } from \"../../common/bignumber\";\nimport { createLogger } from \"../../common/logger\";\nimport { PublicKeyish, validateAndParsePublicKey, RAYMint } from \"../../common/pubKey\";\nimport { findProgramAddress, ProgramAddress } from \"../../common/txTool\";\nimport { DateParam, isDateAfter, isDateBefore } from \"../../common/date\";\nimport { splAccountLayout } from \"../account/layout\";\nimport { SplAccount } from \"../account/types\";\n\nimport {\n  FARM_PROGRAMID_TO_VERSION,\n  FARM_VERSION_TO_LEDGER_LAYOUT,\n  FARM_VERSION_TO_PROGRAMID,\n  FARM_VERSION_TO_STATE_LAYOUT,\n  FarmVersion,\n} from \"./config\";\nimport { TokenAmount, Fraction, Price, Token } from \"../../module\";\nimport { FarmLedger, FarmLedgerLayout, FarmState, FarmStateLayout } from \"./layout\";\nimport { FarmPoolJsonInfo, FarmPoolKeys, FarmRewardInfo, FarmRewardInfoConfig, SdkParsedFarmInfo } from \"./type\";\nimport { jsonInfo2PoolKeys } from \"../../common\";\n\nconst logger = createLogger(\"Raydium.farm.util\");\ninterface AssociatedLedgerPoolAccount {\n  programId: PublicKey;\n  poolId: PublicKey;\n  mint: PublicKey;\n  type: \"lpVault\" | \"rewardVault\";\n}\n\nexport async function getAssociatedLedgerPoolAccount({\n  programId,\n  poolId,\n  mint,\n  type,\n}: AssociatedLedgerPoolAccount): Promise<PublicKey> {\n  const { publicKey } = await findProgramAddress(\n    [\n      poolId.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from(\n        type === \"lpVault\" ? \"lp_vault_associated_seed\" : type === \"rewardVault\" ? \"reward_vault_associated_seed\" : \"\",\n        \"utf-8\",\n      ),\n    ],\n    programId,\n  );\n  return publicKey;\n}\n\nexport function getFarmVersion(programId: PublicKeyish): FarmVersion {\n  const programIdPubKey = validateAndParsePublicKey({ publicKey: programId });\n  const programIdString = programIdPubKey.toBase58();\n\n  const version = FARM_PROGRAMID_TO_VERSION[programIdString];\n\n  return version;\n}\n\nexport async function getAssociatedLedgerAccount({\n  programId,\n  poolId,\n  owner,\n}: {\n  programId: PublicKey;\n  poolId: PublicKey;\n  owner: PublicKey;\n}): Promise<PublicKey> {\n  const { publicKey } = await findProgramAddress(\n    [\n      poolId.toBuffer(),\n      owner.toBuffer(),\n      Buffer.from(\n        getFarmVersion(programId) === 6 ? \"farmer_info_associated_seed\" : \"staker_info_v2_associated_seed\",\n        \"utf-8\",\n      ),\n    ],\n    programId,\n  );\n  return publicKey;\n}\n\nexport const getAssociatedAuthority = async ({\n  programId,\n  poolId,\n}: {\n  programId: PublicKey;\n  poolId: PublicKey;\n}): Promise<ProgramAddress> => await findProgramAddress([poolId.toBuffer()], programId);\n\nexport function getFarmProgramId(version: number): PublicKey | undefined {\n  const programId = FARM_VERSION_TO_PROGRAMID[version];\n\n  return programId;\n}\n\nexport function farmRewardInfoToConfig(data: FarmRewardInfo): FarmRewardInfoConfig {\n  return {\n    isSet: new BN(1),\n    rewardPerSecond: parseBigNumberish(data.rewardPerSecond),\n    rewardOpenTime: parseBigNumberish(data.rewardOpenTime),\n    rewardEndTime: parseBigNumberish(data.rewardEndTime),\n    rewardType: parseBigNumberish(data.rewardType),\n  };\n}\n\nexport function calFarmRewardAmount(data: FarmRewardInfo): BN {\n  return parseBigNumberish(data.rewardEndTime)\n    .sub(parseBigNumberish(data.rewardOpenTime))\n    .mul(parseBigNumberish(data.rewardPerSecond));\n}\n\nexport function getFarmLedgerLayout(version: number): FarmLedgerLayout | undefined {\n  const ledgerLayout = FARM_VERSION_TO_LEDGER_LAYOUT[version];\n  if (!ledgerLayout) logger.logWithError(\"invalid version\", version);\n  return ledgerLayout;\n}\n\nexport function getFarmStateLayout(version: number): FarmStateLayout | undefined {\n  const stateLayout = FARM_VERSION_TO_STATE_LAYOUT[version];\n  if (!stateLayout) logger.logWithError(\"invalid version\", version);\n  return stateLayout;\n}\n\nexport function updateFarmPoolInfo(\n  poolInfo: FarmState,\n  lpVault: SplAccount,\n  slot: number,\n  chainTime: number,\n): FarmState {\n  if (poolInfo.version === 3 || poolInfo.version === 5) {\n    if (poolInfo.lastSlot.gte(new BN(slot))) return poolInfo;\n\n    const spread = new BN(slot).sub(poolInfo.lastSlot);\n    poolInfo.lastSlot = new BN(slot);\n\n    for (const itemRewardInfo of poolInfo.rewardInfos) {\n      if (lpVault.amount.eq(new BN(0))) continue;\n\n      const reward = itemRewardInfo.perSlotReward.mul(spread);\n      itemRewardInfo.perShareReward = itemRewardInfo.perShareReward.add(\n        reward.mul(new BN(10).pow(new BN(poolInfo.version === 3 ? 9 : 15))).div(lpVault.amount),\n      );\n      itemRewardInfo.totalReward = itemRewardInfo.totalReward.add(reward);\n    }\n  } else if (poolInfo.version === 6) {\n    for (const itemRewardInfo of poolInfo.rewardInfos) {\n      if (itemRewardInfo.rewardState.eq(new BN(0))) continue;\n      const updateTime = BN.min(new BN(chainTime), itemRewardInfo.rewardEndTime);\n      if (itemRewardInfo.rewardOpenTime.gte(updateTime)) continue;\n      const spread = updateTime.sub(itemRewardInfo.rewardLastUpdateTime);\n      let reward = spread.mul(itemRewardInfo.rewardPerSecond);\n      const leftReward = itemRewardInfo.totalReward.sub(itemRewardInfo.totalRewardEmissioned);\n      if (leftReward.lt(reward)) {\n        reward = leftReward;\n        itemRewardInfo.rewardLastUpdateTime = itemRewardInfo.rewardLastUpdateTime.add(\n          leftReward.div(itemRewardInfo.rewardPerSecond),\n        );\n      } else {\n        itemRewardInfo.rewardLastUpdateTime = updateTime;\n      }\n      if (lpVault.amount.eq(new BN(0))) continue;\n      itemRewardInfo.accRewardPerShare = itemRewardInfo.accRewardPerShare.add(\n        reward.mul(poolInfo.rewardMultiplier).div(lpVault.amount),\n      );\n      itemRewardInfo.totalRewardEmissioned = itemRewardInfo.totalRewardEmissioned.add(reward);\n    }\n  }\n  return poolInfo;\n}\n\ninterface FarmPoolsInfo {\n  [id: string]: {\n    state: FarmState;\n    lpVault: SplAccount;\n    ledger?: FarmLedger;\n    wrapped?: { pendingRewards: BN[] };\n  };\n}\n\nexport interface FarmFetchMultipleInfoParams {\n  connection: Connection;\n  farmPools: FarmPoolJsonInfo[];\n  owner?: PublicKey;\n  config?: GetMultipleAccountsInfoConfig;\n}\n\nexport async function fetchMultipleFarmInfoAndUpdate({\n  connection,\n  farmPools,\n  owner,\n  config,\n}: FarmFetchMultipleInfoParams): Promise<FarmPoolsInfo> {\n  let hasNotV6Pool = false;\n  let hasV6Pool = false;\n  const tenBN = new BN(10);\n\n  const publicKeys: {\n    pubkey: PublicKey;\n    version: number;\n    key: \"state\" | \"lpVault\" | \"ledger\";\n    poolId: PublicKey;\n  }[] = [];\n\n  for (const poolInfo of farmPools) {\n    const pool = jsonInfo2PoolKeys(poolInfo);\n    if (pool.version === 6) hasV6Pool = true;\n    else hasNotV6Pool = true;\n\n    publicKeys.push(\n      {\n        pubkey: pool.id,\n        version: pool.version,\n        key: \"state\",\n        poolId: pool.id,\n      },\n      {\n        pubkey: pool.lpVault,\n        version: pool.version,\n        key: \"lpVault\",\n        poolId: pool.id,\n      },\n    );\n\n    if (owner) {\n      publicKeys.push({\n        pubkey: await getAssociatedLedgerAccount({ programId: pool.programId, poolId: pool.id, owner }),\n        version: pool.version,\n        key: \"ledger\",\n        poolId: pool.id,\n      });\n    }\n  }\n\n  const poolsInfo: FarmPoolsInfo = {};\n  const accountsInfo = await getMultipleAccountsInfoWithCustomFlags(connection, publicKeys, config);\n  for (const { pubkey, version, key, poolId, accountInfo } of accountsInfo) {\n    const _poolId = poolId.toBase58();\n    poolsInfo[_poolId] = { ...poolsInfo[_poolId] };\n    if (key === \"state\") {\n      const stateLayout = getFarmStateLayout(version);\n      if (!accountInfo || !accountInfo.data || accountInfo.data.length !== stateLayout!.span)\n        logger.logWithError(`invalid farm state account info, pools.id, ${pubkey}`);\n      poolsInfo[_poolId].state = stateLayout!.decode(accountInfo!.data);\n    } else if (key === \"lpVault\") {\n      if (!accountInfo || !accountInfo.data || accountInfo.data.length !== splAccountLayout.span)\n        logger.logWithError(`invalid farm lp vault account info, pools.lpVault, ${pubkey}`);\n      poolsInfo[_poolId].lpVault = splAccountLayout.decode(accountInfo!.data);\n    } else if (key === \"ledger\") {\n      const legerLayout = getFarmLedgerLayout(version)!;\n      if (accountInfo && accountInfo.data) {\n        if (accountInfo.data.length !== legerLayout.span)\n          logger.logWithError(`invalid farm ledger account info, ledger, ${pubkey}`);\n        poolsInfo[_poolId].ledger = legerLayout.decode(accountInfo.data);\n      }\n    }\n  }\n\n  const slot = hasV6Pool || hasNotV6Pool ? await connection.getSlot() : 0;\n  const chainTime = hasV6Pool ? (await connection.getBlockTime(slot)) ?? 0 : 0;\n\n  for (const poolId of Object.keys(poolsInfo)) {\n    poolsInfo[poolId].state = updateFarmPoolInfo(poolsInfo[poolId].state, poolsInfo[poolId].lpVault, slot, chainTime);\n  }\n\n  for (const [poolId, { state, ledger }] of Object.entries(poolsInfo)) {\n    if (ledger) {\n      const multiplier =\n        state.version === 6\n          ? state.rewardMultiplier\n          : state.rewardInfos.length === 1\n          ? tenBN.pow(new BN(9))\n          : tenBN.pow(new BN(15));\n\n      const pendingRewards = state.rewardInfos.map((rewardInfo, index) => {\n        const rewardDebt = ledger.rewardDebts[index];\n        const pendingReward = ledger.deposited\n          .mul(state.version === 6 ? rewardInfo.accRewardPerShare : rewardInfo.perShareReward)\n          .div(multiplier)\n          .sub(rewardDebt);\n\n        return pendingReward;\n      });\n\n      poolsInfo[poolId].wrapped = {\n        ...poolsInfo[poolId].wrapped,\n        pendingRewards,\n      };\n    }\n  }\n\n  return poolsInfo;\n}\n\n/** and state info  */\nexport async function mergeSdkFarmInfo(options: FarmFetchMultipleInfoParams): Promise<SdkParsedFarmInfo[]> {\n  const { farmPools } = options;\n  const rawInfos = await fetchMultipleFarmInfoAndUpdate(options);\n  const result = farmPools.map(\n    (pool, idx) =>\n      ({\n        ...farmPools[idx],\n        ...jsonInfo2PoolKeys(pool),\n        ...rawInfos[pool.id],\n        jsonInfo: farmPools[idx],\n      } as unknown as SdkParsedFarmInfo),\n  );\n  return result;\n}\n\nexport function judgeFarmType(\n  info: SdkParsedFarmInfo,\n  currentTime: DateParam = Date.now(),\n): \"closed pool\" | \"normal fusion pool\" | \"dual fusion pool\" | undefined | \"upcoming pool\" {\n  if (info.version === 6) {\n    const rewardInfos = info.state.rewardInfos;\n    if (rewardInfos.every(({ rewardOpenTime }) => isDateBefore(currentTime, rewardOpenTime.toNumber(), { unit: \"s\" })))\n      return \"upcoming pool\";\n    if (rewardInfos.every(({ rewardEndTime }) => isDateAfter(currentTime, rewardEndTime.toNumber(), { unit: \"s\" })))\n      return \"closed pool\";\n  } else {\n    const perSlotRewards = info.state.rewardInfos.map(({ perSlotReward }) => perSlotReward);\n    if (perSlotRewards.length === 2) {\n      // v5\n      if (String(perSlotRewards[0]) === \"0\" && String(perSlotRewards[1]) !== \"0\") {\n        return \"normal fusion pool\"; // reward xxx token\n      }\n      if (String(perSlotRewards[0]) !== \"0\" && String(perSlotRewards[1]) !== \"0\") {\n        return \"dual fusion pool\"; // reward ray and xxx token\n      }\n      if (String(perSlotRewards[0]) === \"0\" && String(perSlotRewards[1]) === \"0\") {\n        return \"closed pool\";\n      }\n    } else if (perSlotRewards.length === 1) {\n      // v3\n      if (String(perSlotRewards[0]) === \"0\") {\n        return \"closed pool\";\n      }\n    }\n  }\n}\n\nexport function whetherIsStakeFarmPool(info: SdkParsedFarmInfo): boolean {\n  return info.state.rewardInfos.length === 1 && String(info.lpMint) === RAYMint.toBase58();\n}\n\nexport function calculateFarmPoolAprList(\n  info: SdkParsedFarmInfo,\n  payload: {\n    currentBlockChainDate: Date;\n    blockSlotCountForSecond: number;\n    tvl: TokenAmount | undefined;\n    rewardTokens: (Token | undefined)[];\n    rewardTokenPrices: (Price | undefined)[];\n  },\n): (Fraction | undefined)[] {\n  if (info.version === 6) {\n    return info.state.rewardInfos.map(({ rewardPerSecond, rewardOpenTime, rewardEndTime }, idx) => {\n      // don't calculate upcoming reward || inactive reward\n      const isRewardBeforeStart = isDateBefore(payload.currentBlockChainDate, rewardOpenTime.toNumber(), { unit: \"s\" });\n      const isRewardAfterEnd = isDateAfter(payload.currentBlockChainDate, rewardEndTime.toNumber(), { unit: \"s\" });\n      if (isRewardBeforeStart || isRewardAfterEnd) return undefined;\n      const rewardToken = payload.rewardTokens[idx];\n      if (!rewardToken) return undefined;\n      const rewardTokenPrice = payload.rewardTokenPrices[idx];\n      if (!rewardTokenPrice) return undefined;\n      const rewardtotalPricePerYear = toTotalPrice(\n        new Fraction(rewardPerSecond, BN_ONE)\n          .div(BN_TEN.pow(new BN(rewardToken.decimals || 1)))\n          .mul(new BN(60 * 60 * 24 * 365)),\n        rewardTokenPrice,\n      );\n      if (!payload.tvl) return undefined;\n      // if tvl is zero, apr should be zero\n      const apr = payload.tvl.isZero() ? toFraction(0) : rewardtotalPricePerYear.div(payload.tvl ?? BN_ONE);\n      return apr;\n    });\n  } else {\n    const calcAprList = info.state.rewardInfos.map(({ perSlotReward }, idx) => {\n      const rewardToken = payload.rewardTokens[idx];\n      if (!rewardToken) return undefined;\n      const rewardTokenPrice = payload.rewardTokenPrices[idx];\n      if (!rewardTokenPrice) return undefined;\n      const rewardtotalPricePerYear = toTotalPrice(\n        new Fraction(perSlotReward, BN_ONE)\n          .div(BN_TEN.pow(new BN(rewardToken.decimals || 1)))\n          .mul(new BN(payload.blockSlotCountForSecond * 60 * 60 * 24 * 365)),\n        rewardTokenPrice,\n      );\n      if (!payload.tvl) return undefined;\n      // if tvl is zero, apr should be zero\n      const apr = payload.tvl.isZero() ? toFraction(0) : rewardtotalPricePerYear.div(payload.tvl ?? BN_ONE);\n      return apr;\n    });\n    return calcAprList;\n  }\n}\n","import { ComputeBudgetProgram } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { ApiJsonPairInfo } from \"../../api\";\n\nimport { BN_ONE, BN_ZERO, divCeil, Numberish, parseNumberInfo, toBN, toTokenPrice } from \"../../common/bignumber\";\nimport { createLogger } from \"../../common/logger\";\nimport { PublicKeyish, SOLMint, validateAndParsePublicKey, WSOLMint } from \"../../common/pubKey\";\nimport { jsonInfo2PoolKeys } from \"../../common/utility\";\nimport { Fraction, Percent, Price, Token, TokenAmount } from \"../../module\";\nimport { makeTransferInstruction } from \"../account/instruction\";\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\nimport { SwapExtInfo } from \"../trade/type\";\nimport { LoadParams, MakeMultiTransaction, MakeTransaction } from \"../type\";\n\nimport { LIQUIDITY_FEES_DENOMINATOR, LIQUIDITY_FEES_NUMERATOR } from \"./constant\";\nimport {\n  makeAddLiquidityInstruction,\n  makeAMMSwapInstruction,\n  makeCreatePoolInstruction,\n  makeInitPoolInstruction,\n  makeRemoveLiquidityInstruction,\n} from \"./instruction\";\nimport { getDxByDyBaseIn, getDyByDxBaseIn, getStablePrice, StableLayout } from \"./stable\";\nimport {\n  AmountSide,\n  CreatePoolParam,\n  InitPoolParam,\n  LiquidityAddTransactionParams,\n  LiquidityComputeAmountOutParams,\n  LiquidityComputeAmountOutReturn,\n  LiquidityComputeAnotherAmountParams,\n  LiquidityFetchMultipleInfoParams,\n  LiquidityPoolInfo,\n  LiquidityPoolJsonInfo,\n  LiquidityRemoveTransactionParams,\n  LiquiditySide,\n  LiquiditySwapTransactionParams,\n  PairJsonInfo,\n  SDKParsedLiquidityInfo,\n} from \"./type\";\nimport {\n  getAmountSide,\n  getAmountsSide,\n  getAssociatedPoolKeys,\n  includesToken,\n  isValidFixedSide,\n  makeSimulationPoolInfo,\n} from \"./util\";\n\nexport default class Liquidity extends ModuleBase {\n  private _poolInfos: LiquidityPoolJsonInfo[] = [];\n  private _poolInfoMap: Map<string, LiquidityPoolJsonInfo> = new Map();\n  private _pairsInfo: PairJsonInfo[] = [];\n  private _pairsInfoMap: Map<string, PairJsonInfo> = new Map();\n  private _lpTokenMap: Map<string, Token> = new Map();\n  private _lpPriceMap: Map<string, Price> = new Map();\n  private _officialIds: Set<string> = new Set();\n  private _unOfficialIds: Set<string> = new Set();\n  private _sdkParseInfoCache: Map<string, SDKParsedLiquidityInfo[]> = new Map();\n  private _stableLayout: StableLayout;\n  constructor(params: ModuleBaseProps) {\n    super(params);\n    this._stableLayout = new StableLayout({ connection: this.scope.connection });\n  }\n\n  public async load(params?: LoadParams): Promise<void> {\n    await this.scope.fetchLiquidity(params?.forceUpdate);\n    if (!this.scope.apiData.liquidityPools) return;\n    const { data } = this.scope.apiData.liquidityPools;\n    const [official, unOfficial] = [data.official || [], data.unOfficial || []];\n    this._poolInfos = [...official, ...unOfficial];\n    this._officialIds = new Set(\n      official.map((info) => {\n        const symbol = `${this.scope.token.allTokenMap.get(info.baseMint)?.symbol} - ${\n          this.scope.token.allTokenMap.get(info.quoteMint)?.symbol\n        }`;\n        this._poolInfoMap.set(info.id, info);\n        this._lpTokenMap.set(\n          info.lpMint,\n          new Token({ mint: info.lpMint, decimals: info.lpDecimals, symbol, name: `${symbol} LP` }),\n        );\n        return info.id;\n      }),\n    );\n    this._unOfficialIds = new Set(\n      unOfficial.map((info) => {\n        const symbol = `${this.scope.token.allTokenMap.get(info.baseMint)?.symbol} - ${\n          this.scope.token.allTokenMap.get(info.quoteMint)?.symbol\n        }`;\n        this._poolInfoMap.set(info.id, info);\n        this._lpTokenMap.set(\n          info.lpMint,\n          new Token({ mint: info.lpMint, decimals: info.lpDecimals, symbol, name: `${symbol} LP` }),\n        );\n        return info.id;\n      }),\n    );\n  }\n\n  public async loadPairs(params?: LoadParams): Promise<ApiJsonPairInfo[]> {\n    await this.scope.fetchPairs(params?.forceUpdate);\n    this._pairsInfo = this.scope.apiData.liquidityPairsInfo?.data || [];\n    this._pairsInfoMap = new Map(\n      this._pairsInfo.map((pair) => {\n        const token = this._lpTokenMap.get(pair.lpMint);\n        const price =\n          token && pair.lpPrice ? toTokenPrice({ token, numberPrice: pair.lpPrice, decimalDone: true }) : null;\n        price && this._lpPriceMap.set(pair.lpMint, price);\n        return [pair.ammId, pair];\n      }),\n    );\n    return this._pairsInfo;\n  }\n\n  get allPools(): LiquidityPoolJsonInfo[] {\n    return this._poolInfos;\n  }\n  get allPoolIdSet(): { official: Set<string>; unOfficial: Set<string> } {\n    return {\n      official: this._officialIds,\n      unOfficial: this._unOfficialIds,\n    };\n  }\n  get allPoolMap(): Map<string, LiquidityPoolJsonInfo> {\n    return this._poolInfoMap;\n  }\n  get allPairs(): PairJsonInfo[] {\n    return this._pairsInfo;\n  }\n  get allPairsMap(): Map<string, PairJsonInfo> {\n    return this._pairsInfoMap;\n  }\n  get lpTokenMap(): Map<string, Token> {\n    return this._lpTokenMap;\n  }\n  get lpPriceMap(): Map<string, Price> {\n    return this._lpPriceMap;\n  }\n\n  public async fetchMultipleInfo(params: LiquidityFetchMultipleInfoParams): Promise<LiquidityPoolInfo[]> {\n    await this._stableLayout.initStableModelLayout();\n    return await makeSimulationPoolInfo({ ...params, connection: this.scope.connection });\n  }\n\n  public async sdkParseJsonLiquidityInfo(\n    liquidityJsonInfos: LiquidityPoolJsonInfo[],\n  ): Promise<SDKParsedLiquidityInfo[]> {\n    if (!liquidityJsonInfos.length) return [];\n\n    const key = liquidityJsonInfos.map((jsonInfo) => jsonInfo.id).join(\"-\");\n    if (this._sdkParseInfoCache.has(key)) return this._sdkParseInfoCache.get(key)!;\n    try {\n      const info = await this.fetchMultipleInfo({ pools: liquidityJsonInfos.map(jsonInfo2PoolKeys) });\n      const result = info.map((sdkParsed, idx) => ({\n        jsonInfo: liquidityJsonInfos[idx],\n        ...jsonInfo2PoolKeys(liquidityJsonInfos[idx]),\n        ...sdkParsed,\n      }));\n      this._sdkParseInfoCache.set(key, result);\n      return result;\n    } catch (err) {\n      console.error(err);\n      return [];\n    }\n  }\n\n  public computeAmountOut({\n    poolKeys,\n    poolInfo,\n    amountIn,\n    outputToken,\n    slippage,\n  }: LiquidityComputeAmountOutParams): LiquidityComputeAmountOutReturn {\n    this.checkDisabled();\n    const logger = createLogger(\"Raydium_computeAmountOut\");\n    const tokenIn = amountIn.token;\n    const tokenOut = outputToken;\n\n    if (!includesToken(tokenIn, poolKeys) || !includesToken(tokenOut, poolKeys))\n      logger.logWithError(\"token not match with pool\", \"poolKeys\", poolKeys);\n\n    const { baseReserve, quoteReserve } = poolInfo;\n    this.logDebug(\"baseReserve:\", baseReserve.toString(), \"quoteReserve:\", quoteReserve.toString());\n    const inputToken = amountIn.token;\n    this.logDebug(\"inputToken:\", inputToken);\n\n    this.logDebug(\"amountIn:\", amountIn.toFixed());\n    this.logDebug(\"outputToken:\", outputToken);\n    this.logDebug(\"slippage:\", `${slippage.toSignificant()}%`);\n\n    const reserves = [baseReserve, quoteReserve];\n    const input = getAmountSide(amountIn, poolKeys);\n    if (input === \"quote\") reserves.reverse();\n    this.logDebug(\"input side:\", input);\n    const [reserveIn, reserveOut] = reserves;\n    let currentPrice;\n    if (poolKeys.version === 4) {\n      currentPrice = new Price({\n        baseToken: inputToken,\n        denominator: reserveIn,\n        quoteToken: outputToken,\n        numerator: reserveOut,\n      });\n    } else {\n      const p = getStablePrice(\n        this._stableLayout.stableModelData,\n        baseReserve.toNumber(),\n        quoteReserve.toNumber(),\n        false,\n      );\n      currentPrice = new Price({\n        baseToken: inputToken,\n        denominator: input === \"quote\" ? new BN(p * 1e6) : new BN(1e6),\n        quoteToken: outputToken,\n        numerator: input === \"quote\" ? new BN(1e6) : new BN(p * 1e6),\n      });\n    }\n    this.logDebug(\"currentPrice:\", `1 ${inputToken.symbol} ≈ ${currentPrice.toFixed()} ${outputToken.symbol}`);\n    this.logDebug(\n      \"currentPrice invert:\",\n      `1 ${outputToken.symbol} ≈ ${currentPrice.invert().toFixed()} ${inputToken.symbol}`,\n    );\n    const amountInRaw = amountIn.raw;\n    let amountOutRaw = BN_ZERO;\n    let feeRaw = BN_ZERO;\n    if (!amountInRaw.isZero()) {\n      if (poolKeys.version === 4) {\n        feeRaw = amountInRaw.mul(LIQUIDITY_FEES_NUMERATOR).div(LIQUIDITY_FEES_DENOMINATOR);\n        const amountInWithFee = amountInRaw.sub(feeRaw);\n        const denominator = reserveIn.add(amountInWithFee);\n        amountOutRaw = reserveOut.mul(amountInWithFee).div(denominator);\n      } else {\n        feeRaw = amountInRaw.mul(new BN(2)).div(new BN(10000));\n        const amountInWithFee = amountInRaw.sub(feeRaw);\n        const convertFn = input === \"quote\" ? getDyByDxBaseIn : getDxByDyBaseIn;\n        amountOutRaw = new BN(\n          convertFn(\n            this._stableLayout.stableModelData,\n            quoteReserve.toNumber(),\n            baseReserve.toNumber(),\n            amountInWithFee.toNumber(),\n          ),\n        );\n      }\n    }\n\n    const _slippage = new Percent(BN_ONE).add(slippage);\n    const minAmountOutRaw = _slippage.invert().mul(amountOutRaw).quotient;\n    const amountOut = new TokenAmount(outputToken, amountOutRaw);\n    const minAmountOut = new TokenAmount(outputToken, minAmountOutRaw);\n    this.logDebug(\"amountOut:\", amountOut.toFixed(), \"minAmountOut:\", minAmountOut.toFixed());\n\n    let executionPrice = new Price({\n      baseToken: inputToken,\n      denominator: amountInRaw.sub(feeRaw),\n      quoteToken: outputToken,\n      numerator: amountOutRaw,\n    });\n    if (!amountInRaw.isZero() && !amountOutRaw.isZero()) {\n      executionPrice = new Price({\n        baseToken: inputToken,\n        denominator: amountInRaw.sub(feeRaw),\n        quoteToken: outputToken,\n        numerator: amountOutRaw,\n      });\n\n      this.logDebug(\"executionPrice:\", `1 ${inputToken.symbol} ≈ ${executionPrice.toFixed()} ${outputToken.symbol}`);\n      this.logDebug(\n        \"executionPrice invert:\",\n        `1 ${outputToken.symbol} ≈ ${executionPrice.invert().toFixed()} ${inputToken.symbol}`,\n      );\n    }\n\n    const priceImpact = new Percent(\n      parseInt(String(Math.abs(parseFloat(executionPrice.toFixed()) - parseFloat(currentPrice.toFixed())) * 1e9)),\n      parseInt(String(parseFloat(currentPrice.toFixed()) * 1e9)),\n    );\n    const fee = new TokenAmount(inputToken, feeRaw);\n\n    return {\n      amountOut,\n      minAmountOut,\n      currentPrice,\n      executionPrice,\n      priceImpact,\n      fee,\n    };\n  }\n\n  /**\n   * Compute the another currency amount of add liquidity\n   *\n   * @param params - {@link LiquidityComputeAnotherAmountParams}\n   *\n   * @returns\n   * anotherAmount - token amount without slippage\n   * @returns\n   * maxAnotherAmount - token amount with slippage\n   *\n   * @example\n   * ```\n   * Liquidity.computeAnotherAmount({\n   *   // 1%\n   *   slippage: new Percent(1, 100)\n   * })\n   * ```\n   */\n  public async computePairAmount({\n    poolId,\n    amount,\n    anotherToken,\n    slippage,\n  }: LiquidityComputeAnotherAmountParams): Promise<{ anotherAmount: TokenAmount; maxAnotherAmount: TokenAmount }> {\n    const poolIdPubKey = validateAndParsePublicKey({ publicKey: poolId });\n    const poolInfo = this._poolInfoMap.get(poolIdPubKey.toBase58());\n    if (!poolInfo) this.logAndCreateError(\"pool not found\", poolIdPubKey.toBase58());\n    const parsedInfo = (await this.sdkParseJsonLiquidityInfo([poolInfo!]))[0];\n    if (!parsedInfo) this.logAndCreateError(\"pool parseInfo not found\", poolIdPubKey.toBase58());\n\n    const { baseReserve, quoteReserve } = parsedInfo;\n    this.logDebug(\"baseReserve:\", baseReserve.toString(), \"quoteReserve:\", quoteReserve.toString());\n\n    const tokenIn = amount.token;\n    this.logDebug(\n      \"tokenIn:\",\n      tokenIn,\n      \"amount:\",\n      amount.toFixed(),\n      \"anotherToken:\",\n      anotherToken,\n      \"slippage:\",\n      `${slippage.toSignificant()}%`,\n    );\n\n    // input is fixed\n    const input = getAmountSide(amount, jsonInfo2PoolKeys(poolInfo!));\n    this.logDebug(\"input side:\", input);\n\n    // round up\n    let amountRaw = BN_ZERO;\n    if (!amount.isZero()) {\n      amountRaw =\n        input === \"base\"\n          ? divCeil(amount.raw.mul(quoteReserve), baseReserve)\n          : divCeil(amount.raw.mul(baseReserve), quoteReserve);\n    }\n\n    const _slippage = new Percent(BN_ONE).add(slippage);\n    const slippageAdjustedAmount = _slippage.mul(amountRaw).quotient;\n\n    const _anotherAmount = new TokenAmount(anotherToken, amountRaw);\n    const _maxAnotherAmount = new TokenAmount(anotherToken, slippageAdjustedAmount);\n    this.logDebug(\"anotherAmount:\", _anotherAmount.toFixed(), \"maxAnotherAmount:\", _maxAnotherAmount.toFixed());\n\n    return {\n      anotherAmount: _anotherAmount,\n      maxAnotherAmount: _maxAnotherAmount,\n    };\n  }\n\n  public async swapWithAMM(params: LiquiditySwapTransactionParams): Promise<MakeMultiTransaction & SwapExtInfo> {\n    const { poolKeys, payer, amountIn, amountOut, fixedSide, config } = params;\n    this.logDebug(\"amountIn:\", amountIn);\n    this.logDebug(\"amountOut:\", amountOut);\n    if (amountIn.isZero() || amountOut.isZero())\n      this.logAndCreateError(\"amounts must greater than zero\", \"amounts\", {\n        amountIn: amountIn.toFixed(),\n        amountOut: amountOut.toFixed(),\n      });\n    const { account } = this.scope;\n    const txBuilder = this.createTxBuilder();\n    const { bypassAssociatedCheck = false } = config || {};\n\n    const [tokenIn, tokenOut] = [amountIn.token, amountOut.token];\n    const tokenAccountIn = await account.getCreatedTokenAccount({\n      mint: tokenIn.mint,\n      associatedOnly: false,\n    });\n    const tokenAccountOut = await account.getCreatedTokenAccount({\n      mint: tokenOut.mint,\n    });\n\n    const [amountInRaw, amountOutRaw] = [amountIn.raw, amountOut.raw];\n\n    const { tokenAccount: _tokenAccountIn, ...inTxInstructions } = await account.handleTokenAccount({\n      side: \"in\",\n      amount: amountInRaw,\n      mint: tokenIn.mint,\n      tokenAccount: tokenAccountIn,\n      bypassAssociatedCheck,\n    });\n    txBuilder.addInstruction(inTxInstructions);\n\n    const { tokenAccount: _tokenAccountOut, ...outTxInstructions } = await account.handleTokenAccount({\n      side: \"out\",\n      amount: 0,\n      mint: tokenOut.mint,\n      tokenAccount: tokenAccountOut,\n      payer,\n      bypassAssociatedCheck,\n    });\n    txBuilder.addInstruction(outTxInstructions);\n    txBuilder.addInstruction({\n      instructions: [\n        makeAMMSwapInstruction({\n          poolKeys,\n          userKeys: {\n            tokenAccountIn: _tokenAccountIn,\n            tokenAccountOut: _tokenAccountOut,\n            owner: this.scope.ownerPubKey,\n          },\n          amountIn: amountInRaw,\n          amountOut: amountOutRaw,\n          fixedSide,\n        }),\n      ],\n    });\n    return txBuilder.buildMultiTx({ extInfo: { amountOut } }) as MakeMultiTransaction & SwapExtInfo;\n  }\n\n  public async createPool(params: CreatePoolParam): Promise<MakeTransaction> {\n    this.checkDisabled();\n    this.scope.checkOwner();\n    if (params.version !== 4) this.logAndCreateError(\"invalid version\", \"poolKeys.version\", params.version);\n    const txBuilder = this.createTxBuilder();\n    const poolKeys = await getAssociatedPoolKeys(params);\n\n    return await txBuilder\n      .addInstruction({\n        instructions: [makeCreatePoolInstruction({ ...poolKeys, owner: this.scope.ownerPubKey })],\n      })\n      .build();\n  }\n\n  public async initPool(params: InitPoolParam): Promise<MakeTransaction> {\n    if (params.version !== 4) this.logAndCreateError(\"invalid version\", \"poolKeys.version\", params.version);\n    const { baseAmount, quoteAmount, startTime = 0, config } = params;\n    const poolKeys = await getAssociatedPoolKeys(params);\n    const { baseMint, quoteMint, lpMint, baseVault, quoteVault } = poolKeys;\n    const txBuilder = this.createTxBuilder();\n    const { account } = this.scope;\n\n    const bypassAssociatedCheck = !!config?.bypassAssociatedCheck;\n    const baseTokenAccount = await account.getCreatedTokenAccount({\n      mint: baseMint,\n      associatedOnly: false,\n    });\n    const quoteTokenAccount = await account.getCreatedTokenAccount({\n      mint: quoteMint,\n      associatedOnly: false,\n    });\n\n    if (!baseTokenAccount && !quoteTokenAccount)\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", account.tokenAccounts);\n\n    const lpTokenAccount = await account.getCreatedTokenAccount({\n      mint: lpMint,\n      associatedOnly: false,\n    });\n\n    const { tokenAccount: _baseTokenAccount, ...baseTokenAccountInstruction } = await account.handleTokenAccount({\n      side: \"in\",\n      amount: baseAmount.raw,\n      mint: baseMint,\n      tokenAccount: baseTokenAccount,\n      bypassAssociatedCheck,\n    });\n    txBuilder.addInstruction(baseTokenAccountInstruction);\n\n    const { tokenAccount: _quoteTokenAccount, ...quoteTokenAccountInstruction } = await account.handleTokenAccount({\n      side: \"in\",\n      amount: quoteAmount.raw,\n      mint: quoteMint,\n      tokenAccount: quoteTokenAccount,\n      bypassAssociatedCheck,\n    });\n    txBuilder.addInstruction(quoteTokenAccountInstruction);\n    const { tokenAccount: _lpTokenAccount, ...lpTokenAccountInstruction } = await account.handleTokenAccount({\n      side: \"out\",\n      amount: 0,\n      mint: lpMint,\n      tokenAccount: lpTokenAccount,\n      bypassAssociatedCheck,\n    });\n    txBuilder.addInstruction(lpTokenAccountInstruction);\n    // initPoolLayout\n    txBuilder.addInstruction({\n      instructions: [\n        makeTransferInstruction({\n          source: _baseTokenAccount,\n          destination: baseVault,\n          owner: this.scope.ownerPubKey,\n          amount: baseAmount.raw,\n        }),\n        makeTransferInstruction({\n          source: _quoteTokenAccount,\n          destination: quoteVault,\n          owner: this.scope.ownerPubKey,\n          amount: quoteAmount.raw,\n        }),\n        makeInitPoolInstruction({\n          poolKeys,\n          userKeys: { lpTokenAccount: _lpTokenAccount, payer: this.scope.ownerPubKey },\n          startTime,\n        }),\n      ],\n    });\n\n    return await txBuilder.build();\n  }\n\n  public async addLiquidity(params: LiquidityAddTransactionParams): Promise<MakeTransaction> {\n    const { poolId, amountInA, amountInB, fixedSide, config } = params;\n    const _poolId = validateAndParsePublicKey({ publicKey: poolId });\n    const poolInfo = this.allPools.find((pool) => pool.id === _poolId.toBase58());\n\n    if (!poolInfo) this.logAndCreateError(\"pool not found\", poolId);\n    const poolKeysList = await this.sdkParseJsonLiquidityInfo([poolInfo!]);\n    const poolKeys = poolKeysList[0];\n    if (!poolKeys) this.logAndCreateError(\"pool parse error\", poolKeys);\n\n    this.logDebug(\"amountInA:\", amountInA, \"amountInB:\", amountInB);\n    if (amountInA.isZero() || amountInB.isZero())\n      this.logAndCreateError(\"amounts must greater than zero\", \"amountInA & amountInB\", {\n        amountInA: amountInA.toFixed(),\n        amountInB: amountInB.toFixed(),\n      });\n    const { account } = this.scope;\n    const bypassAssociatedCheck = config?.bypassAssociatedCheck || false;\n    const [tokenA, tokenB] = [amountInA.token, amountInB.token];\n\n    const tokenAccountA = await account.getCreatedTokenAccount({\n      mint: tokenA.mint,\n      associatedOnly: false,\n    });\n    const tokenAccountB = await account.getCreatedTokenAccount({\n      mint: tokenB.mint,\n      associatedOnly: false,\n    });\n    if (!tokenAccountA && !tokenAccountB)\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", account.tokenAccounts);\n\n    const lpTokenAccount = await account.getCreatedTokenAccount({\n      mint: poolKeys.lpMint,\n    });\n\n    const tokens = [tokenA, tokenB];\n    const _tokenAccounts = [tokenAccountA, tokenAccountB];\n    const rawAmounts = [amountInA.raw, amountInB.raw];\n\n    // handle amount a & b and direction\n    const [sideA] = getAmountsSide(amountInA, amountInB, poolKeys);\n    let _fixedSide: AmountSide = \"base\";\n    if (![\"quote\", \"base\"].includes(sideA) || !isValidFixedSide(fixedSide))\n      this.logAndCreateError(\"invalid fixedSide\", \"fixedSide\", fixedSide);\n    if (sideA === \"quote\") {\n      tokens.reverse();\n      _tokenAccounts.reverse();\n      rawAmounts.reverse();\n      _fixedSide = fixedSide === \"a\" ? \"quote\" : \"base\";\n    } else if (sideA === \"base\") {\n      _fixedSide = fixedSide === \"a\" ? \"base\" : \"quote\";\n    }\n\n    const [baseToken, quoteToken] = tokens;\n    const [baseTokenAccount, quoteTokenAccount] = _tokenAccounts;\n    const [baseAmountRaw, quoteAmountRaw] = rawAmounts;\n    const txBuilder = this.createTxBuilder();\n\n    const { tokenAccount: _baseTokenAccount, ...baseInstruction } = await account.handleTokenAccount({\n      side: \"in\",\n      amount: baseAmountRaw,\n      mint: baseToken.mint,\n      tokenAccount: baseTokenAccount,\n      bypassAssociatedCheck,\n    });\n    txBuilder.addInstruction(baseInstruction);\n    const { tokenAccount: _quoteTokenAccount, ...quoteInstruction } = await account.handleTokenAccount({\n      side: \"in\",\n      amount: quoteAmountRaw,\n      mint: quoteToken.mint,\n      tokenAccount: quoteTokenAccount,\n      bypassAssociatedCheck,\n    });\n    txBuilder.addInstruction(quoteInstruction);\n    const { tokenAccount: _lpTokenAccount, ...lpInstruction } = await account.handleTokenAccount({\n      side: \"out\",\n      amount: 0,\n      mint: poolKeys.lpMint,\n      tokenAccount: lpTokenAccount,\n      bypassAssociatedCheck,\n    });\n    txBuilder.addInstruction(lpInstruction);\n    txBuilder.addInstruction({\n      instructions: [\n        makeAddLiquidityInstruction({\n          poolKeys,\n          userKeys: {\n            baseTokenAccount: _baseTokenAccount,\n            quoteTokenAccount: _quoteTokenAccount,\n            lpTokenAccount: _lpTokenAccount,\n            owner: this.scope.ownerPubKey,\n          },\n          baseAmountIn: baseAmountRaw,\n          quoteAmountIn: quoteAmountRaw,\n          fixedSide: _fixedSide,\n        }),\n      ],\n    });\n    return await txBuilder.build();\n  }\n\n  public async removeLiquidity(params: LiquidityRemoveTransactionParams): Promise<MakeTransaction> {\n    const { poolId, amountIn, config } = params;\n    const _poolId = validateAndParsePublicKey({ publicKey: poolId });\n    const poolInfo = this.allPools.find((pool) => pool.id === _poolId.toBase58());\n    if (!poolInfo) this.logAndCreateError(\"pool not found\", poolId);\n    const poolKeysList = await this.sdkParseJsonLiquidityInfo([poolInfo!]);\n    const poolKeys = poolKeysList[0];\n    if (!poolKeys) this.logAndCreateError(\"pool pass error\", poolKeys);\n\n    const { baseMint, quoteMint, lpMint } = poolKeys;\n    this.logDebug(\"amountIn:\", amountIn);\n    if (amountIn.isZero()) this.logAndCreateError(\"amount must greater than zero\", \"amountIn\", amountIn.toFixed());\n    if (!amountIn.token.mint.equals(lpMint))\n      this.logAndCreateError(\"amountIn's token not match lpMint\", \"amountIn\", amountIn);\n\n    const { account } = this.scope;\n    const lpTokenAccount = await account.getCreatedTokenAccount({\n      mint: lpMint,\n      associatedOnly: false,\n    });\n    if (!lpTokenAccount) this.logAndCreateError(\"cannot found lpTokenAccount\", \"tokenAccounts\", account.tokenAccounts);\n\n    const baseTokenAccount = await account.getCreatedTokenAccount({\n      mint: baseMint,\n    });\n    const quoteTokenAccount = await account.getCreatedTokenAccount({\n      mint: quoteMint,\n    });\n\n    const txBuilder = this.createTxBuilder();\n    const bypassAssociatedCheck = config?.bypassAssociatedCheck || false;\n\n    const { tokenAccount: _baseTokenAccount, ...baseInstruction } = await account.handleTokenAccount({\n      side: \"out\",\n      amount: 0,\n      mint: baseMint,\n      tokenAccount: baseTokenAccount,\n      bypassAssociatedCheck,\n    });\n    txBuilder.addInstruction(baseInstruction);\n    const { tokenAccount: _quoteTokenAccount, ...quoteInstruction } = await account.handleTokenAccount({\n      side: \"out\",\n      amount: 0,\n      mint: quoteMint,\n      tokenAccount: quoteTokenAccount,\n      bypassAssociatedCheck,\n    });\n    txBuilder.addInstruction(quoteInstruction);\n\n    txBuilder.addInstruction({\n      instructions: [\n        ComputeBudgetProgram.requestUnits({\n          units: 400000,\n          additionalFee: 0,\n        }),\n        makeRemoveLiquidityInstruction({\n          poolKeys,\n          userKeys: {\n            lpTokenAccount: lpTokenAccount!,\n            baseTokenAccount: _baseTokenAccount,\n            quoteTokenAccount: _quoteTokenAccount,\n            owner: this.scope.ownerPubKey,\n          },\n          amountIn: amountIn.raw,\n        }),\n      ],\n    });\n    return await txBuilder.build();\n  }\n\n  public lpMintToTokenAmount({\n    poolId,\n    amount,\n    decimalDone,\n  }: {\n    poolId: PublicKeyish;\n    amount: Numberish;\n    decimalDone?: boolean;\n  }): TokenAmount {\n    const poolKey = validateAndParsePublicKey({ publicKey: poolId });\n    if (!poolKey) this.logAndCreateError(\"pool not found\");\n    const poolInfo = this._poolInfoMap.get(poolKey.toBase58())!;\n\n    const numberDetails = parseNumberInfo(amount);\n    const token = new Token({ mint: poolInfo.lpMint, decimals: poolInfo.lpDecimals });\n    const amountFraction = decimalDone\n      ? new Fraction(numberDetails.numerator, numberDetails.denominator)\n      : new Fraction(numberDetails.numerator, numberDetails.denominator).mul(new BN(10).pow(new BN(token.decimals)));\n    return new TokenAmount(token, toBN(amountFraction));\n  }\n\n  public getFixedSide({ poolId, inputMint }: { poolId: PublicKeyish; inputMint: PublicKeyish }): LiquiditySide {\n    const [_poolId, _inputMint] = [\n      validateAndParsePublicKey({ publicKey: poolId }),\n      validateAndParsePublicKey({ publicKey: inputMint }),\n    ];\n    const pool = this._poolInfoMap.get(_poolId.toBase58());\n    if (!pool) this.logAndCreateError(\"pool not found\", _poolId.toBase58());\n    let isSideA = pool!.baseMint === _inputMint.toBase58();\n    if (_inputMint.equals(WSOLMint) || _inputMint.equals(SOLMint)) isSideA = !isSideA;\n    return isSideA ? \"a\" : \"b\";\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { LiquidityVersion, SerumVersion } from \"../../api/type\";\n\nexport enum LiquidityPoolStatus {\n  Uninitialized,\n  Initialized,\n  Disabled,\n  RemoveLiquidityOnly,\n  LiquidityOnly,\n  OrderBook,\n  Swap,\n  WaitingForStart,\n}\n\nexport const LIQUIDITY_FEES_NUMERATOR = new BN(25);\nexport const LIQUIDITY_FEES_DENOMINATOR = new BN(10000);\n\n/* ================= program public keys ================= */\nexport const _LIQUIDITY_PROGRAM_ID_V4 = \"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\";\nexport const LIQUIDITY_PROGRAM_ID_V4 = new PublicKey(_LIQUIDITY_PROGRAM_ID_V4);\n\nexport const _LIQUIDITY_PROGRAM_ID_V5 = \"5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h\";\nexport const LIQUIDITY_PROGRAM_ID_V5 = new PublicKey(_LIQUIDITY_PROGRAM_ID_V5);\n\n// liquidity program id string => liquidity version\nexport const LIQUIDITY_PROGRAMID_TO_VERSION: {\n  [key: string]: LiquidityVersion;\n} = {\n  [_LIQUIDITY_PROGRAM_ID_V4]: 4,\n  [_LIQUIDITY_PROGRAM_ID_V5]: 5,\n};\n\n// liquidity version => liquidity program id\nexport const LIQUIDITY_VERSION_TO_PROGRAM_ID: { [key in LiquidityVersion]?: PublicKey } & {\n  [K: number]: PublicKey;\n} = {\n  4: LIQUIDITY_PROGRAM_ID_V4,\n  5: LIQUIDITY_PROGRAM_ID_V5,\n};\n\n// liquidity version => serum version\nexport const LIQUIDITY_VERSION_TO_SERUM_VERSION: {\n  [key in LiquidityVersion]?: SerumVersion;\n} & {\n  [K: number]: SerumVersion;\n} = {\n  4: 3,\n  5: 3,\n};\n","import { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { PublicKey, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\n\nimport { parseBigNumberish } from \"../../common/bignumber\";\nimport { createLogger } from \"../../common/logger\";\nimport { accountMeta, commonSystemAccountMeta } from \"../../common/pubKey\";\nimport { struct, u8 } from \"../../marshmallow\";\n\nimport {\n  addLiquidityLayout,\n  createPoolV4Layout,\n  fixedSwapInLayout,\n  fixedSwapOutLayout,\n  initPoolLayout,\n  removeLiquidityLayout,\n} from \"./layout\";\nimport { MODEL_DATA_PUBKEY } from \"./stable\";\nimport {\n  LiquidityAddInstructionParams,\n  LiquidityAssociatedPoolKeys,\n  LiquidityInitPoolInstructionParams,\n  LiquidityPoolKeys,\n  LiquidityRemoveInstructionParams,\n  LiquiditySwapFixedInInstructionParamsV4,\n  LiquiditySwapFixedOutInstructionParamsV4,\n  LiquiditySwapInstructionParams,\n} from \"./type\";\n\nconst logger = createLogger(\"Raydium_liquidity_instruction\");\n\nexport function makeAMMSwapInstruction(params: LiquiditySwapInstructionParams): TransactionInstruction {\n  const { poolKeys, userKeys, amountIn, amountOut, fixedSide } = params;\n  const { version } = poolKeys;\n  if (version === 4 || version === 5) {\n    const props = { poolKeys, userKeys };\n    if (fixedSide === \"in\") {\n      return makeSwapFixedInInstruction(\n        {\n          ...props,\n          amountIn,\n          minAmountOut: amountOut,\n        },\n        version,\n      );\n    } else if (fixedSide === \"out\") {\n      return makeSwapFixedOutInstruction(\n        {\n          ...props,\n          maxAmountIn: amountIn,\n          amountOut,\n        },\n        version,\n      );\n    }\n    logger.logWithError(\"invalid params\", \"params\", params);\n  }\n\n  logger.logWithError(\"invalid version\", \"poolKeys.version\", version);\n  throw new Error(\"invalid version\");\n}\n\nexport function makeSimulatePoolInfoInstruction(poolKeys: LiquidityPoolKeys): TransactionInstruction {\n  const simulatePoolLayout = struct([u8(\"instruction\"), u8(\"simulateType\")]);\n  const data = Buffer.alloc(simulatePoolLayout.span);\n  simulatePoolLayout.encode(\n    {\n      instruction: 12,\n      simulateType: 0,\n    },\n    data,\n  );\n\n  const keys = [\n    // amm\n    accountMeta({ pubkey: poolKeys.id, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.openOrders, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.baseVault, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.quoteVault, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.lpMint, isWritable: false }),\n    // serum\n    accountMeta({ pubkey: poolKeys.marketId, isWritable: false }),\n  ];\n\n  return new TransactionInstruction({\n    programId: poolKeys.programId,\n    keys,\n    data,\n  });\n}\n\nexport function makeSwapFixedInInstruction(\n  { poolKeys, userKeys, amountIn, minAmountOut }: LiquiditySwapFixedInInstructionParamsV4,\n  version: number,\n): TransactionInstruction {\n  const data = Buffer.alloc(fixedSwapInLayout.span);\n  fixedSwapInLayout.encode(\n    {\n      instruction: 9,\n      amountIn: parseBigNumberish(amountIn),\n      minAmountOut: parseBigNumberish(minAmountOut),\n    },\n    data,\n  );\n  const keys = [\n    // amm\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.id }),\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.openOrders }),\n  ];\n\n  if (version === 4) keys.push(accountMeta({ pubkey: poolKeys.targetOrders }));\n  keys.push(accountMeta({ pubkey: poolKeys.baseVault }), accountMeta({ pubkey: poolKeys.quoteVault }));\n  if (version === 5) keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\n  keys.push(\n    // serum\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.marketId }),\n    accountMeta({ pubkey: poolKeys.marketBids }),\n    accountMeta({ pubkey: poolKeys.marketAsks }),\n    accountMeta({ pubkey: poolKeys.marketEventQueue }),\n    accountMeta({ pubkey: poolKeys.marketBaseVault }),\n    accountMeta({ pubkey: poolKeys.marketQuoteVault }),\n    accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\n    // user\n    accountMeta({ pubkey: userKeys.tokenAccountIn }),\n    accountMeta({ pubkey: userKeys.tokenAccountOut }),\n    accountMeta({ pubkey: userKeys.owner, isWritable: false }),\n  );\n\n  return new TransactionInstruction({\n    programId: poolKeys.programId,\n    keys,\n    data,\n  });\n}\n\nexport function makeSwapFixedOutInstruction(\n  { poolKeys, userKeys, maxAmountIn, amountOut }: LiquiditySwapFixedOutInstructionParamsV4,\n  version: number,\n): TransactionInstruction {\n  const data = Buffer.alloc(fixedSwapOutLayout.span);\n  fixedSwapOutLayout.encode(\n    {\n      instruction: 11,\n      maxAmountIn: parseBigNumberish(maxAmountIn),\n      amountOut: parseBigNumberish(amountOut),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n    // amm\n    accountMeta({ pubkey: poolKeys.id }),\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.openOrders }),\n    accountMeta({ pubkey: poolKeys.targetOrders }),\n    accountMeta({ pubkey: poolKeys.baseVault }),\n    accountMeta({ pubkey: poolKeys.quoteVault }),\n  ];\n\n  if (version === 5) keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\n\n  keys.push(\n    // serum\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.marketId }),\n    accountMeta({ pubkey: poolKeys.marketBids }),\n    accountMeta({ pubkey: poolKeys.marketAsks }),\n    accountMeta({ pubkey: poolKeys.marketEventQueue }),\n    accountMeta({ pubkey: poolKeys.marketBaseVault }),\n    accountMeta({ pubkey: poolKeys.marketQuoteVault }),\n    accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\n    accountMeta({ pubkey: userKeys.tokenAccountIn }),\n    accountMeta({ pubkey: userKeys.tokenAccountOut }),\n    accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\n  );\n\n  return new TransactionInstruction({\n    programId: poolKeys.programId,\n    keys,\n    data,\n  });\n}\n\nexport function makeCreatePoolInstruction(\n  params: LiquidityAssociatedPoolKeys & { owner: PublicKey },\n): TransactionInstruction {\n  const { owner, ...poolKeys } = params;\n  const data = Buffer.alloc(createPoolV4Layout.span);\n  createPoolV4Layout.encode(\n    {\n      instruction: 10,\n      nonce: poolKeys.nonce,\n    },\n    data,\n  );\n\n  const keys = [\n    ...commonSystemAccountMeta,\n    // amm\n    accountMeta({ pubkey: poolKeys.targetOrders }),\n    accountMeta({ pubkey: poolKeys.withdrawQueue }),\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.lpMint }),\n    accountMeta({ pubkey: poolKeys.baseMint, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.quoteMint, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.baseVault }),\n    accountMeta({ pubkey: poolKeys.quoteVault }),\n    accountMeta({ pubkey: poolKeys.lpVault }),\n    // serum\n    accountMeta({ pubkey: poolKeys.marketId, isWritable: false }),\n    accountMeta({ pubkey: owner, isSigner: true }),\n  ];\n  return new TransactionInstruction({\n    programId: poolKeys.programId,\n    keys,\n    data,\n  });\n}\n\nexport function makeInitPoolInstruction(params: LiquidityInitPoolInstructionParams): TransactionInstruction {\n  const { poolKeys, userKeys, startTime } = params;\n  const data = Buffer.alloc(initPoolLayout.span);\n  initPoolLayout.encode(\n    {\n      instruction: 0,\n      nonce: poolKeys.nonce,\n      startTime: parseBigNumberish(startTime),\n    },\n    data,\n  );\n\n  const keys = [\n    ...commonSystemAccountMeta,\n    // amm\n    accountMeta({ pubkey: poolKeys.id }),\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.openOrders }),\n    accountMeta({ pubkey: poolKeys.lpMint }),\n    accountMeta({ pubkey: poolKeys.baseMint, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.quoteMint, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.baseVault, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.quoteVault, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.withdrawQueue }),\n    accountMeta({ pubkey: poolKeys.targetOrders }),\n    accountMeta({ pubkey: userKeys.lpTokenAccount }),\n    accountMeta({ pubkey: poolKeys.lpVault, isWritable: false }),\n    // serum\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.marketId, isWritable: false }),\n    // user\n    accountMeta({ pubkey: userKeys.payer, isSigner: true }),\n  ];\n\n  return new TransactionInstruction({\n    programId: poolKeys.programId,\n    keys,\n    data,\n  });\n}\n\nexport function makeAddLiquidityInstruction(params: LiquidityAddInstructionParams): TransactionInstruction {\n  const { poolKeys, userKeys, baseAmountIn, quoteAmountIn, fixedSide } = params;\n  const { version } = poolKeys;\n\n  if (version === 4 || version === 5) {\n    const data = Buffer.alloc(addLiquidityLayout.span);\n    addLiquidityLayout.encode(\n      {\n        instruction: 3,\n        baseAmountIn: parseBigNumberish(baseAmountIn),\n        quoteAmountIn: parseBigNumberish(quoteAmountIn),\n        fixedSide: parseBigNumberish(fixedSide === \"base\" ? 0 : 1),\n      },\n      data,\n    );\n\n    const keys = [\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n      // amm\n      accountMeta({ pubkey: poolKeys.id }),\n      accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\n      accountMeta({ pubkey: poolKeys.openOrders, isWritable: false }),\n      accountMeta({ pubkey: poolKeys.targetOrders }),\n      accountMeta({ pubkey: poolKeys.lpMint }),\n      accountMeta({ pubkey: poolKeys.baseVault }),\n      accountMeta({ pubkey: poolKeys.quoteVault }),\n    ];\n\n    if (version === 5) {\n      keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\n    }\n\n    keys.push(\n      // serum\n      accountMeta({ pubkey: poolKeys.marketId, isWritable: false }),\n      // user\n      accountMeta({ pubkey: userKeys.baseTokenAccount }),\n      accountMeta({ pubkey: userKeys.quoteTokenAccount }),\n      accountMeta({ pubkey: userKeys.lpTokenAccount }),\n      accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\n    );\n\n    return new TransactionInstruction({\n      programId: poolKeys.programId,\n      keys,\n      data,\n    });\n  }\n\n  logger.logWithError(\"invalid version\", \"poolKeys.version\", version);\n  return new TransactionInstruction({ programId: poolKeys.programId, keys: [] }); // won't reach\n}\n\nexport function makeRemoveLiquidityInstruction(params: LiquidityRemoveInstructionParams): TransactionInstruction {\n  const { poolKeys, userKeys, amountIn } = params;\n  const { version } = poolKeys;\n\n  if (version === 4 || version === 5) {\n    const data = Buffer.alloc(removeLiquidityLayout.span);\n    removeLiquidityLayout.encode(\n      {\n        instruction: 4,\n        amountIn: parseBigNumberish(amountIn),\n      },\n      data,\n    );\n\n    const keys = [\n      // system\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n      // amm\n      accountMeta({ pubkey: poolKeys.id }),\n      accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\n      accountMeta({ pubkey: poolKeys.openOrders }),\n      accountMeta({ pubkey: poolKeys.targetOrders }),\n      accountMeta({ pubkey: poolKeys.lpMint }),\n      accountMeta({ pubkey: poolKeys.baseVault }),\n      accountMeta({ pubkey: poolKeys.quoteVault }),\n    ];\n\n    if (version === 5) {\n      keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\n    } else {\n      keys.push(accountMeta({ pubkey: poolKeys.withdrawQueue }), accountMeta({ pubkey: poolKeys.lpVault }));\n    }\n\n    keys.push(\n      // serum\n      accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\n      accountMeta({ pubkey: poolKeys.marketId }),\n      accountMeta({ pubkey: poolKeys.marketBaseVault }),\n      accountMeta({ pubkey: poolKeys.marketQuoteVault }),\n      accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\n      // user\n      accountMeta({ pubkey: userKeys.lpTokenAccount }),\n      accountMeta({ pubkey: userKeys.baseTokenAccount }),\n      accountMeta({ pubkey: userKeys.quoteTokenAccount }),\n      accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\n      // serum orderbook\n      accountMeta({ pubkey: poolKeys.marketEventQueue }),\n      accountMeta({ pubkey: poolKeys.marketBids }),\n      accountMeta({ pubkey: poolKeys.marketAsks }),\n    );\n\n    return new TransactionInstruction({\n      programId: poolKeys.programId,\n      keys,\n      data,\n    });\n  }\n\n  logger.logWithError(\"invalid version\", \"poolKeys.version\", version);\n  return new TransactionInstruction({ programId: poolKeys.programId, keys: [] }); // won't reach\n}\n","import { GetStructureSchema, publicKey, seq, struct, u128, u64, u8 } from \"../../marshmallow\";\n\nexport const fixedSwapInLayout = struct([u8(\"instruction\"), u64(\"amountIn\"), u64(\"minAmountOut\")]);\nexport const fixedSwapOutLayout = struct([u8(\"instruction\"), u64(\"maxAmountIn\"), u64(\"amountOut\")]);\n\nexport const createPoolV4Layout = struct([u8(\"instruction\"), u8(\"nonce\")]);\nexport const initPoolLayout = struct([u8(\"instruction\"), u8(\"nonce\"), u64(\"startTime\")]);\n/* ================= state layouts ================= */\nexport const liquidityStateV4Layout = struct([\n  u64(\"status\"),\n  u64(\"nonce\"),\n  u64(\"maxOrder\"),\n  u64(\"depth\"),\n  u64(\"baseDecimal\"),\n  u64(\"quoteDecimal\"),\n  u64(\"state\"),\n  u64(\"resetFlag\"),\n  u64(\"minSize\"),\n  u64(\"volMaxCutRatio\"),\n  u64(\"amountWaveRatio\"),\n  u64(\"baseLotSize\"),\n  u64(\"quoteLotSize\"),\n  u64(\"minPriceMultiplier\"),\n  u64(\"maxPriceMultiplier\"),\n  u64(\"systemDecimalValue\"),\n  u64(\"minSeparateNumerator\"),\n  u64(\"minSeparateDenominator\"),\n  u64(\"tradeFeeNumerator\"),\n  u64(\"tradeFeeDenominator\"),\n  u64(\"pnlNumerator\"),\n  u64(\"pnlDenominator\"),\n  u64(\"swapFeeNumerator\"),\n  u64(\"swapFeeDenominator\"),\n  u64(\"baseNeedTakePnl\"),\n  u64(\"quoteNeedTakePnl\"),\n  u64(\"quoteTotalPnl\"),\n  u64(\"baseTotalPnl\"),\n  u128(\"quoteTotalDeposited\"),\n  u128(\"baseTotalDeposited\"),\n  u128(\"swapBaseInAmount\"),\n  u128(\"swapQuoteOutAmount\"),\n  u64(\"swapBase2QuoteFee\"),\n  u128(\"swapQuoteInAmount\"),\n  u128(\"swapBaseOutAmount\"),\n  u64(\"swapQuote2BaseFee\"),\n  // amm vault\n  publicKey(\"baseVault\"),\n  publicKey(\"quoteVault\"),\n  // mint\n  publicKey(\"baseMint\"),\n  publicKey(\"quoteMint\"),\n  publicKey(\"lpMint\"),\n  // market\n  publicKey(\"openOrders\"),\n  publicKey(\"marketId\"),\n  publicKey(\"marketProgramId\"),\n  publicKey(\"targetOrders\"),\n  publicKey(\"withdrawQueue\"),\n  publicKey(\"lpVault\"),\n  publicKey(\"owner\"),\n  // true circulating supply without lock up\n  u64(\"lpReserve\"),\n  seq(u64(), 3, \"padding\"),\n]);\n\nexport type LiquidityStateLayoutV4 = typeof liquidityStateV4Layout;\nexport type LiquidityStateV4 = GetStructureSchema<LiquidityStateLayoutV4>;\n\nexport const liquidityStateV5Layout = struct([\n  u64(\"accountType\"),\n  u64(\"status\"),\n  u64(\"nonce\"),\n  u64(\"maxOrder\"),\n  u64(\"depth\"),\n  u64(\"baseDecimal\"),\n  u64(\"quoteDecimal\"),\n  u64(\"state\"),\n  u64(\"resetFlag\"),\n  u64(\"minSize\"),\n  u64(\"volMaxCutRatio\"),\n  u64(\"amountWaveRatio\"),\n  u64(\"baseLotSize\"),\n  u64(\"quoteLotSize\"),\n  u64(\"minPriceMultiplier\"),\n  u64(\"maxPriceMultiplier\"),\n  u64(\"systemDecimalsValue\"),\n  u64(\"abortTradeFactor\"),\n  u64(\"priceTickMultiplier\"),\n  u64(\"priceTick\"),\n  // Fees\n  u64(\"minSeparateNumerator\"),\n  u64(\"minSeparateDenominator\"),\n  u64(\"tradeFeeNumerator\"),\n  u64(\"tradeFeeDenominator\"),\n  u64(\"pnlNumerator\"),\n  u64(\"pnlDenominator\"),\n  u64(\"swapFeeNumerator\"),\n  u64(\"swapFeeDenominator\"),\n  // OutPutData\n  u64(\"baseNeedTakePnl\"),\n  u64(\"quoteNeedTakePnl\"),\n  u64(\"quoteTotalPnl\"),\n  u64(\"baseTotalPnl\"),\n  u64(\"poolOpenTime\"),\n  u64(\"punishPcAmount\"),\n  u64(\"punishCoinAmount\"),\n  u64(\"orderbookToInitTime\"),\n  u128(\"swapBaseInAmount\"),\n  u128(\"swapQuoteOutAmount\"),\n  u128(\"swapQuoteInAmount\"),\n  u128(\"swapBaseOutAmount\"),\n  u64(\"swapQuote2BaseFee\"),\n  u64(\"swapBase2QuoteFee\"),\n\n  publicKey(\"baseVault\"),\n  publicKey(\"quoteVault\"),\n  publicKey(\"baseMint\"),\n  publicKey(\"quoteMint\"),\n  publicKey(\"lpMint\"),\n\n  publicKey(\"modelDataAccount\"),\n  publicKey(\"openOrders\"),\n  publicKey(\"marketId\"),\n  publicKey(\"marketProgramId\"),\n  publicKey(\"targetOrders\"),\n  publicKey(\"owner\"),\n  seq(u64(), 64, \"padding\"),\n]);\n\nexport const addLiquidityLayout = struct([\n  u8(\"instruction\"),\n  u64(\"baseAmountIn\"),\n  u64(\"quoteAmountIn\"),\n  u64(\"fixedSide\"),\n]);\n\nexport const removeLiquidityLayout = struct([u8(\"instruction\"), u64(\"amountIn\")]);\n\nexport type LiquidityStateLayoutV5 = typeof liquidityStateV5Layout;\nexport type LiquidityStateV5 = GetStructureSchema<LiquidityStateLayoutV5>;\n\nexport type LiquidityState = LiquidityStateV4 | LiquidityStateV5;\nexport type LiquidityStateLayout = LiquidityStateLayoutV4 | LiquidityStateLayoutV5;\n\n/* ================= index ================= */\n// version => liquidity state layout\nexport const LIQUIDITY_VERSION_TO_STATE_LAYOUT: {\n  [version: number]: LiquidityStateLayout;\n} = {\n  4: liquidityStateV4Layout,\n  5: liquidityStateV5Layout,\n};\n","import { Connection, PublicKey } from \"@solana/web3.js\";\n\nimport { seq, struct, u64 } from \"../../marshmallow\";\n\nexport const MODEL_DATA_PUBKEY = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\nconst ELEMENT_SIZE = 50000;\n\nexport const DataElement = struct([u64(\"x\"), u64(\"y\"), u64(\"price\")]);\n\nexport const modelDataInfoLayout = struct([\n  u64(\"accountType\"),\n  u64(\"status\"),\n  u64(\"multiplier\"),\n  u64(\"validDataCount\"),\n  seq(DataElement, ELEMENT_SIZE, \"DataElement\"),\n]);\n\nexport interface StableModelLayout {\n  accountType: number;\n  status: number;\n  multiplier: number;\n  validDataCount: number;\n  DataElement: { x: number; y: number; price: number }[];\n}\n\nfunction estimateRangeByXyReal(_xReal: number, _yReal: number): number[] {\n  return [0, ELEMENT_SIZE - 2];\n}\n\nfunction estimateRangeByX(_x: number): number[] {\n  return [0, ELEMENT_SIZE - 2];\n}\n\nfunction estimateRangeByY(_y: number): number[] {\n  return [0, ELEMENT_SIZE - 2];\n}\n\nfunction getMininumRangeByXyReal(\n  layoutData: StableModelLayout,\n  xReal: number,\n  yReal: number,\n): [number, number, boolean] {\n  const [min, max] = estimateRangeByXyReal(xReal, yReal);\n  let minRangeIdx = min;\n  let maxRangeIdx = max;\n  let mid = 0;\n  const target = (xReal * layoutData.multiplier) / yReal;\n  while (minRangeIdx <= maxRangeIdx) {\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\n    if (mid === 0 || mid >= ELEMENT_SIZE - 2) {\n      return [mid, mid, false];\n    }\n    const cur = (layoutData.DataElement[mid].x * layoutData.multiplier) / layoutData.DataElement[mid].y;\n    const left = (layoutData.DataElement[mid - 1].x * layoutData.multiplier) / layoutData.DataElement[mid - 1].y;\n    const right = (layoutData.DataElement[mid + 1].x * layoutData.multiplier) / layoutData.DataElement[mid + 1].y;\n\n    if (target === cur) {\n      return [mid, mid, true];\n    } else if (target === left) {\n      return [mid - 1, mid - 1, true];\n    } else if (target === right) {\n      return [mid + 1, mid + 1, true];\n    } else if (target < left) {\n      maxRangeIdx = mid - 1;\n    } else if (target > left && target < cur) {\n      return [mid - 1, mid, true];\n    } else if (target > cur && target < right) {\n      return [mid, mid + 1, true];\n    } else {\n      minRangeIdx = mid + 1;\n    }\n  }\n  return [mid, mid, false];\n}\nfunction getRatio(layoutData: StableModelLayout, xReal: number, yReal: number): number {\n  const [minRangeIdx, maxRangeIdx, find] = getMininumRangeByXyReal(layoutData, xReal, yReal);\n\n  if (!find) {\n    return 0;\n  }\n\n  if (minRangeIdx === maxRangeIdx) {\n    const x = layoutData.DataElement[minRangeIdx].x;\n    const ratio = (xReal * layoutData.multiplier) / x;\n    return ratio;\n  } else {\n    const x1 = layoutData.DataElement[minRangeIdx].x;\n    const y1 = layoutData.DataElement[minRangeIdx].y;\n    const x2 = layoutData.DataElement[maxRangeIdx].x;\n    const y2 = layoutData.DataElement[maxRangeIdx].y;\n\n    const xDenominator = yReal * (x2 * y1 - x1 * y2);\n    const xNumerator1 = x1 * xDenominator;\n    const xNumerator2 = (x2 - x1) * (xReal * y1 - x1 * yReal) * y2;\n\n    const xNumerator = xNumerator1 + xNumerator2;\n    const ratio = (xReal * layoutData.multiplier * xDenominator) / xNumerator;\n    return ratio;\n  }\n}\n\nfunction realToTable(layoutData: StableModelLayout, realValue: number, ratio: number): number {\n  return (realValue * layoutData.multiplier) / ratio;\n}\n\nfunction tableToReal(layoutData: StableModelLayout, tableValue: number, ratio: number): number {\n  return (tableValue * ratio) / layoutData.multiplier;\n}\n\nfunction getMinimumRangeByX(layoutData: StableModelLayout, x: number): [number, number, boolean] {\n  const [min, max] = estimateRangeByX(x);\n  let minRangeIdx = min;\n  let maxRangeIdx = max;\n  let mid = 0;\n  const target = x;\n  while (minRangeIdx < maxRangeIdx) {\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\n\n    if (mid <= 0 || mid > ELEMENT_SIZE - 2) {\n      return [mid, mid, false];\n    }\n    const cur = layoutData.DataElement[mid].x;\n    const left = layoutData.DataElement[mid - 1].x;\n    const right = layoutData.DataElement[mid + 1].x;\n\n    if (target === cur) return [mid, mid, true];\n    else if (target === left) return [mid - 1, mid - 1, true];\n    else if (target === right) return [mid + 1, mid + 1, true];\n    else if (target < left) maxRangeIdx = mid - 1;\n    else if (target > left && target < cur) return [mid - 1, mid, true];\n    else if (target > cur && target < right) return [mid, mid + 1, true];\n    else minRangeIdx = mid + 1;\n  }\n  return [mid, mid, false];\n}\n\nfunction getMinimumRangeByY(layoutData: StableModelLayout, y: number): [number, number, boolean] {\n  const [min, max] = estimateRangeByY(y);\n  let minRangeIdx = min;\n  let maxRangeIdx = max;\n  let mid = 0;\n  const target = y;\n  while (minRangeIdx <= maxRangeIdx) {\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\n    if (mid <= 0 || mid >= ELEMENT_SIZE - 2) {\n      return [mid, mid, false];\n    }\n\n    const cur = layoutData.DataElement[mid].y;\n    const left = layoutData.DataElement[mid - 1].y;\n    const right = layoutData.DataElement[mid + 1].y;\n    if (target === cur) return [mid, mid, true];\n    else if (target === left) return [mid - 1, mid - 1, true];\n    else if (target === right) return [mid + 1, mid + 1, true];\n    else if (target < right) {\n      minRangeIdx = mid + 1;\n    } else if (target < left && target > cur) return [mid - 1, mid, true];\n    else if (target < cur && target > right) return [mid, mid + 1, true];\n    else maxRangeIdx = mid - 1;\n  }\n  return [mid, mid, false];\n}\n\nfunction getDataByX(\n  layoutData: StableModelLayout,\n  x: number,\n  dx: number,\n  priceUp: boolean,\n): [number, number, boolean, boolean] {\n  const xWithDx = priceUp ? x + dx : x - dx;\n  const [minIdx, maxIdx, find] = getMinimumRangeByX(layoutData, xWithDx);\n  if (!find) return [0, 0, false, find];\n\n  if (minIdx === maxIdx) return [layoutData.DataElement[maxIdx].price, layoutData.DataElement[maxIdx].y, false, find];\n  else {\n    const x1 = layoutData.DataElement[minIdx].x;\n    const x2 = layoutData.DataElement[maxIdx].x;\n    const p1 = layoutData.DataElement[minIdx].price;\n    const p2 = layoutData.DataElement[maxIdx].price;\n    const y1 = layoutData.DataElement[minIdx].y;\n    const y2 = layoutData.DataElement[maxIdx].y;\n\n    if (x >= x1 && x <= x2) {\n      if (priceUp) return [p2, y2, true, find];\n      else return [p1, y1, true, find];\n    } else {\n      let p, y;\n      if (priceUp) {\n        p = p1 + ((p2 - p1) * (x - x1)) / (x2 - x1);\n        y = y1 - ((xWithDx - x1) * layoutData.multiplier) / p2;\n      } else {\n        p = p1 + ((p2 - p1) * (x - x1)) / (x2 - x1);\n        y = y2 + ((x2 - xWithDx) * layoutData.multiplier) / p1;\n      }\n      return [p, y, false, find];\n    }\n  }\n}\n\nfunction getDataByY(\n  layoutData: StableModelLayout,\n  y: number,\n  dy: number,\n  priceUp: boolean,\n): [number, number, boolean, boolean] {\n  const yWithDy = priceUp ? y - dy : y + dy;\n  const [minIdx, maxIdx, find] = getMinimumRangeByY(layoutData, yWithDy);\n  if (!find) return [0, 0, false, find];\n  if (minIdx === maxIdx) return [layoutData.DataElement[maxIdx].price, layoutData.DataElement[maxIdx].x, false, find];\n  else {\n    const x1 = layoutData.DataElement[minIdx].x;\n    const x2 = layoutData.DataElement[maxIdx].x;\n    const p1 = layoutData.DataElement[minIdx].price;\n    const p2 = layoutData.DataElement[maxIdx].price;\n    const y1 = layoutData.DataElement[minIdx].y;\n    const y2 = layoutData.DataElement[maxIdx].y;\n\n    if (y >= y2 && y <= y1) {\n      return priceUp ? [p2, x2, true, find] : [p1, x1, true, find];\n    } else {\n      let p, x;\n      if (priceUp) {\n        p = p1 + ((p2 - p1) * (y1 - y)) / (y1 - y2);\n        x = x1 + (p2 * (y1 - yWithDy)) / layoutData.multiplier;\n      } else {\n        p = p1 + ((p2 - p1) * (y1 - y)) / (y1 - y2);\n        x = x2 - (p1 * (yWithDy - y2)) / layoutData.multiplier;\n      }\n      return [p, x, false, find];\n    }\n  }\n}\n\nfunction getMidPrice(layoutData: StableModelLayout, x: number): number {\n  const ret = getDataByX(layoutData, x, 0, false);\n  if (ret[3]) return ret[0];\n  else return 0;\n}\n\nexport function getDyByDxBaseIn(layoutData: StableModelLayout, xReal: number, yReal: number, dxReal: number): number {\n  const ratio = getRatio(layoutData, xReal, yReal);\n  const x = realToTable(layoutData, xReal, ratio);\n  const y = realToTable(layoutData, yReal, ratio);\n  const dx = realToTable(layoutData, dxReal, ratio);\n  const priceUp = true;\n  const [p, y2, lessTrade, find] = getDataByX(layoutData, x, dx, priceUp);\n  if (!find) return 0;\n  if (lessTrade) {\n    const dyReal = (dxReal * layoutData.multiplier) / p;\n    return dyReal;\n  } else {\n    const dy = y - y2;\n    const dyReal = tableToReal(layoutData, dy, ratio);\n    return dyReal;\n  }\n}\n\nexport function getDxByDyBaseIn(layoutData: StableModelLayout, xReal: number, yReal: number, dyReal: number): number {\n  const ratio = getRatio(layoutData, xReal, yReal);\n  const x = realToTable(layoutData, xReal, ratio);\n  const y = realToTable(layoutData, yReal, ratio);\n  const dy = realToTable(layoutData, dyReal, ratio);\n  const priceUp = false;\n  const [p, x2, lessTrade, find] = getDataByY(layoutData, y, dy, priceUp);\n  if (!find) return 0;\n  if (lessTrade) {\n    const dxReal = (dyReal * p) / layoutData.multiplier;\n    return dxReal;\n  } else {\n    const dx = x - x2;\n    const dxReal = tableToReal(layoutData, dx, ratio);\n    return dxReal;\n  }\n}\n\nexport function formatLayout(buffer: Buffer): StableModelLayout {\n  const layoutInfo = modelDataInfoLayout.decode(buffer);\n  return {\n    accountType: layoutInfo.accountType.toNumber(),\n    status: layoutInfo.status.toNumber(),\n    multiplier: layoutInfo.multiplier.toNumber(),\n    validDataCount: layoutInfo.validDataCount.toNumber(),\n    DataElement: layoutInfo.DataElement.map((item: any) => ({\n      x: item.x.toNumber(),\n      y: item.y.toNumber(),\n      price: item.price.toNumber(),\n    })),\n  };\n}\n\nexport function getStablePrice(\n  layoutData: StableModelLayout,\n  coinReal: number,\n  pcReal: number,\n  baseCoin: boolean,\n): number {\n  const price =\n    getMidPrice(layoutData, realToTable(layoutData, coinReal, getRatio(layoutData, coinReal, pcReal))) /\n    layoutData.multiplier;\n  return baseCoin ? price : 1 / price;\n}\n\nexport class StableLayout {\n  private readonly connection: Connection;\n  private _layoutData: StableModelLayout = {\n    accountType: 0,\n    status: 0,\n    multiplier: 0,\n    validDataCount: 0,\n    DataElement: [],\n  };\n\n  constructor({ connection }: { connection: Connection }) {\n    this.connection = connection;\n  }\n\n  get stableModelData(): StableModelLayout {\n    return this._layoutData;\n  }\n\n  public async initStableModelLayout(): Promise<void> {\n    if (this._layoutData.validDataCount === 0) {\n      if (this.connection) {\n        const acc = await this.connection.getAccountInfo(MODEL_DATA_PUBKEY);\n        if (acc) this._layoutData = formatLayout(acc?.data);\n      }\n    }\n  }\n}\n","import { OpenOrders } from \"@project-serum/serum\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { LiquidityVersion } from \"../../api/type\";\nimport { createLogger } from \"../../common/logger\";\nimport { PublicKeyish, validateAndParsePublicKey } from \"../../common/pubKey\";\nimport {\n  findProgramAddress, parseSimulateLogToJson, parseSimulateValue, simulateMultipleInstruction,\n} from \"../../common/txTool\";\nimport { Token, TokenAmount } from \"../../module\";\n\nimport { LIQUIDITY_VERSION_TO_PROGRAM_ID, LiquidityPoolStatus } from \"./constant\";\nimport { makeSimulatePoolInfoInstruction } from \"./instruction\";\nimport { LIQUIDITY_VERSION_TO_STATE_LAYOUT, LiquidityStateLayout, liquidityStateV4Layout } from \"./layout\";\nimport { getSerumAssociatedAuthority, getSerumProgramId, getSerumVersion } from \"./serum\";\nimport {\n  AmountSide, LiquidityAssociatedPoolKeys, LiquidityFetchMultipleInfoParams, LiquidityPoolInfo, LiquidityPoolKeys,\n} from \"./type\";\n\nconst logger = createLogger(\"Raydium_liquidity_util\");\n/**\n * Get token amount side of liquidity pool\n * @param amount - the token amount provided\n * @param poolKeys - the pool keys\n * @returns token amount side is `base` or `quote`\n */\nexport function getAmountSide(amount: TokenAmount, poolKeys: LiquidityPoolKeys): AmountSide {\n  const token = amount instanceof TokenAmount ? amount.token : Token.WSOL;\n  const { baseMint, quoteMint } = poolKeys;\n\n  if (token.mint.equals(baseMint)) return \"base\";\n  else if (token.mint.equals(quoteMint)) return \"quote\";\n  const error = `liquidity getTokenSide - token not match with pool, params: ${JSON.stringify({\n    token: token.mint,\n    baseMint,\n    quoteMint,\n  })}`;\n  console.error(error);\n  throw new Error(error);\n}\n\nexport function includesToken(token: Token, poolKeys: LiquidityPoolKeys): boolean {\n  const { baseMint, quoteMint } = poolKeys;\n  return token.mint.equals(baseMint) || token.mint.equals(quoteMint);\n}\n\nexport function getPoolEnabledFeatures(poolInfo: LiquidityPoolInfo): {\n  swap: boolean;\n  addLiquidity: boolean;\n  removeLiquidity: boolean;\n} {\n  const { status, startTime } = poolInfo;\n  const statusEnum = status.toNumber();\n\n  const statusMap = {\n    [LiquidityPoolStatus.Uninitialized]: {\n      swap: false,\n      addLiquidity: false,\n      removeLiquidity: false,\n    },\n    [LiquidityPoolStatus.Initialized]: {\n      swap: true,\n      addLiquidity: true,\n      removeLiquidity: true,\n    },\n    [LiquidityPoolStatus.Disabled]: {\n      swap: false,\n      addLiquidity: false,\n      removeLiquidity: false,\n    },\n    [LiquidityPoolStatus.RemoveLiquidityOnly]: {\n      swap: false,\n      addLiquidity: false,\n      removeLiquidity: true,\n    },\n    [LiquidityPoolStatus.LiquidityOnly]: {\n      swap: false,\n      addLiquidity: true,\n      removeLiquidity: true,\n    },\n    [LiquidityPoolStatus.OrderBook]: {\n      swap: false,\n      addLiquidity: true,\n      removeLiquidity: true,\n    },\n    [LiquidityPoolStatus.Swap]: {\n      swap: true,\n      addLiquidity: true,\n      removeLiquidity: true,\n    },\n    [LiquidityPoolStatus.WaitingForStart]: {\n      swap: Date.now() / 1000 >= startTime.toNumber(),\n      addLiquidity: true,\n      removeLiquidity: true,\n    },\n  };\n\n  return (\n    statusMap[statusEnum] || {\n      swap: false,\n      addLiquidity: false,\n      removeLiquidity: false,\n    }\n  );\n}\n\nexport function getLiquidityStateLayout(version: number): LiquidityStateLayout {\n  const STATE_LAYOUT = LIQUIDITY_VERSION_TO_STATE_LAYOUT[version];\n  if (!STATE_LAYOUT) logger.logWithError(\"invalid version\", \"version\", version);\n\n  return STATE_LAYOUT;\n}\n\nexport function getLiquidityProgramId(version: number): PublicKey {\n  const programId = LIQUIDITY_VERSION_TO_PROGRAM_ID[version];\n  if (!programId) logger.logWithError(\"invalid version\", \"version\", version);\n\n  return programId;\n}\n\ninterface GetAssociatedParam {\n  name: AssociatedName;\n  programId: PublicKey;\n  marketId: PublicKey;\n}\n\ntype AssociatedName =\n  | \"amm_associated_seed\"\n  | \"lp_mint_associated_seed\"\n  | \"coin_vault_associated_seed\"\n  | \"pc_vault_associated_seed\"\n  | \"lp_mint_associated_seed\"\n  | \"temp_lp_token_associated_seed\"\n  | \"open_order_associated_seed\"\n  | \"target_associated_seed\"\n  | \"withdraw_associated_seed\";\n\nexport async function getLiquidityAssociatedId({ name, programId, marketId }: GetAssociatedParam): Promise<PublicKey> {\n  const { publicKey } = await findProgramAddress(\n    [programId.toBuffer(), marketId.toBuffer(), Buffer.from(name, \"utf-8\")],\n    programId,\n  );\n  return publicKey;\n}\n\nexport async function getLiquidityAssociatedAuthority({\n  programId,\n}: {\n  programId: PublicKey;\n}): Promise<{ publicKey: PublicKey; nonce: number }> {\n  return findProgramAddress([Buffer.from([97, 109, 109, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121])], programId);\n}\n\nexport async function getAssociatedPoolKeys({\n  version,\n  marketId: _marketId,\n  baseMint: _baseMint,\n  quoteMint: _quoteMint,\n}: {\n  version: LiquidityVersion;\n  marketId: PublicKeyish;\n  baseMint: PublicKeyish;\n  quoteMint: PublicKeyish;\n}): Promise<LiquidityAssociatedPoolKeys> {\n  const programId = getLiquidityProgramId(version);\n  const [marketId, baseMint, quoteMint] = [\n    validateAndParsePublicKey({ publicKey: _marketId }),\n    validateAndParsePublicKey({ publicKey: _baseMint, transformSol: true }),\n    validateAndParsePublicKey({ publicKey: _quoteMint, transformSol: true }),\n  ];\n\n  const id = await getLiquidityAssociatedId({ name: \"amm_associated_seed\", programId, marketId });\n  const lpMint = await getLiquidityAssociatedId({ name: \"lp_mint_associated_seed\", programId, marketId });\n  const { publicKey: authority, nonce } = await getLiquidityAssociatedAuthority({ programId });\n  const baseVault = await getLiquidityAssociatedId({ name: \"coin_vault_associated_seed\", programId, marketId });\n  const quoteVault = await getLiquidityAssociatedId({ name: \"pc_vault_associated_seed\", programId, marketId });\n  const lpVault = await getLiquidityAssociatedId({ name: \"temp_lp_token_associated_seed\", programId, marketId });\n  const openOrders = await getLiquidityAssociatedId({ name: \"open_order_associated_seed\", programId, marketId });\n  const targetOrders = await getLiquidityAssociatedId({ name: \"target_associated_seed\", programId, marketId });\n  const withdrawQueue = await getLiquidityAssociatedId({ name: \"withdraw_associated_seed\", programId, marketId });\n\n  const serumVersion = getSerumVersion(version);\n  const serumProgramId = getSerumProgramId(serumVersion);\n  const { publicKey: marketAuthority } = await getSerumAssociatedAuthority({\n    programId: serumProgramId,\n    marketId,\n  });\n\n  return {\n    // base\n    id,\n    baseMint,\n    quoteMint,\n    lpMint,\n    // version\n    version,\n    programId,\n    // keys\n    authority,\n    nonce,\n    baseVault,\n    quoteVault,\n    lpVault,\n    openOrders,\n    targetOrders,\n    withdrawQueue,\n    // market version\n    marketVersion: serumVersion,\n    marketProgramId: serumProgramId,\n    // market keys\n    marketId,\n    marketAuthority,\n  };\n}\n\nexport async function makeSimulationPoolInfo({\n  connection,\n  pools,\n}: LiquidityFetchMultipleInfoParams & { connection: Connection }): Promise<LiquidityPoolInfo[]> {\n  const instructions = pools.map((pool) => makeSimulatePoolInfoInstruction(pool));\n  const logs = await simulateMultipleInstruction(connection, instructions, \"GetPoolData\");\n\n  return logs.map((log) => {\n    const json = parseSimulateLogToJson(log, \"GetPoolData\");\n    const status = new BN(parseSimulateValue(json, \"status\"));\n    const baseDecimals = Number(parseSimulateValue(json, \"coin_decimals\"));\n    const quoteDecimals = Number(parseSimulateValue(json, \"pc_decimals\"));\n    const lpDecimals = Number(parseSimulateValue(json, \"lp_decimals\"));\n    const baseReserve = new BN(parseSimulateValue(json, \"pool_coin_amount\"));\n    const quoteReserve = new BN(parseSimulateValue(json, \"pool_pc_amount\"));\n    const lpSupply = new BN(parseSimulateValue(json, \"pool_lp_supply\"));\n    let startTime = \"0\";\n    try {\n      startTime = parseSimulateValue(json, \"pool_open_time\");\n    } catch (error) {\n      startTime = \"0\";\n    }\n\n    return {\n      status,\n      baseDecimals,\n      quoteDecimals,\n      lpDecimals,\n      baseReserve,\n      quoteReserve,\n      lpSupply,\n      startTime: new BN(startTime),\n    };\n  });\n}\n\n/**\n * Get currencies amount side of liquidity pool\n * @param amountA - the token amount provided\n * @param amountB - the token amount provided\n * @param poolKeys - the pool keys\n * @returns currencies amount side array\n */\nexport function getAmountsSide(amountA: TokenAmount, amountB: TokenAmount, poolKeys: LiquidityPoolKeys): AmountSide[] {\n  return getTokensSide(amountA.token, amountB.token, poolKeys);\n}\n\nexport function getTokensSide(tokenA: Token, tokenB: Token, poolKeys: LiquidityPoolKeys): AmountSide[] {\n  const { baseMint, quoteMint } = poolKeys;\n\n  const sideA = getTokenSide(tokenA, poolKeys);\n  const sideB = getTokenSide(tokenB, poolKeys);\n\n  if (sideA === sideB)\n    logger.logWithError(\"tokens not match with pool\", \"params\", {\n      tokenA: tokenA.mint,\n      tokenB: tokenB.mint,\n      baseMint,\n      quoteMint,\n    });\n  return [sideA, sideB];\n}\n\nexport function getTokenSide(token: Token, poolKeys: LiquidityPoolKeys): AmountSide {\n  const { baseMint, quoteMint } = poolKeys;\n\n  if (token.mint.equals(baseMint)) return \"base\";\n  else if (token.mint.equals(quoteMint)) return \"quote\";\n\n  logger.logWithError(\"token not match with pool\", \"params\", {\n    token: token.mint,\n    baseMint,\n    quoteMint,\n  });\n  return \"base\"; // won't reach\n}\n\nexport const isValidFixedSide = (val: string): boolean => val === \"a\" || val === \"b\";\n\nexport async function getLiquidityInfo(\n  connection: Connection,\n  poolId: PublicKey,\n  dexProgramId: PublicKey,\n): Promise<{\n  baseAmount: number;\n  quoteAmount: number;\n  lpSupply: number;\n  baseVaultKey: PublicKey;\n  quoteVaultKey: PublicKey;\n  baseVaultBalance: number | null;\n  quoteVaultBalance: number | null;\n  openOrdersKey: PublicKey;\n  openOrdersTotalBase: number;\n  openOrdersTotalQuote: number;\n  basePnl: number;\n  quotePnl: number;\n  priceInQuote: number;\n} | null> {\n  const info = await connection.getAccountInfo(poolId);\n  if (info === null) return null;\n  const state = liquidityStateV4Layout.decode(info.data);\n\n  const baseTokenAmount = await connection.getTokenAccountBalance(state.baseVault);\n  const quoteTokenAmount = await connection.getTokenAccountBalance(state.quoteVault);\n  const openOrders = await OpenOrders.load(connection, state.openOrders, dexProgramId);\n\n  const baseDecimal = 10 ** state.baseDecimal.toNumber();\n  const quoteDecimal = 10 ** state.quoteDecimal.toNumber();\n\n  const openOrdersTotalBase = openOrders.baseTokenTotal.toNumber() / baseDecimal;\n  const openOrdersTotalQuote = openOrders.quoteTokenTotal.toNumber() / quoteDecimal;\n\n  const basePnl = state.baseNeedTakePnl.toNumber() / baseDecimal;\n  const quotePnl = state.quoteNeedTakePnl.toNumber() / quoteDecimal;\n\n  const baseAmount = baseTokenAmount.value.uiAmount! + openOrdersTotalBase - basePnl;\n  const quoteAmount = quoteTokenAmount.value.uiAmount! + openOrdersTotalQuote - quotePnl;\n\n  const lpSupply = parseFloat(state.lpReserve.toString());\n  const priceInQuote = baseAmount / quoteAmount;\n\n  return {\n    baseAmount,\n    quoteAmount,\n    lpSupply,\n    baseVaultKey: state.baseVault,\n    quoteVaultKey: state.quoteVault,\n    baseVaultBalance: baseTokenAmount.value.uiAmount,\n    quoteVaultBalance: quoteTokenAmount.value.uiAmount,\n    openOrdersKey: state.openOrders,\n    openOrdersTotalBase,\n    openOrdersTotalQuote,\n    basePnl,\n    quotePnl,\n    priceInQuote,\n  };\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { SerumVersion } from \"../../api\";\nimport { createLogger } from \"../../common/logger\";\n\nimport { LIQUIDITY_VERSION_TO_SERUM_VERSION } from \"./constant\";\n\nconst logger = createLogger(\"Raydium_liquidity_serum\");\n\n/* ================= program public keys ================= */\nexport const _SERUM_PROGRAM_ID_V3 = \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\";\nexport const SERUM_PROGRAM_ID_V3 = new PublicKey(_SERUM_PROGRAM_ID_V3);\n\n// serum program id string => serum version\nexport const SERUM_PROGRAMID_TO_VERSION: {\n  [key: string]: SerumVersion;\n} = {\n  [_SERUM_PROGRAM_ID_V3]: 3,\n};\n\n// serum version => serum program id\nexport const SERUM_VERSION_TO_PROGRAM_ID: { [key in SerumVersion]?: PublicKey } & {\n  [K: number]: PublicKey;\n} = {\n  3: SERUM_PROGRAM_ID_V3,\n};\n\nexport function getSerumVersion(version: number): SerumVersion {\n  const serumVersion = LIQUIDITY_VERSION_TO_SERUM_VERSION[version];\n  if (!serumVersion) logger.logWithError(\"invalid version\", \"version\", version);\n\n  return serumVersion;\n}\n\nexport function getSerumProgramId(version: number): PublicKey {\n  const programId = SERUM_VERSION_TO_PROGRAM_ID[version];\n  if (!programId) logger.logWithError(\"invalid version\", \"version\", version);\n\n  return programId;\n}\n\nexport async function getSerumAssociatedAuthority({\n  programId,\n  marketId,\n}: {\n  programId: PublicKey;\n  marketId: PublicKey;\n}): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const seeds = [marketId.toBuffer()];\n\n  let nonce = 0;\n  let publicKey: PublicKey;\n\n  while (nonce < 100) {\n    try {\n      const seedsWithNonce = seeds.concat(Buffer.from([nonce]), Buffer.alloc(7));\n      publicKey = await PublicKey.createProgramAddress(seedsWithNonce, programId);\n    } catch (err) {\n      if (err instanceof TypeError) {\n        throw err;\n      }\n      nonce++;\n      continue;\n    }\n    return { publicKey, nonce };\n  }\n\n  logger.logWithError(\"unable to find a viable program address nonce\", \"params\", {\n    programId,\n    marketId,\n  });\n  throw new Error(\"unable to find a viable program address nonce\");\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { intersection, xor } from \"lodash\";\n\nimport { Price } from \"../../module/price\";\nimport { Token } from \"../../module/token\";\nimport { getPoolEnabledFeatures, includesToken } from \"../liquidity/util\";\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\nimport { SwapExtInfo } from \"../trade/type\";\nimport { MakeMultiTransaction } from \"../type\";\n\nimport { ROUTE_PROGRAM_ID_V1 } from \"./constant\";\nimport { makeRouteSwapInstruction } from \"./instruction\";\nimport { RouteComputeAmountOutData, RouteComputeAmountOutParams, RouteSwapTransactionParams } from \"./type\";\nimport { getAssociatedMiddleStatusAccount } from \"./util\";\n\nexport default class Route extends ModuleBase {\n  constructor(params: ModuleBaseProps) {\n    super(params);\n  }\n\n  public computeRouteAmountOut({\n    fromPoolKeys,\n    toPoolKeys,\n    fromPoolInfo,\n    toPoolInfo,\n    amountIn,\n    outputToken,\n    slippage,\n  }: RouteComputeAmountOutParams): RouteComputeAmountOutData {\n    const { swap: fromPoolSwapEnabled } = getPoolEnabledFeatures(fromPoolInfo);\n    const { swap: toPoolSwapEnabled } = getPoolEnabledFeatures(toPoolInfo);\n    if (!fromPoolSwapEnabled || !toPoolSwapEnabled)\n      this.logAndCreateError(\"pools swap not enabled\", \"pools\", {\n        fromPoolKeys,\n        toPoolKeys,\n        fromPoolInfo,\n        toPoolInfo,\n      });\n\n    const tokenIn = amountIn.token;\n    const tokenOut = outputToken;\n\n    if (!includesToken(tokenIn, fromPoolKeys) || !includesToken(tokenOut, toPoolKeys))\n      this.logAndCreateError(\"pools cannot be routed\", \"pools\", {\n        fromPoolKeys,\n        toPoolKeys,\n      });\n\n    const fromPoolMints = [fromPoolKeys.baseMint.toBase58(), fromPoolKeys.quoteMint.toBase58()];\n    const toPoolMints = [toPoolKeys.baseMint.toBase58(), toPoolKeys.quoteMint.toBase58()];\n    const mints = [...fromPoolMints, ...toPoolMints];\n    const decimals = [\n      fromPoolInfo.baseDecimals,\n      fromPoolInfo.quoteDecimals,\n      toPoolInfo.baseDecimals,\n      toPoolInfo.quoteDecimals,\n    ];\n    const [mintIn, mintOut] = [tokenIn.mint.toBase58(), tokenOut.mint.toBase58()];\n\n    const xorMints = xor(fromPoolMints, toPoolMints);\n    if (xorMints.length !== 2 || !xorMints.includes(mintIn) || !xorMints.includes(mintOut))\n      this.logAndCreateError(\"xor tokens not match\", \"pools\", {\n        fromPoolKeys,\n        toPoolKeys,\n      });\n\n    const intersectionMints = intersection(fromPoolMints, toPoolMints);\n    if (intersectionMints.length !== 1)\n      this.logAndCreateError(\"cannot found middle token of two pools\", \"pools\", {\n        fromPoolKeys,\n        toPoolKeys,\n      });\n\n    const _middleMint = intersectionMints[0];\n    const index = mints.indexOf(_middleMint);\n    if (index === -1)\n      this.logAndCreateError(\"cannot found middle token\", \"pools\", {\n        fromPoolKeys,\n        toPoolKeys,\n      });\n\n    const middleMintDecimals = decimals[index];\n    const middleMint = new PublicKey(_middleMint);\n    const middleToken = new Token({ mint: middleMint, decimals: middleMintDecimals });\n\n    this.logInfo(`from pool:`, fromPoolKeys);\n    this.logInfo(\"to pool:\", toPoolKeys);\n    this.logInfo(\"intersection mints:\", intersectionMints);\n    this.logInfo(\"xor mints:\", xorMints);\n    this.logInfo(\"middleMint:\", _middleMint);\n\n    const {\n      minAmountOut: minMiddleAmountOut,\n      priceImpact: firstPriceImpact,\n      fee: firstFee,\n    } = this.scope.liquidity.computeAmountOut({\n      poolKeys: fromPoolKeys,\n      poolInfo: fromPoolInfo,\n      amountIn,\n      outputToken: middleToken,\n      slippage,\n    });\n    const {\n      amountOut,\n      minAmountOut,\n      priceImpact: secondPriceImpact,\n      fee: secondFee,\n    } = this.scope.liquidity.computeAmountOut({\n      poolKeys: toPoolKeys,\n      poolInfo: toPoolInfo,\n      amountIn: minMiddleAmountOut,\n      outputToken,\n      slippage,\n    });\n\n    let executionPrice: Price | null = null;\n    const [amountInRaw, amountOutRaw] = [amountIn.raw, amountOut.raw];\n    if (!amountInRaw.isZero() && !amountOutRaw.isZero()) {\n      executionPrice = new Price({\n        baseToken: tokenIn,\n        denominator: amountInRaw,\n        quoteToken: outputToken,\n        numerator: amountOutRaw,\n      });\n      this.logDebug(\"executionPrice:\", `1 ${tokenIn.symbol} ≈ ${executionPrice.toFixed()} ${outputToken.symbol}`);\n      this.logDebug(\n        \"executionPrice invert:\",\n        `1 ${outputToken.symbol} ≈ ${executionPrice.invert().toFixed()} ${tokenIn.symbol}`,\n      );\n    }\n\n    return {\n      amountOut,\n      minAmountOut,\n      executionPrice,\n      priceImpact: firstPriceImpact.add(secondPriceImpact),\n      fee: [firstFee, secondFee],\n    };\n  }\n\n  public async swapWithRoute(params: RouteSwapTransactionParams): Promise<MakeMultiTransaction & SwapExtInfo> {\n    const { fromPoolKeys, toPoolKeys, amountIn, amountOut, fixedSide, config } = params;\n    this.logDebug(\"amountIn:\", amountIn, \"amountOut:\", amountOut);\n    if (amountIn.isZero() || amountOut.isZero())\n      this.logAndCreateError(\"amounts must greater than zero\", \"amounts\", {\n        amountIn: amountIn.toFixed(),\n        amountOut: amountOut.toFixed(),\n      });\n    const { account } = this.scope;\n    const { bypassAssociatedCheck = false } = config || {};\n    const [tokenIn, tokenOut] = [amountIn.token, amountOut.token];\n\n    const tokenAccountIn = await this.scope.account.getCreatedTokenAccount({\n      mint: tokenIn.mint,\n      associatedOnly: false,\n    });\n    const tokenAccountOut = await this.scope.account.getCreatedTokenAccount({\n      mint: tokenOut.mint,\n    });\n\n    const fromPoolMints = [fromPoolKeys.baseMint.toBase58(), fromPoolKeys.quoteMint.toBase58()];\n    const toPoolMints = [toPoolKeys.baseMint.toBase58(), toPoolKeys.quoteMint.toBase58()];\n    const intersectionMints = intersection(fromPoolMints, toPoolMints);\n    const _middleMint = intersectionMints[0];\n    const middleMint = new PublicKey(_middleMint);\n    const tokenAccountMiddle = await this.scope.account.getCreatedTokenAccount({\n      mint: middleMint,\n    });\n\n    const [amountInRaw, amountOutRaw] = [amountIn.raw, amountOut.raw];\n\n    const preTxBuilder = this.createTxBuilder();\n    const txBuilder = this.createTxBuilder();\n    const { tokenAccount: _tokenAccountIn, ...accountInInstruction } = await account.handleTokenAccount({\n      side: \"in\",\n      amount: amountInRaw,\n      mint: tokenIn.mint,\n      tokenAccount: tokenAccountIn,\n      bypassAssociatedCheck,\n      skipCloseAccount: true,\n    });\n    preTxBuilder.addInstruction(accountInInstruction);\n    const { tokenAccount: _tokenAccountOut, ...accountOutInstruction } = await account.handleTokenAccount({\n      side: \"out\",\n      amount: 0,\n      mint: tokenOut.mint,\n      tokenAccount: tokenAccountOut,\n      bypassAssociatedCheck,\n      skipCloseAccount: true,\n    });\n    preTxBuilder.addInstruction(accountOutInstruction);\n    const { tokenAccount: _tokenAccountMiddle, ...accountMiddleInstruction } = await account.handleTokenAccount({\n      side: \"in\",\n      amount: 0,\n      mint: middleMint,\n      tokenAccount: tokenAccountMiddle,\n      bypassAssociatedCheck,\n      skipCloseAccount: true,\n    });\n    preTxBuilder.addInstruction(accountMiddleInstruction);\n    txBuilder.addInstruction({\n      instructions: makeRouteSwapInstruction({\n        fromPoolKeys,\n        toPoolKeys,\n        userKeys: {\n          inTokenAccount: _tokenAccountIn,\n          outTokenAccount: _tokenAccountOut,\n          middleTokenAccount: _tokenAccountMiddle,\n          middleStatusAccount: await getAssociatedMiddleStatusAccount({\n            programId: ROUTE_PROGRAM_ID_V1,\n            fromPoolId: fromPoolKeys.id,\n            middleMint,\n            owner: this.scope.ownerPubKey,\n          }),\n          owner: this.scope.ownerPubKey,\n        },\n        amountIn: amountInRaw,\n        amountOut: amountOutRaw,\n        fixedSide,\n      }),\n    });\n    const preBuildData = preTxBuilder.build();\n    const buildData = (await txBuilder.buildMultiTx({\n      extraPreBuildData: [preBuildData],\n      extInfo: { amountOut: amountOutRaw },\n    })) as MakeMultiTransaction & SwapExtInfo;\n    return buildData;\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport {\n  ETHMint,\n  mSOLMint,\n  PAIMint,\n  RAYMint,\n  stSOLMint,\n  USDCMint,\n  USDHMint,\n  USDTMint,\n  WSOLMint,\n} from \"../../common/pubKey\";\n\nexport const _ROUTE_PROGRAM_ID_V1 = \"routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS\";\nexport const ROUTE_PROGRAM_ID_V1 = new PublicKey(_ROUTE_PROGRAM_ID_V1);\n\nexport const defaultRoutes = [\"amm\", \"serum\", \"route\"];\n\nexport const swapRouteMiddleMints = [\n  USDCMint,\n  RAYMint,\n  WSOLMint,\n  mSOLMint,\n  PAIMint,\n  stSOLMint,\n  USDHMint,\n  USDTMint,\n  ETHMint,\n].map((pubKey) => pubKey.toBase58());\n","import { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\n\nimport { parseBigNumberish } from \"../../common/bignumber\";\nimport { createLogger } from \"../../common/logger\";\nimport { accountMeta } from \"../../common/pubKey\";\nimport { MODEL_DATA_PUBKEY } from \"../liquidity/stable\";\n\nimport { ROUTE_PROGRAM_ID_V1 } from \"./constant\";\nimport { routeSwapInLayout, routeSwapOutLayout } from \"./layout\";\nimport {\n  RouteSwapInFixedInInstructionParams,\n  RouteSwapInstructionParams,\n  RouteSwapOutFixedInInstructionParams,\n} from \"./type\";\n\nconst logger = createLogger(\"Raydium_route_instruction\");\nexport function makeRouteSwapInstruction(params: RouteSwapInstructionParams): TransactionInstruction[] {\n  const { fixedSide } = params;\n\n  if (fixedSide === \"in\") {\n    return [makeSwapInFixedInInstruction(params), makeSwapOutFixedInInstruction(params)];\n  }\n\n  logger.logWithError(\"invalid params\", \"params\", params);\n  throw new Error(`invalid params, params: ${params}`);\n}\n\nexport function makeSwapInFixedInInstruction({\n  fromPoolKeys,\n  toPoolKeys,\n  userKeys,\n  amountIn,\n  amountOut,\n}: RouteSwapInFixedInInstructionParams): TransactionInstruction {\n  const data = Buffer.alloc(routeSwapInLayout.span);\n\n  let keys;\n\n  if (fromPoolKeys.version === 4) {\n    routeSwapInLayout.encode(\n      {\n        instruction: 0,\n        amountIn: parseBigNumberish(amountIn),\n        amountOut: parseBigNumberish(amountOut),\n      },\n      data,\n    );\n    keys = [\n      // system\n      accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n      // amm\n      accountMeta({ pubkey: fromPoolKeys.programId, isWritable: false }),\n      accountMeta({ pubkey: fromPoolKeys.id }),\n      accountMeta({ pubkey: toPoolKeys.id, isWritable: false }),\n      accountMeta({ pubkey: fromPoolKeys.authority, isWritable: false }),\n      accountMeta({ pubkey: fromPoolKeys.openOrders }),\n      accountMeta({ pubkey: fromPoolKeys.baseVault }),\n      accountMeta({ pubkey: fromPoolKeys.quoteVault }),\n      // serum\n      accountMeta({ pubkey: fromPoolKeys.marketProgramId, isWritable: false }),\n      accountMeta({ pubkey: fromPoolKeys.marketId }),\n      accountMeta({ pubkey: fromPoolKeys.marketBids }),\n      accountMeta({ pubkey: fromPoolKeys.marketAsks }),\n      accountMeta({ pubkey: fromPoolKeys.marketEventQueue }),\n      accountMeta({ pubkey: fromPoolKeys.marketBaseVault }),\n      accountMeta({ pubkey: fromPoolKeys.marketQuoteVault }),\n      accountMeta({ pubkey: fromPoolKeys.marketAuthority, isWritable: false }),\n      // user\n      accountMeta({ pubkey: userKeys.inTokenAccount }),\n      accountMeta({ pubkey: userKeys.middleTokenAccount }),\n      accountMeta({ pubkey: userKeys.middleStatusAccount }),\n      accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\n    ];\n  } else {\n    routeSwapInLayout.encode(\n      {\n        instruction: 2,\n        amountIn: parseBigNumberish(amountIn),\n        amountOut: parseBigNumberish(amountOut),\n      },\n      data,\n    );\n    keys = [\n      // system\n      accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n      // amm\n      accountMeta({ pubkey: fromPoolKeys.programId, isWritable: false }),\n      accountMeta({ pubkey: fromPoolKeys.id }),\n      accountMeta({ pubkey: toPoolKeys.id, isWritable: false }),\n      accountMeta({ pubkey: fromPoolKeys.authority, isWritable: false }),\n      accountMeta({ pubkey: fromPoolKeys.openOrders }),\n      accountMeta({ pubkey: fromPoolKeys.baseVault }),\n      accountMeta({ pubkey: fromPoolKeys.quoteVault }),\n      accountMeta({ pubkey: MODEL_DATA_PUBKEY, isWritable: false }),\n      // serum\n      accountMeta({ pubkey: fromPoolKeys.marketProgramId, isWritable: false }),\n      accountMeta({ pubkey: fromPoolKeys.marketId }),\n      accountMeta({ pubkey: fromPoolKeys.marketBids }),\n      accountMeta({ pubkey: fromPoolKeys.marketAsks }),\n      accountMeta({ pubkey: fromPoolKeys.marketEventQueue }),\n      accountMeta({ pubkey: fromPoolKeys.id }),\n      accountMeta({ pubkey: fromPoolKeys.id }),\n      accountMeta({ pubkey: fromPoolKeys.id }),\n      // user\n      accountMeta({ pubkey: userKeys.inTokenAccount }),\n      accountMeta({ pubkey: userKeys.middleTokenAccount }),\n      accountMeta({ pubkey: userKeys.middleStatusAccount }),\n      accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\n    ];\n  }\n\n  return new TransactionInstruction({\n    programId: ROUTE_PROGRAM_ID_V1,\n    keys,\n    data,\n  });\n}\n\nexport function makeSwapOutFixedInInstruction({\n  fromPoolKeys,\n  toPoolKeys,\n  userKeys,\n}: RouteSwapOutFixedInInstructionParams): TransactionInstruction {\n  const data = Buffer.alloc(routeSwapOutLayout.span);\n\n  let keys;\n  if (toPoolKeys.version === 4) {\n    routeSwapOutLayout.encode(\n      {\n        instruction: 1,\n      },\n      data,\n    );\n    keys = [\n      // system\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n      // amm\n      accountMeta({ pubkey: toPoolKeys.programId, isWritable: false }),\n      accountMeta({ pubkey: fromPoolKeys.id, isWritable: false }),\n      accountMeta({ pubkey: toPoolKeys.id }),\n      accountMeta({ pubkey: toPoolKeys.authority, isWritable: false }),\n      accountMeta({ pubkey: toPoolKeys.openOrders }),\n      accountMeta({ pubkey: toPoolKeys.baseVault }),\n      accountMeta({ pubkey: toPoolKeys.quoteVault }),\n      // serum\n      accountMeta({ pubkey: toPoolKeys.marketProgramId, isWritable: false }),\n      accountMeta({ pubkey: toPoolKeys.marketId }),\n      accountMeta({ pubkey: toPoolKeys.marketBids }),\n      accountMeta({ pubkey: toPoolKeys.marketAsks }),\n      accountMeta({ pubkey: toPoolKeys.marketEventQueue }),\n      accountMeta({ pubkey: toPoolKeys.marketBaseVault }),\n      accountMeta({ pubkey: toPoolKeys.marketQuoteVault }),\n      accountMeta({ pubkey: toPoolKeys.marketAuthority, isWritable: false }),\n      // user\n      accountMeta({ pubkey: userKeys.middleTokenAccount }),\n      accountMeta({ pubkey: userKeys.outTokenAccount }),\n      accountMeta({ pubkey: userKeys.middleStatusAccount }),\n      accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\n    ];\n  } else {\n    routeSwapOutLayout.encode(\n      {\n        instruction: 3,\n      },\n      data,\n    );\n    keys = [\n      // system\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n      // amm\n      accountMeta({ pubkey: toPoolKeys.programId, isWritable: false }),\n      accountMeta({ pubkey: fromPoolKeys.id, isWritable: false }),\n      accountMeta({ pubkey: toPoolKeys.id }),\n      accountMeta({ pubkey: toPoolKeys.authority, isWritable: false }),\n      accountMeta({ pubkey: toPoolKeys.openOrders }),\n      accountMeta({ pubkey: toPoolKeys.baseVault }),\n      accountMeta({ pubkey: toPoolKeys.quoteVault }),\n      accountMeta({ pubkey: MODEL_DATA_PUBKEY, isWritable: false }),\n      // serum\n      accountMeta({ pubkey: toPoolKeys.marketProgramId, isWritable: false }),\n      accountMeta({ pubkey: toPoolKeys.marketId }),\n      accountMeta({ pubkey: toPoolKeys.marketBids }),\n      accountMeta({ pubkey: toPoolKeys.marketAsks }),\n      accountMeta({ pubkey: toPoolKeys.marketEventQueue }),\n      accountMeta({ pubkey: toPoolKeys.id }),\n      accountMeta({ pubkey: toPoolKeys.id }),\n      accountMeta({ pubkey: toPoolKeys.id }),\n      // user\n      accountMeta({ pubkey: userKeys.middleTokenAccount }),\n      accountMeta({ pubkey: userKeys.outTokenAccount }),\n      accountMeta({ pubkey: userKeys.middleStatusAccount }),\n      accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\n    ];\n  }\n\n  return new TransactionInstruction({\n    programId: ROUTE_PROGRAM_ID_V1,\n    keys,\n    data,\n  });\n}\n","import { struct, u64, u8 } from \"../../marshmallow\";\n\nexport const routeSwapInLayout = struct([u8(\"instruction\"), u64(\"amountIn\"), u64(\"amountOut\")]);\nexport const routeSwapOutLayout = struct([u8(\"instruction\")]);\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { findProgramAddress } from \"../../common/txTool\";\n\nexport async function getAssociatedMiddleStatusAccount({\n  programId,\n  fromPoolId,\n  middleMint,\n  owner,\n}: {\n  programId: PublicKey;\n  fromPoolId: PublicKey;\n  middleMint: PublicKey;\n  owner: PublicKey;\n}): Promise<PublicKey> {\n  const { publicKey } = await findProgramAddress(\n    [fromPoolId.toBuffer(), middleMint.toBuffer(), owner.toBuffer()],\n    programId,\n  );\n  return publicKey;\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { BigNumberish, parseBigNumberish, parseNumberInfo, toBN, toTokenPrice } from \"../../common/bignumber\";\nimport { PublicKeyish, SOLMint, validateAndParsePublicKey } from \"../../common/pubKey\";\nimport { Token, TokenAmount, Fraction, Price } from \"../../module\";\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\nimport { LoadParams } from \"../type\";\n\nimport { quantumSOLHydratedTokenJsonInfo, TOKEN_WSOL } from \"./constant\";\nimport { SplToken, TokenJson } from \"./type\";\nimport { sortTokens } from \"./util\";\n\nexport interface MintToTokenAmount {\n  mint: PublicKeyish;\n  amount: BigNumberish;\n  decimalDone?: boolean;\n}\n\nexport default class TokenModule extends ModuleBase {\n  private _tokens: TokenJson[] = [];\n  private _tokenMap: Map<string, SplToken> = new Map();\n  private _tokenPrice: Map<string, Price> = new Map();\n  private _mintList: { official: string[]; unOfficial: string[]; unNamed: string[] };\n\n  constructor(params: ModuleBaseProps) {\n    super(params);\n    this._mintList = { official: [], unOfficial: [], unNamed: [] };\n  }\n\n  public async load(params?: LoadParams): Promise<void> {\n    this.checkDisabled();\n    await this.scope.fetchTokens(params?.forceUpdate);\n    // unofficial: solana token list\n    // official: raydium token list\n    this._mintList = { official: [], unOfficial: [], unNamed: [] };\n    this._tokens = [];\n    this._tokenMap = new Map();\n    const { data } = this.scope.apiData.tokens || {\n      data: { official: [], unOfficial: [], unNamed: [], blacklist: [] },\n    };\n\n    const blacklistSet = new Set(data.blacklist);\n    [data.official, data.unOfficial, data.unNamed].forEach((tokenGroup, idx) => {\n      tokenGroup.forEach((token) => {\n        const category = [\"official\", \"unOfficial\", \"unNamed\"][idx];\n        if (!blacklistSet.has(token.mint) && token.mint !== SOLMint.toBase58()) {\n          this._tokens.push({\n            ...token,\n            symbol: token.symbol || \"\",\n            name: token.name || \"\",\n          });\n          this._mintList[category].push(token.mint);\n        }\n      });\n    });\n    this._mintList[\"official\"].push(quantumSOLHydratedTokenJsonInfo.mint.toBase58());\n    this._tokens = sortTokens(this._tokens, this._mintList);\n    this._tokens.push({\n      ...quantumSOLHydratedTokenJsonInfo,\n      mint: SOLMint.toBase58(),\n    });\n    this._tokens.forEach((token) => {\n      this._tokenMap.set(token.mint, {\n        ...token,\n        id: token.mint,\n      });\n    });\n    this._tokenMap.set(TOKEN_WSOL.mint, { ...TOKEN_WSOL, icon: quantumSOLHydratedTokenJsonInfo.icon, id: \"wsol\" });\n    this._tokenMap.set(SOLMint.toBase58(), { ...quantumSOLHydratedTokenJsonInfo, mint: SOLMint.toBase58() });\n  }\n\n  get allTokens(): TokenJson[] {\n    return this._tokens;\n  }\n  get allTokenMap(): Map<string, SplToken> {\n    return this._tokenMap;\n  }\n  get tokenMints(): { official: string[]; unOfficial: string[] } {\n    return this._mintList;\n  }\n  get tokenPrices(): Map<string, Price> {\n    return this._tokenPrice;\n  }\n\n  public async fetchTokenPrices(preloadRaydiumPrice?: Record<string, number>): Promise<Map<string, Price>> {\n    const coingeckoTokens = this.allTokens.filter(\n      (token) => !!token.extensions?.coingeckoId && token.mint !== PublicKey.default.toBase58(),\n    );\n    const coingeckoIds = coingeckoTokens.map((token) => token.extensions.coingeckoId!);\n    const coingeckoPriceRes = await this.scope.api.getCoingeckoPrice(coingeckoIds);\n\n    const coingeckoPrices: { [key: string]: Price } = coingeckoTokens.reduce(\n      (acc, token) =>\n        coingeckoPriceRes[token.extensions.coingeckoId!].usd\n          ? {\n              ...acc,\n              [token.mint]: toTokenPrice({\n                token: this._tokenMap.get(token.mint)!,\n                numberPrice: coingeckoPriceRes[token.extensions.coingeckoId!].usd!,\n                decimalDone: true,\n              }),\n            }\n          : acc,\n      {},\n    );\n\n    const raydiumPriceRes = preloadRaydiumPrice || (await this.scope.api.getRaydiumTokenPrice());\n    const raydiumPrices: { [key: string]: Price } = Object.keys(raydiumPriceRes).reduce(\n      (acc, key) =>\n        this._tokenMap.get(key)\n          ? {\n              ...acc,\n              [key]: toTokenPrice({\n                token: this._tokenMap.get(key)!,\n                numberPrice: raydiumPriceRes[key],\n                decimalDone: true,\n              }),\n            }\n          : acc,\n      {},\n    );\n    this._tokenPrice = new Map([...Object.entries(coingeckoPrices), ...Object.entries(raydiumPrices)]);\n    return this._tokenPrice;\n  }\n\n  public mintToToken(mint: PublicKeyish): Token {\n    const _mint = validateAndParsePublicKey({ publicKey: mint, transformSol: true });\n    const tokenInfo = this.allTokenMap.get(_mint.toBase58());\n    if (!tokenInfo) this.logAndCreateError(\"token not found, mint:\", _mint.toBase58());\n    const { decimals, name, symbol } = tokenInfo!;\n    return new Token({ mint, decimals, name, symbol });\n  }\n\n  public mintToTokenAmount({ mint, amount, decimalDone }: MintToTokenAmount): TokenAmount {\n    const token = this.mintToToken(mint);\n\n    if (decimalDone) return new TokenAmount(token, parseBigNumberish(amount));\n    return new TokenAmount(token, this.decimalAmount({ mint, amount, decimalDone }));\n  }\n\n  public decimalAmount({ mint, amount }: MintToTokenAmount): BN {\n    const numberDetails = parseNumberInfo(amount);\n    const token = this.mintToToken(mint);\n    return toBN(new Fraction(numberDetails.numerator, numberDetails.denominator).mul(new BN(10 ** token.decimals)));\n  }\n\n  public uiAmount({ mint, amount }: MintToTokenAmount): string {\n    const numberDetails = parseNumberInfo(amount);\n    const token = this.mintToToken(mint);\n    if (!token) return \"\";\n    return new Fraction(numberDetails.numerator, numberDetails.denominator)\n      .div(new BN(10 ** token.decimals))\n      .toSignificant(token.decimals);\n  }\n}\n","import { publicKey, struct, u32, u64, u8 } from \"../../marshmallow\";\n\nexport const SPL_MINT_LAYOUT = struct([\n  u32(\"mintAuthorityOption\"),\n  publicKey(\"mintAuthority\"),\n  u64(\"supply\"),\n  u8(\"decimals\"),\n  u8(\"isInitialized\"),\n  u32(\"freezeAuthorityOption\"),\n  publicKey(\"freezeAuthority\"),\n]);\n\nexport type SplMintLayout = typeof SPL_MINT_LAYOUT;\n","import { Connection } from \"@solana/web3.js\";\n\nimport { ApiTokenInfo } from \"../../api/type\";\nimport { PublicKeyish, validateAndParsePublicKey } from \"../../common/pubKey\";\nimport { GetStructureSchema } from \"../../marshmallow\";\n\nimport { SPL_MINT_LAYOUT } from \"./layout\";\nimport { TokenJson } from \"./type\";\n\nexport function sortTokens(tokens: TokenJson[], mintList: { official: string[]; unOfficial: string[] }): TokenJson[] {\n  return tokens.sort((tokenA, tokenB) => {\n    const { official, unOfficial } = mintList;\n    const officialMintSet = new Set(official);\n    const unOfficialMintSet = new Set(unOfficial);\n\n    const getPriority = (token: ApiTokenInfo): number =>\n      officialMintSet.has(token.mint) ? 1 : unOfficialMintSet.has(token.mint) ? 2 : 3;\n    const priorityOrderDiff = getPriority(tokenA) - getPriority(tokenB);\n    const startWithLetter = (s: string): boolean => !/^[a-zA-Z]/.test(s);\n    if (priorityOrderDiff === 0) {\n      const startWithLetterA = startWithLetter(tokenA.symbol);\n      const startWithLetterB = startWithLetter(tokenB.symbol);\n      if (startWithLetterA && !startWithLetterB) return 1;\n      if (!startWithLetterA && startWithLetterB) return -1;\n      return tokenA.symbol.localeCompare(tokenB.symbol);\n    } else {\n      return priorityOrderDiff;\n    }\n  });\n}\n\nexport async function getSPLTokenInfo(\n  connection: Connection,\n  mintish: PublicKeyish,\n): Promise<GetStructureSchema<typeof SPL_MINT_LAYOUT> | undefined> {\n  try {\n    if (!connection) return;\n    const tokenAccount = await connection.getAccountInfo(validateAndParsePublicKey({ publicKey: mintish }));\n    if (!tokenAccount) return;\n    if (tokenAccount.data.length !== SPL_MINT_LAYOUT.span) return;\n    return SPL_MINT_LAYOUT.decode(tokenAccount.data);\n  } catch {\n    return;\n  }\n}\n","import { AmmSource } from \"../liquidity/type\";\n\nexport function groupPools(pools: AmmSource[]): AmmSource[][] {\n  const grouped: AmmSource[][] = [];\n\n  for (let index = 0; index < pools.length; index++) {\n    for (let i = 0; i < pools.length; i++) {\n      if (index == i) continue;\n      grouped.push([pools[index], pools[i]]);\n    }\n  }\n  return grouped;\n}\n","import { BN_ZERO, BigNumberish, parseBigNumberish } from \"../../common/bignumber\";\nimport { div, gte } from \"../../common/fractionUtil\";\nimport { PublicKeyish, validateAndParsePublicKey, WSOLMint } from \"../../common/pubKey\";\nimport { jsonInfo2PoolKeys } from \"../../common/utility\";\nimport { Percent, Price, TokenAmount } from \"../../module\";\nimport { LiquidityPoolJsonInfo } from \"../liquidity/type\";\nimport ModuleBase from \"../moduleBase\";\nimport { defaultRoutes, swapRouteMiddleMints } from \"../route/constant\";\nimport { MakeMultiTransaction, MakeTransaction } from \"../type\";\n\nimport {\n  AvailableSwapPools,\n  CustomSwapParams,\n  GetAmountOutReturn,\n  GetBestAmountOutParams,\n  RouteInfo,\n  RouteType,\n  SwapExtInfo,\n  SwapParams,\n} from \"./type\";\nimport { groupPools } from \"./util\";\nimport {\n  createWSolAccountInstructions,\n  closeAccountInstruction,\n  makeTransferInstruction,\n} from \"../account/instruction\";\nimport { TokenAccount } from \"../account/types\";\n\nexport default class Trade extends ModuleBase {\n  public async load(): Promise<void> {\n    this.checkDisabled();\n    await this.scope.fetchLiquidity();\n  }\n\n  private async _getBestSwapPool({\n    availablePools,\n    officialPoolIdSet,\n  }: {\n    availablePools: LiquidityPoolJsonInfo[];\n    officialPoolIdSet: Set<string>;\n  }): Promise<LiquidityPoolJsonInfo | undefined> {\n    if (availablePools.length === 0) return undefined;\n    if (availablePools.length === 1) return availablePools[0];\n    const officials = availablePools.filter((info) => officialPoolIdSet.has(info.id));\n    if (officials.length === 1) return officials[0];\n    const sameLevels = await this.scope.liquidity.sdkParseJsonLiquidityInfo(\n      officials.length ? officials : availablePools,\n    );\n    // have most lp Supply\n    const largest = sameLevels.reduce((acc, curr) => {\n      const accIsStable = acc.version === 5;\n      const currIsStable = curr.version === 5;\n      if (accIsStable && !currIsStable) return acc;\n      if (!accIsStable && currIsStable) return curr;\n      return gte(div(acc.lpSupply, 10 ** acc.lpDecimals), div(curr.lpSupply, 10 ** curr.lpDecimals)) ? acc : curr;\n    });\n    return largest.jsonInfo;\n  }\n\n  public async getAvailablePools(params: {\n    inputMint: PublicKeyish;\n    outputMint: PublicKeyish;\n  }): Promise<AvailableSwapPools> {\n    this.checkDisabled();\n    const { inputMint, outputMint } = params;\n    const [mintIn, mintOut] = [\n      validateAndParsePublicKey({ publicKey: inputMint, transformSol: true }).toBase58(),\n      validateAndParsePublicKey({ publicKey: outputMint, transformSol: true }).toBase58(),\n    ];\n    const availablePools = this.scope.liquidity.allPools.filter(\n      (info) =>\n        (info.baseMint === mintIn && info.quoteMint === mintOut) ||\n        (info.baseMint === mintOut && info.quoteMint === mintIn),\n    );\n\n    const candidateTokenMintsSet = new Set([...swapRouteMiddleMints, mintIn, mintOut]); // list with swap tokens\n    const routeOnlyMintsSet = new Set(JSON.parse(JSON.stringify([...candidateTokenMintsSet]))); // list without swap tokens\n    routeOnlyMintsSet.delete(mintIn);\n    routeOnlyMintsSet.delete(mintOut);\n    const routedPools = this.scope.liquidity.allPools.filter((info) => {\n      const isCandidate = candidateTokenMintsSet.has(info.baseMint) && candidateTokenMintsSet.has(info.quoteMint);\n      const onlyInRoute = routeOnlyMintsSet.has(info.baseMint) && routeOnlyMintsSet.has(info.quoteMint);\n      return isCandidate && !onlyInRoute;\n    });\n\n    const best = await this._getBestSwapPool({\n      availablePools,\n      officialPoolIdSet: this.scope.liquidity.allPoolIdSet.official,\n    });\n\n    return { availablePools, best, routedPools };\n  }\n\n  /**\n   * Get best amount out\n   *\n   * @param pools - pools to calculate best swap rate, if not passed, will find automatically - optional\n   */\n  public async getBestAmountOut({\n    pools,\n    amountIn,\n    inputToken,\n    outputToken,\n    slippage,\n    features,\n  }: GetBestAmountOutParams): Promise<GetAmountOutReturn> {\n    this.checkDisabled();\n    if (!pools) {\n      const { routedPools } = await this.getAvailablePools({\n        inputMint: inputToken.mint,\n        outputMint: outputToken.mint,\n      });\n      pools = routedPools;\n    }\n    const sdkParsedInfo = await this.scope.liquidity.sdkParseJsonLiquidityInfo(pools || []);\n    const _pools = (pools || []).map((pool, idx) => ({\n      poolKeys: jsonInfo2PoolKeys(pool),\n      poolInfo: sdkParsedInfo[idx],\n    }));\n\n    const _features = features || defaultRoutes;\n    this.logDebug(\"features:\", _features);\n    if (!_pools.length)\n      this.logAndCreateError(\"please provide at least one source of trade or (inputMint & outputMint)\", _pools);\n\n    // the route of the trade\n    let routes: RouteInfo[] = [];\n    let routeType: RouteType = \"amm\";\n\n    const _amountIn = new TokenAmount(inputToken, amountIn);\n    // the output amount for the trade assuming no slippage\n    let _amountOut = new TokenAmount(outputToken, 0);\n    let _minAmountOut = _amountOut;\n\n    let _currentPrice: Price | null = null;\n    // the price expressed in terms of output amount/input amount\n    let _executionPrice: Price | null = null;\n\n    // the percent difference between the mid price before the trade and the trade execution price\n    let _priceImpact = new Percent(BN_ZERO);\n    let _fee: TokenAmount[] = [];\n\n    // amm directly\n    if (_features.includes(\"amm\")) {\n      for (const { poolKeys, poolInfo } of _pools) {\n        // * if currencies not match with pool, will throw error\n        try {\n          const { amountOut, minAmountOut, currentPrice, executionPrice, priceImpact, fee } =\n            this.scope.liquidity.computeAmountOut({\n              poolKeys,\n              poolInfo,\n              amountIn: _amountIn,\n              outputToken,\n              slippage,\n            });\n\n          if (amountOut.gt(_amountOut)) {\n            console.log(\"amm\", poolInfo);\n            routes = [{ source: \"amm\", keys: poolKeys }];\n            routeType = \"amm\";\n            _amountOut = amountOut;\n            _minAmountOut = minAmountOut;\n            _currentPrice = currentPrice;\n            _executionPrice = executionPrice;\n            _priceImpact = priceImpact;\n            _fee = [fee];\n          }\n        } catch {\n          //\n        }\n      }\n    }\n\n    // amm route\n    if (_features.includes(\"route\")) {\n      const groupedPools = groupPools(_pools);\n      for (const grouped of groupedPools) {\n        if (grouped.length !== 2) continue;\n\n        const [from, to] = grouped;\n        const { poolKeys: fromPoolKeys, poolInfo: fromPoolInfo } = from;\n        const { poolKeys: toPoolKeys, poolInfo: toPoolInfo } = to;\n\n        // * if currencies not match with pool, will throw error\n        try {\n          const { amountOut, minAmountOut, executionPrice, priceImpact, fee } = this.scope.route.computeRouteAmountOut({\n            fromPoolKeys,\n            toPoolKeys,\n            fromPoolInfo,\n            toPoolInfo,\n            amountIn: _amountIn,\n            outputToken,\n            slippage,\n          });\n\n          if (amountOut.gt(_amountOut)) {\n            routes = [\n              { source: \"amm\", keys: fromPoolKeys },\n              { source: \"amm\", keys: toPoolKeys },\n            ];\n            routeType = \"route\";\n            _amountOut = amountOut;\n            _minAmountOut = minAmountOut;\n            _executionPrice = executionPrice;\n            _priceImpact = priceImpact;\n            _fee = fee;\n          }\n        } catch (error) {\n          //\n        }\n      }\n    }\n\n    return {\n      routes,\n      routeType,\n      amountOut: _amountOut,\n      minAmountOut: _minAmountOut,\n      fixedSide: \"in\",\n      currentPrice: _currentPrice,\n      executionPrice: _executionPrice,\n      priceImpact: _priceImpact,\n      fee: _fee,\n    };\n  }\n\n  public async directSwap(params: SwapParams): Promise<MakeMultiTransaction & SwapExtInfo> {\n    this.checkDisabled();\n    const { amountOut, amountIn, slippage, config } = params;\n    const inputToken = amountIn.token;\n    const outputToken = amountOut.token;\n    const { routes, routeType, minAmountOut } = await this.getBestAmountOut({\n      inputToken,\n      outputToken,\n      amountIn: amountIn.raw!,\n      slippage,\n    });\n\n    return await this.swap({\n      routes,\n      routeType,\n      amountIn,\n      amountOut: minAmountOut,\n      fixedSide: \"in\",\n      config,\n    });\n  }\n\n  public async swap(params: CustomSwapParams): Promise<MakeMultiTransaction & SwapExtInfo> {\n    this.checkDisabled();\n    this.scope.checkOwner();\n    const { routes, routeType, amountIn, amountOut, fixedSide, config } = params;\n    if (routeType === \"amm\" && routes.length === 1) {\n      return await this.scope.liquidity.swapWithAMM({\n        poolKeys: routes[0].keys,\n        amountIn,\n        amountOut,\n        fixedSide,\n        config,\n      });\n    } else if (routeType === \"route\" && routes.length === 2) {\n      return await this.scope.route.swapWithRoute({\n        fromPoolKeys: routes[0].keys,\n        toPoolKeys: routes[1].keys,\n        amountIn,\n        amountOut,\n        fixedSide,\n        config,\n      });\n    }\n    this.logAndCreateError(\"invalid routes with routeType\", \"routes\", {\n      routeType,\n      routes,\n    });\n    throw new Error(\"invalid routes with routeType\");\n  }\n\n  private async getWSolAccounts(): Promise<TokenAccount[]> {\n    this.scope.checkOwner();\n    await this.scope.account.fetchWalletTokenAccounts();\n    const tokenAccounts = this.scope.account.tokenAccounts.filter((acc) => acc.mint.equals(WSOLMint));\n    tokenAccounts.sort((a, b) => {\n      if (a.isAssociated) return 1;\n      if (b.isAssociated) return -1;\n      return a.amount.lt(b.amount) ? -1 : 1;\n    });\n    return tokenAccounts;\n  }\n\n  public async unWrapWSol(amount: BigNumberish): Promise<MakeTransaction> {\n    const tokenAccounts = await this.getWSolAccounts();\n    const txBuilder = this.createTxBuilder();\n    const ins = await createWSolAccountInstructions({\n      connection: this.scope.connection,\n      owner: this.scope.ownerPubKey,\n      payer: this.scope.ownerPubKey,\n      amount: 0,\n    });\n    txBuilder.addInstruction(ins);\n\n    const amountBN = parseBigNumberish(amount);\n    for (let i = 0; i < tokenAccounts.length; i++) {\n      if (amountBN.gte(tokenAccounts[i].amount)) {\n        txBuilder.addInstruction({\n          instructions: [\n            closeAccountInstruction({\n              tokenAccount: tokenAccounts[i].publicKey!,\n              payer: this.scope.ownerPubKey,\n              owner: this.scope.ownerPubKey,\n            }),\n          ],\n        });\n        amountBN.sub(tokenAccounts[i].amount);\n      } else {\n        txBuilder.addInstruction({\n          instructions: [\n            closeAccountInstruction({\n              tokenAccount: tokenAccounts[i].publicKey!,\n              payer: this.scope.ownerPubKey,\n              owner: this.scope.ownerPubKey,\n            }),\n          ],\n        });\n        makeTransferInstruction({\n          destination: ins.signers![0].publicKey,\n          source: tokenAccounts[i].publicKey!,\n          amount: amountBN,\n          owner: this.scope.ownerPubKey,\n        });\n      }\n    }\n\n    return txBuilder.build();\n  }\n\n  public async wrapWSol(amount: BigNumberish): Promise<MakeTransaction> {\n    const tokenAccounts = await this.getWSolAccounts();\n\n    const txBuilder = this.createTxBuilder();\n    const ins = await createWSolAccountInstructions({\n      connection: this.scope.connection,\n      owner: this.scope.ownerPubKey,\n      payer: this.scope.ownerPubKey,\n      amount,\n      skipCloseAccount: true,\n    });\n    txBuilder.addInstruction(ins);\n\n    if (tokenAccounts.length) {\n      // already have wsol account\n      txBuilder.addInstruction({\n        instructions: [\n          makeTransferInstruction({\n            // destination: ins.signers![0].publicKey,\n            destination: tokenAccounts[0].publicKey!,\n            source: ins.signers![0].publicKey,\n            amount,\n            owner: this.scope.ownerPubKey,\n          }),\n        ],\n        endInstructions: [\n          closeAccountInstruction({\n            tokenAccount: ins.signers![0].publicKey,\n            payer: this.scope.ownerPubKey,\n            owner: this.scope.ownerPubKey,\n          }),\n        ],\n      });\n    }\n    return txBuilder.build();\n  }\n}\n","import { Connection, PublicKey, SendOptions, Signer, Transaction } from \"@solana/web3.js\";\n\nimport { ApiTokenCategory, ApiTokenInfo } from \"../api\";\n\nexport interface RaydiumTokenInfo extends ApiTokenInfo {\n  category: ApiTokenCategory;\n}\n\nexport type SignAllTransactions = ((transaction: Transaction[]) => Promise<Transaction[]>) | undefined;\n\nexport interface MakeTransaction {\n  signers: Signer[];\n  transaction: Transaction;\n  execute: () => Promise<string>;\n  extInfo: Record<string, any>;\n}\n\nexport interface MakeMultiTransaction {\n  signers: Signer[][];\n  transactions: Transaction[];\n  execute: () => Promise<string[]>;\n  extInfo: Record<string, any>;\n}\n\nexport interface LoadParams {\n  forceUpdate?: boolean;\n}\n\ntype Primitive = boolean | number | string | null | undefined | PublicKey;\n\n/**\n *\n * @example\n * ```typescript\n * interface A {\n *   keyA: string;\n *   keyB: string;\n *   map: {\n *     hello: string;\n *     i: number;\n *   };\n *   list: (string | number)[];\n *   keyC: number;\n * }\n *\n * type WrappedA = ReplaceType<A, string, boolean> // {\n *   keyA: boolean;\n *   keyB: boolean;\n *   map: {\n *     hello: boolean;\n *     i: number;\n *   };\n *   list: (number | boolean)[];\n *   keyC: number;\n * }\n * ```\n */\nexport type ReplaceType<Old, From, To> = {\n  [T in keyof Old]: Old[T] extends From // to avoid case: Old[T] is an Object,\n    ? Exclude<Old[T], From> | To // when match,  directly replace\n    : Old[T] extends Primitive // judge whether need recursively replace\n    ? From extends Old[T] // it's an Object\n      ? Exclude<Old[T], From> | To // directly replace\n      : Old[T] // stay same\n    : ReplaceType<Old[T], From, To>; // recursively replace\n};\n\nexport type MayArray<T> = T | Array<T>;\n\nexport type MayDeepArray<T> = T | Array<MayDeepArray<T>>;\n\nexport type MayFunction<T, PS extends any[] = []> = T | ((...Params: PS) => T);\n\nexport type ArrayItem<T extends ReadonlyArray<any>> = T extends Array<infer P> ? P : never;\n\nexport type ExactPartial<T, U> = {\n  [P in Extract<keyof T, U>]?: T[P];\n} & {\n  [P in Exclude<keyof T, U>]: T[P];\n};\n\nexport type ExactRequired<T, U> = {\n  [P in Extract<keyof T, U>]-?: T[P];\n} & {\n  [P in Exclude<keyof T, U>]: T[P];\n};\n\n/**\n * extract only string and number\n */\nexport type SKeyof<O> = Extract<keyof O, string>;\n\nexport type GetValue<T, K> = K extends keyof T ? T[K] : undefined;\n/**\n * @example\n * type A = { a: number; b: string; c?: string }\n * type B = { a: string; c: string; d?: boolean }\n *\n * type D = SOR<A, B> // { a: number | string; b: string | undefined; c: string | undefined; d: boolean | undefined } // ! if use SOR, you lost union type guard feature, try NOT to use this trick\n */\nexport type SOR<T, U> = { [K in keyof T | keyof U]: GetValue<T, K> | GetValue<U, K> };\n\nexport type Fallback<T, FallbackT> = T extends undefined ? FallbackT : T;\n\n/**\n * @example\n * type A = { a: number; b: string; c?: string }\n * type B = { a: string; c: string; d?: boolean }\n *\n * type D = Cover<A, B> // { a: string; b: string; c: string; d?: boolean}\n */\nexport type Cover<O, T> = { [K in SKeyof<O> | SKeyof<T>]: Fallback<GetValue<T, K>, GetValue<O, K>> };\n\nexport type UnionCover<O, T> = T extends T ? Cover<O, T> : never;\n\ntype MergeArr<Arr> = (Arr extends (infer T)[] ? T : never)[];\n\n/**\n * typescript type helper function\n * @example\n * type A = { hello: string; version: 3 }[]\n * type B = { hello: string; version: 5 }[]\n * type OK = MergeArr<A | B> // ({ hello: string; version: 3 } | { hello: string; version: 5 })[]\n * type Wrong = A | B // { hello: string; version: 3 }[] | { hello: string; version: 5 }[] // <= this type can't have auto type intelligense of array.map\n */\nexport const unionArr = <T>(arr: T): MergeArr<T> => arr as unknown as MergeArr<T>;\n"],"mappings":"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","names":[]}